<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GemBox.Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:GemBox.Collections.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are accessible by the key or index.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:GemBox.Collections.OrderedDictionary`2.GetValueOrDefault(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>
            The element with the specified key. 
            If an element with the specified key is not found, a default value is returned.
            </returns>
        </member>
        <member name="M:GemBox.Collections.OrderedDictionary`2.SetValueOrDefault(`0,`1)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="value">The object to insert.</param>
        </member>
        <member name="M:GemBox.Collections.OrderedDictionary`2.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index.
            </summary>
            <param name="index">The zero-based index of the key to get.</param>
            <returns>The key at the specified index.</returns>
        </member>
        <member name="T:GemBox.IO.ReadOnlyIdentityStream">
            <summary>
            Stream that reads the data from the <see cref="P:GemBox.IO.TransformStream.BaseStream" /> without any transformation.
            </summary>
        </member>
        <member name="M:GemBox.IO.ReadOnlyTransformStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <para>It is recommended to also override <see cref="M:System.IO.Stream.ReadByte" /> method.</para>
            <para>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</para>
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="P:GemBox.IO.SeekableByteStreamWriter.LinePosition">
            <summary>
            <para>Gets the line position.</para>
            <para>
              <see cref="P:GemBox.IO.SeekableByteStreamWriter.Position" /> will probably be changed just to rewrite Contents string of a signature dictionary <see href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=474">(see 12.8, "Digital Signatures")</see>.
            Beginning with PDF 1.3, the Contents string of a signature dictionary is not subject to the restriction on line length, so we do not care about not correct <see cref="P:GemBox.IO.SeekableByteStreamWriter.LinePosition" /> value after <see cref="P:GemBox.IO.SeekableByteStreamWriter.Position" /> is changed.
            </para>
            <para>
            Between stream data and <i>endstream</i> keyword will always come EOL (end-of-line) marker that will reset <see cref="P:GemBox.IO.SeekableByteStreamWriter.LinePosition" />, so writing stream data is not an issue regarding the correct value of <see cref="P:GemBox.IO.SeekableByteStreamWriter.LinePosition" />.
            </para>
            </summary>
            <value>
            The line position.
            </value>
        </member>
        <member name="T:GemBox.IO.WriteOnlyIdentityStream">
            <summary>
            Stream that writes the data to the <see cref="P:GemBox.IO.TransformStream.BaseStream" /> without any transformation.
            </summary>
        </member>
        <member name="M:GemBox.IO.WriteOnlyTransformStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <para>It is recommended to also override <see cref="M:System.IO.Stream.WriteByte(System.Byte)" /> method.</para>
            <para>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</para>
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:GemBox.Encryption.SHA">
            <summary>
            This is implemented using SHA1 algorithm
            </summary>
        </member>
        <member name="F:GemBox.CalculationEngine.DoubleConversionMode.Full">
            <summary>
            Converts all values to double.
            </summary>
        </member>
        <member name="F:GemBox.CalculationEngine.DoubleConversionMode.IgnoreString">
            <summary>
            Converts all values to double except string values which are represented as 0.
            </summary>
        </member>
        <member name="F:GemBox.CalculationEngine.DoubleConversionMode.NumbersOnly">
            <summary>
            Converts only numeric values (byte, sbyte, short, e.t.c) to double. All other values are ignored.
            </summary>
        </member>
        <member name="F:GemBox.CalculationEngine.DoubleConversionMode.NumbersOnlyZero">
            <summary>
            Converts only numeric values (byte, sbyte, short, e.t.c) to double. All other values are represented as 0.
            </summary>
        </member>
        <member name="T:GemBox.OpenXml.Encryption.OpenXmlEncryption">
            <summary>
            Class for encrypting/decrypting Office 2007 files
            </summary>
        </member>
        <member name="M:GemBox.OpenXml.IO.Packaging.Relationship.ResolveInternalTarget(System.String)">
            <summary>
            Gets the resolved target path, or <see langword="null"/> if target is external, empty, <see langword="null"/> reference or "NULL".
            </summary>
            <param name="sourcePartPath">The source part path.</param>
            <returns>The resolved target path, or <see langword="null"/> if target is external, empty, <see langword="null"/> reference or "NULL".</returns>
        </member>
        <member name="M:GemBox.Html.Style.HtmlElementStyle.Contains(System.String)">
            <summary>
            Checks if CSS property is defined in this style.
            </summary>
            <param name="name">CSS property name</param>
            <returns>
            True if property is defined in this style; otherwise, false;
            </returns>
        </member>
        <member name="M:GemBox.Html.Style.HtmlElementStyle.IsDefined(System.String)">
            <summary>
            Checks if CSS property is defined in this or, in case of inheritable properties, in any of parent styles.
            </summary>
            <param name="name">CSS property name</param>
            <returns>
            True if property is defined in this style or, in case of inheritable properties, in parent styles; otherwise, false;
            </returns>
        </member>
        <member name="F:GemBox.Html.Style.StyleValueOptions.Important">
            <summary>
            CSS !important value.
            </summary>
        </member>
        <member name="F:GemBox.Html.Style.StyleValueOptions.Default">
            <summary>
            Default value based on element tag set by <see cref="T:GemBox.Html.Style.StyleContext"/>. Can be overridden by element's attributes.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.AbstractRange">
            <summary>
            Base class for classes representing one or more excel cells.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Name">
            <summary>
            Gets the name of <see cref="T:GemBox.Spreadsheet.AbstractRange"/> instance.
            </summary>
            <remarks>
            A cell name includes its column letter and row number. For example, the name of a cell in row 0 and column 0 is "A1".
            A cell range name includes the column letter and row number of first (top-left) and last (bottom-right) cell.
            For example, the name of range [0, 0]...[4, 4] is "A1:E5", of range [0, 0]...[4, MaxColumns-1] is "1:5",
            of range [0, 0]...[MaxRows-1, 4] is "A:E", of single cell range [4, 4]...[4, 4] is "E5".
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Comment">
            <summary>
            Gets or sets comment.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Hyperlink">
            <summary>
            Gets or sets hyperlink.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Formula">
            <summary>
            Gets or sets formula string.
            </summary>		
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Value">
            <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.Calculate">
            <summary>
            Calculates formula for one or more excel cells.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.Insert(GemBox.Spreadsheet.InsertShiftDirection)">
            <summary>
            Inserts a range by shifting cells in the specified direction.
            </summary>
            <param name="direction">The shift direction.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.Remove(GemBox.Spreadsheet.RemoveShiftDirection)">
            <summary>
            Removes a range by shifting cells in the specified direction.
            </summary>
            <param name="direction">The shift direction.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Style">
            <summary>
            Gets or sets the cell formatting of one or more cells.
            </summary>
            <value>
            The cell formatting of one or more cells.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="P:GemBox.Spreadsheet.AbstractRange.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="P:GemBox.Spreadsheet.AbstractRange.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="P:GemBox.Spreadsheet.AbstractRange.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="P:GemBox.Spreadsheet.AbstractRange.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="P:GemBox.Spreadsheet.AbstractRange.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="P:GemBox.Spreadsheet.AbstractRange.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.CharacterRanges">
            <summary>
            Returns all <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> objects that represents a range of characters within the cell text.
            </summary>
            <value>
            All <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> objects that represents a range of characters within the cell text.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.GetCharacters(System.Int32)">
            <summary>
            Returns a <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object that represents a range of characters within the cell text.
            The range starts at a specified character position.
            Not supported in ODS and XLS.
            </summary>
            <param name="startIndex">The zero-based starting character position.</param>
            <returns>New <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object.</returns>
            <remarks>This method only works on cell with string value.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="startIndex"/> is less than zero or is equal to or greater than 32767.</exception>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-inline-formatting/203">In-line Text Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.GetCharacters(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object that represents a range of characters within the cell text.
            The range starts at a specified character position and has a specified length.
            Not supported in ODS and XLS.
            </summary>
            <param name="startIndex">The zero-based starting character position.</param>
            <param name="length">The number of characters.</param>
            <returns>New <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object.</returns>
            <remarks>This method only works on cell with string value.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="startIndex"/> is less than zero or is equal to or greater than 32767.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="length"/> is equal to or less than zero or is greater than 32767.</exception>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-inline-formatting/203">In-line Text Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.ReplaceText(System.String,System.String)">
            <summary>
            Replaces all occurrences of the specified text with another text in the current <see cref="T:GemBox.Spreadsheet.AbstractRange"/>.
            </summary>
            <param name="oldValue">The text to be replaced.</param>
            <param name="newValue">The text to replace all occurrences of <paramref name="oldValue"/>.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.ReplaceText(System.String,System.String,System.Boolean)">
            <summary>
            Replaces all occurrences of the specified text with another text in the current <see cref="T:GemBox.Spreadsheet.AbstractRange"/>.
            </summary>
            <param name="oldValue">The text to be replaced.</param>
            <param name="newValue">The text to replace all occurrences of <paramref name="oldValue"/>.</param>
            <param name="matchCase"><see langword="true"/> to match exact case, <see langword="false"/> otherwise.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.ReplaceText(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Replaces all occurrences of the specified text with another text in the current <see cref="T:GemBox.Spreadsheet.AbstractRange"/>.
            </summary>
            <param name="oldValue">The text to be replaced.</param>
            <param name="newValue">The text to replace all occurrences of <paramref name="oldValue"/>.</param>
            <param name="matchCase"><see langword="true"/> to match exact case, <see langword="false"/> otherwise.</param>
            <param name="matchEntireCellContents"><see langword="true"/> to match entire cell contents, <see langword="false"/> otherwise.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.ClearFormat">
            <summary>
            Clears the range format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.Clear(GemBox.Spreadsheet.ClearOptions)">
            <summary>
            Clears the range (content, formatting, comment, hyperlink or all).
            </summary>
            <param name="options">The clear options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.AbstractRange"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.AbstractRange"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.IsStyleDefault">
            <summary>
            Returns <see langword="true"/> if all cells in <see cref="T:GemBox.Spreadsheet.AbstractRange"/> have default cell style; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets borders on one or more excel cells, taking cell position into account.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Line color.</param>
            <param name="lineStyle">Line style.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.AnchorCell">
            <summary>
            Represents an anchor cell object used in <see cref="T:GemBox.Spreadsheet.ExcelDrawingPosition"/> type to specify from which cell and to which cell drawing (picture, chart, etc.) spans.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell"/> class by using offset values in EMU units  (1 point = 12 700 EMU).
            </summary>
            <param name="column">The column where the anchor is placed.</param>
            <param name="row">The row where the anchor is placed.</param>
            <param name="columnOffset">The column offset for the anchor.</param>
            <param name="rowOffset">The row offset for the anchor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> or <paramref name="row"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="column"/> and <paramref name="row"/> do not belong to the same worksheet.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell"/> class by using offset values in arbitrary length unit.
            </summary>
            <param name="column">The column where the anchor is placed.</param>
            <param name="row">The row where the anchor is placed.</param>
            <param name="columnOffset">The column offset for the anchor in arbitrary length unit.</param>
            <param name="rowOffset">The row offset for the anchor in arbitrary length unit.</param>
            <param name="unit">The length unit in which <paramref name="columnOffset"/> and <paramref name="rowOffset"/> are specified.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="column"/> or <paramref name="row"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="column"/> and <paramref name="row"/> do not belong to the same worksheet.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell"/> class.
            </summary>
            <param name="column">The column where the anchor is placed.</param>
            <param name="row">The row where the anchor is placed.</param>
            <param name="topLeft">If set to <see langword="true" />, anchor will be placed in the top left corner of the cell in current column and current row; otherwise, anchor will be placed in the top-left corner of the cell in next column and next row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell"/> class by using another anchor cell.
            </summary>
            <param name="anchorCell">Anchor cell to copy from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="anchorCell"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.Column">
            <summary>
            Gets or sets the column for the anchor cell.
            </summary>
            <value>
            The column for the anchor cell.
            </value>
            <exception cref="T:System.ArgumentNullException">Value is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Column doesn't belong to the same worksheet as anchor cell row.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.Row">
            <summary>
            Gets or sets the row for the anchor cell.
            </summary>
            <value>
            The row for the anchor cell.
            </value>
            <exception cref="T:System.ArgumentNullException">Value is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Row doesn't belong to the same worksheet as anchor cell column.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset">
            <summary>
            Gets or sets the column offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </summary>
            <value>
            The column offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </value>
            <remarks>
            <para><see cref="T:GemBox.Spreadsheet.LengthUnit">Length unit</see> for this property is <see cref="F:GemBox.Spreadsheet.LengthUnit.Emu">EMU</see> (English Metric Unit) (1 point = 12 700 EMU) for historical reasons.</para>
            <para>Use <see cref="M:GemBox.Spreadsheet.AnchorCell.GetColumnOffset(GemBox.Spreadsheet.LengthUnit)"/> and <see cref="M:GemBox.Spreadsheet.AnchorCell.SetColumnOffset(System.Double,GemBox.Spreadsheet.LengthUnit)"/> methods to get or set the <see cref="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset"/> using arbitrary <see cref="T:GemBox.Spreadsheet.LengthUnit">length unit</see>.</para>
            <para><see cref="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset"/> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Column"/>.<see cref="P:GemBox.Spreadsheet.ExcelColumn.Width"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.RowOffset">
            <summary>
            Gets or sets row offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </summary>
            <value>
            The row offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </value>
            <remarks>
            <para><see cref="T:GemBox.Spreadsheet.LengthUnit">Length unit</see> for this property is <see cref="F:GemBox.Spreadsheet.LengthUnit.Emu">EMU</see> (English Metric Unit) (1 point = 12 700 EMU) for historical reasons.</para>
            <para>Use <see cref="M:GemBox.Spreadsheet.AnchorCell.GetRowOffset(GemBox.Spreadsheet.LengthUnit)"/> and <see cref="M:GemBox.Spreadsheet.AnchorCell.SetRowOffset(System.Double,GemBox.Spreadsheet.LengthUnit)"/> methods to get or set the <see cref="P:GemBox.Spreadsheet.AnchorCell.RowOffset"/> using arbitrary <see cref="T:GemBox.Spreadsheet.LengthUnit">length unit</see>.</para>
            <para><see cref="P:GemBox.Spreadsheet.AnchorCell.RowOffset"/> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Row"/>.<see cref="P:GemBox.Spreadsheet.ExcelRow.Height"/>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.GetColumnOffset(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the column offset for the anchor cell in arbitrary length unit.
            </summary>
            <param name="unit">The length unit in which to return column offset.</param>
            <returns>The column offset for the anchor cell in arbitrary length unit.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset"/> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Column"/>.<see cref="P:GemBox.Spreadsheet.ExcelColumn.Width"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.SetColumnOffset(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the column offset for the anchor cell in arbitrary length unit.
            </summary>
            <param name="value">The column offset value.</param>
            <param name="unit">The length unit in which <paramref name="value"/> is specified.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.GetRowOffset(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the row offset for the anchor cell in arbitrary length unit.
            </summary>
            <param name="unit">The length unit in which to return row offset.</param>
            <returns>The row offset for the anchor cell in arbitrary length unit.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.AnchorCell.RowOffset"/> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Row"/>.<see cref="P:GemBox.Spreadsheet.ExcelRow.Height"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.SetRowOffset(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the row offset for the anchor cell in arbitrary length unit.
            </summary>
            <param name="value">The row offset value.</param>
            <param name="unit">The length unit in which <paramref name="value"/> is specified.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.Equals(GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Determines whether the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.AnchorCell"/> is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance.
            </summary>
            <param name="other">The other anchor cell to compare with this anchor cell instance.</param>
            <returns><see langword="true"/> if the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.AnchorCell"/> is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this anchor cell instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is an <see cref="T:GemBox.Spreadsheet.AnchorCell"/> and is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.AnchorCell"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.AutoFilter">
            <summary>
            Represents filter settings and provides filter functionality.
            </summary>
            <remarks>
            <para>Use <see cref="O:GemBox.Spreadsheet.CellRange.Filter" /> methods to create or get an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> instance.</para>
            <para>Active <see cref="T:GemBox.Spreadsheet.AutoFilter" /> is stored in the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Filter" />) and is loaded from and saved to XLSX file.</para>
            </remarks>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.AutoFilter.Range">
            <summary>
            Gets the range to filter.
            </summary>
            <value>
            The range to filter.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.AutoFilter.Columns">
            <summary>
            Gets the filter columns.
            </summary>
            <value>
            The filter columns.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.AutoFilter.Sort">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.AutoFilter"/> sort state.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.AutoFilter"/> sort state.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ByValues(System.Int32,System.Collections.IEnumerable)">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).</para>
            <para><see cref="T:GemBox.Spreadsheet.ValuesFilter"/> filters by a list of values.</para>
            <para>The list can contain <see langword="null"/>, <see cref="T:System.String"/> and <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> values.</para>
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that a set <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> applies to.</param>
            <param name="values">The list of values to filter by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters or to apply filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="values"/> contains an item which is not <see langword="null"/>, <see cref="T:System.String"/> or <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ByValues(System.Int32,System.Object[])">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).</para>
            <para><see cref="T:GemBox.Spreadsheet.ValuesFilter"/> filters by a list of values.</para>
            <para>The list can contain <see langword="null"/>, <see cref="T:System.String"/> and <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> values.</para>
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that a set <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> applies to.</param>
            <param name="values">The list of values to filter by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters or to apply filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="values"/> contains an item which is not <see langword="null"/>, <see cref="T:System.String"/> or <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ByTop10(System.Int32,System.Boolean,System.Boolean,System.Double)">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.Top10Filter"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).</para>
            <para><see cref="T:GemBox.Spreadsheet.Top10Filter"/> filters by a top N (percent or number of items).</para>
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that a set <see cref="T:GemBox.Spreadsheet.Top10Filter"/> applies to.</param>
            <param name="top">a value indicating whether or not to filter by top order. A <see langword="false" /> value filters by bottom order.</param>
            <param name="percent">A value indicating whether or not to filter by percent value of the column. A <see langword="false" /> value filters by number of items.</param>
            <param name="value">The top or bottom value to use as the filter criteria. For example "Filter by Top 10 Percent" or "Filter by Top 5 Items".</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters or to apply filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> must be greater than zero.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ByCustom(System.Int32,GemBox.Spreadsheet.FilterOperator,System.Object)">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.CustomFilter"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).</para>
            <para><see cref="T:GemBox.Spreadsheet.CustomFilter"/> filters by a one or two conditions (operators and values).</para>
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that a set <see cref="T:GemBox.Spreadsheet.Top10Filter"/> applies to.</param>
            <param name="operator">The operator used by the filter condition.</param>
            <param name="value">The value used by the filter condition.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters or to apply filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <exception cref="T:System.NotSupportedException">Value's type is not supported.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ByCustom(System.Int32,GemBox.Spreadsheet.FilterOperator,System.Object,System.Boolean,GemBox.Spreadsheet.FilterOperator,System.Object)">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.CustomFilter"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).</para>
            <para><see cref="T:GemBox.Spreadsheet.CustomFilter"/> filters by a one or two conditions (operators and values).</para>
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that a set <see cref="T:GemBox.Spreadsheet.CustomFilter"/> applies to.</param>
            <param name="operator">The operator used by the (first) filter condition.</param>
            <param name="value">The value used by the (first) filter condition.</param>
            <param name="and">The value indicating whether the two conditions have an "and" relationship. <see langword="true"/> indicates "and" and <see langword="false"/> indicates "or".</param>
            <param name="operator2">The operator used by the second filter condition.</param>
            <param name="value2">The value used by the second filter condition.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters or to apply filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <exception cref="T:System.NotSupportedException">Value's type is not supported.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ByDynamic(System.Int32,GemBox.Spreadsheet.DynamicFilterType)">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.DynamicFilter"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).</para>
            <para><see cref="T:GemBox.Spreadsheet.DynamicFilter"/> filters by a dynamic criteria that can change, either with the data itself (e.g., "above average") or with the current system date (e.g., show values for "today").</para>
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that a set <see cref="T:GemBox.Spreadsheet.DynamicFilter"/> applies to.</param>
            <param name="dynamicFilterType">The dynamic filter type.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters or to apply filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ByPredicate(System.Int32,System.Predicate{GemBox.Spreadsheet.ExcelCell})">
            <summary>
            <para>Sets a custom filter method to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).</para>
            <para>Use this method to specify a custom filter behavior which is not provided by any of the <see cref="T:GemBox.Spreadsheet.FilterType"/>s.</para>
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that a set custom filter predicate applies to.</param>
            <param name="match">A custom filter method.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters or to apply filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it won't be removed.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>).
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified custom list by which order of items to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,System.String[])">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified custom list by which order of items to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified order to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="descending"><see langword="true" /> to sort the values in the descending order; otherwise, <see langword="false" />.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified order and custom list by which order of items to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="descending"><see langword="true" /> to sort the values in the descending order; otherwise, <see langword="false" />.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified order and custom list by which order of items to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="descending"><see langword="true" /> to sort the values in the descending order; otherwise, <see langword="false" />.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,System.Comparison{GemBox.Spreadsheet.ExcelCell})">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified comparison method to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="comparison">The comparison method to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified font color to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fontColor">The font color to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,GemBox.Spreadsheet.SpreadsheetColor,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified font color and order to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fontColor">The font color to sort by.</param>
            <param name="descending"><see langword="true" /> to sort cells with the specified font color at the end of a range; otherwise, <see langword="false" /> to sort cells with the specified font color at the beginning of a range.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,GemBox.Spreadsheet.ExcelFillPattern)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified fill pattern to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fillPattern">The fill pattern to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,GemBox.Spreadsheet.ExcelFillPattern,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified fill pattern and order to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fillPattern">The fill pattern to sort by.</param>
            <param name="descending"><see langword="true" /> to sort cells with the specified fill pattern at the end of a range; otherwise, <see langword="false" /> to sort cells with the specified fill pattern at the beginning of a range.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,GemBox.Spreadsheet.SpreadsheetIcon)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified icon to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="icon">The icon to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.SortBy(System.Int32,GemBox.Spreadsheet.SpreadsheetIcon,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to a column with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/>) and with the specified icon and order to sort by.
            </summary>
            <param name="columnIndex">The index of a column relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="icon">The icon to sort by.</param>
            <param name="descending"><see langword="true" /> to sort cells with the specified icon at the end of a range; otherwise, <see langword="false" /> to sort cells with the specified icon at the beginning of a range.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.AutoFilter"/> to specify additional filters / sort levels or to apply filter / sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</exception>
            <remarks>
            If <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.Apply">
            <summary>
            <para>Performs the filtering and sorting of this <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> based on this <see cref="T:GemBox.Spreadsheet.AutoFilter"/> settings.</para>
            <para>Rows which cells contained in <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> do not satisfy filtering conditions will be hidden (<see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden"/> will be set to <see langword="true"/>).</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">Sort range contains merged cells.</exception>
            <remarks>
            This method has the same affect as <see cref="M:GemBox.Spreadsheet.AutoFilter.Apply(System.Boolean)"/> with parameter set to <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.Apply(System.Boolean)">
            <summary>
            <para>Performs the filtering and (optionally) sorting of this <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> based on this <see cref="T:GemBox.Spreadsheet.AutoFilter" /> settings.</para>
            <para>Rows which cells contained in <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> do not satisfy filtering conditions will be hidden (<see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden"/> will be set to <see langword="true"/>).</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">Sort range contains merged cells.</exception>
            <param name="applySort">if set to <see langword="true" /> perform sorting in addition to filtering.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ShowAll">
            <summary>
            Shows all rows (sets <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden"/> to <see langword="false"/>) to which <see cref="P:GemBox.Spreadsheet.AutoFilter.Range"/> belongs.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AutoFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.AutoFilter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.AutoFilter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.BuiltInCellStyleName">
            <summary>
            Represents a built-in style name.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
            <seealso cref="T:GemBox.Spreadsheet.CellStyleCollection" />
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Normal">
            <summary>
            '<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal"/></b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.RowLevel1">
            <summary>
            '<b>RowLevel_1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.RowLevel2">
            <summary>
            '<b>RowLevel_2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.RowLevel3">
            <summary>
            '<b>RowLevel_3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.RowLevel4">
            <summary>
            '<b>RowLevel_4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.RowLevel5">
            <summary>
            '<b>RowLevel_5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.RowLevel6">
            <summary>
            '<b>RowLevel_6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.RowLevel7">
            <summary>
            '<b>RowLevel_7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ColLevel1">
            <summary>
            '<b>ColLevel_1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ColLevel2">
            <summary>
            '<b>ColLevel_2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ColLevel3">
            <summary>
            '<b>ColLevel_3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ColLevel4">
            <summary>
            '<b>ColLevel_4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ColLevel5">
            <summary>
            '<b>ColLevel_5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ColLevel6">
            <summary>
            '<b>ColLevel_6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ColLevel7">
            <summary>
            '<b>ColLevel_7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Comma">
            <summary>
            '<b>Comma</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Currency">
            <summary>
            '<b>Currency</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Percent">
            <summary>
            '<b>Percent</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Comma0">
            <summary>
            '<b>Comma [0]</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Currency0">
            <summary>
            '<b>Currency [0]</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Hyperlink">
            <summary>
            <b>Hyperlink</b> built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.FollowedHyperlink">
            <summary>
            <b>Followed Hyperlink</b> built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Note">
            <summary>
            <b>Note</b> built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.WarningText">
            <summary>
            '<b>Warning Text</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Title">
            <summary>
            '<b>Title</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading1">
            <summary>
            '<b>Heading 1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading2">
            <summary>
            '<b>Heading 2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading3">
            <summary>
            '<b>Heading 3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading4">
            <summary>
            '<b>Heading 4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Input">
            <summary>
            '<b>Input</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Output">
            <summary>
            '<b>Output</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Calculation">
            <summary>
            '<b>Calculation</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.CheckCell">
            <summary>
            '<b>Check Cell</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.LinkedCell">
            <summary>
            '<b>Linked Cell</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Total">
            <summary>
            '<b>Total</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Good">
            <summary>
            '<b>Good</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Bad">
            <summary>
            '<b>Bad</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Neutral">
            <summary>
            '<b>Neutral</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent1">
            <summary>
            '<b>Accent1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent1Pct20">
            <summary>
            '<b>20% - Accent1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent1Pct40">
            <summary>
            '<b>40% - Accent1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent1Pct60">
            <summary>
            '<b>60% - Accent1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent2">
            <summary>
            '<b>Accent2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent2Pct20">
            <summary>
            '<b>20% - Accent2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent2Pct40">
            <summary>
            '<b>40% - Accent2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent2Pct60">
            <summary>
            '<b>60% - Accent2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent3">
            <summary>
            '<b>Accent3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent3Pct20">
            <summary>
            '<b>20% - Accent3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent3Pct40">
            <summary>
            '<b>40% - Accent3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent3Pct60">
            <summary>
            '<b>60% - Accent3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent4">
            <summary>
            '<b>Accent4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent4Pct20">
            <summary>
            '<b>20% - Accent4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent4Pct40">
            <summary>
            '<b>40% - Accent4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent4Pct60">
            <summary>
            '<b>60% - Accent4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent5">
            <summary>
            '<b>Accent5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent5Pct20">
            <summary>
            '<b>20% - Accent5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent5Pct40">
            <summary>
            '<b>40% - Accent5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent5Pct60">
            <summary>
            '<b>60% - Accent5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent6">
            <summary>
            '<b>Accent6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent6Pct20">
            <summary>
            '<b>20% - Accent6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent6Pct40">
            <summary>
            '<b>40% - Accent6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Accent6Pct60">
            <summary>
            '<b>60% - Accent6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ExplanatoryText">
            <summary>
            '<b>Explanatory Text</b>' built-in style.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.BuiltInDocumentProperties">
            <summary>
            Enumeration of available built-in document properties.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Title">
            <summary>
            Title of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Author">
            <summary>
            Name of the document's author.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Subject">
            <summary>
            Subject of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Comments">
            <summary>
            Document comments.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Category">
            <summary>
            Category of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Status">
            <summary>
            Status of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Keywords">
            <summary>
            Document keywords.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.LastSavedBy">
            <summary>
            Name of the last author.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Manager">
            <summary>
            Manager.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Company">
            <summary>
            Company.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.HyperlinkBase">
            <summary>
            Base hyperlink.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Application">
            <summary>
            Application.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.DateContentCreated">
            <summary>
            UTC time of creation of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.DateLastSaved">
            <summary>
            UTC time on which the document was last modified/saved.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.DateLastPrinted">
            <summary>
            UTC time on which the document was last printed.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CalculationEngine.CalculationOptions">
            <summary>
            Class represents various calculation engine options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CalculationEngine.CalculationOptions.EnableIterativeCalculation">
            <summary>
            Gets or sets a value indicating whether iterative calculation is enabled.
            </summary>
            <value>
            <c>True</c> if iterative calculation is enabled; otherwise, <c>false</c>.
            </value>
            <remarks>
            A circular reference is when a formula refers to itself directly or indirectly.
            Setting this property to <c>true</c> will allow circular references in cell formulas;
            otherwise a <see cref="T:GemBox.Spreadsheet.CalculationEngine.SpreadsheetParserException" /> will be thrown for every circular reference in the calculation process.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CalculationEngine.CalculationOptions.MaximumIterations">
            <summary>
            Gets or sets the maximum calculation iterations.
            </summary>
            <value>
            The maximum calculation iterations.
            </value>
            <remarks>
            This property defines the maximum number of formula recalculations for a circular reference.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CalculationEngine.CalculationOptions.MaximumChange">
            <summary>
            Gets or sets the maximum calculation change.
            </summary>
            <value>
            The maximum calculation change.
            </value>
            <remarks>
            This property defines the maximum value change in circular reference iterations after which the calculation process is stopped.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError">
            <summary>
            Spreadsheet calculation error type enumeration.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.DivideByZero">
            <summary>
            Divide by zero error.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.Name">
            <summary>
            Undefined function or identifier.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.Number">
            <summary>
            Value cannot be converted to number or number is out of defined range.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.Value">
            <summary>
            Incompatible argument type error.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.Reference">
            <summary>
            Cell reference evaluation error.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.Null">
            <summary>
            Null value error.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.NotAvailable">
            <summary>
            Designated value is not available.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationException">
            <summary>
            Represents errors that can occur in GemBox.Spreadsheet formula calculation process.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationException.Error">
            <summary>
            Gets the calculation error type.
            </summary>
            <value>
            The calculation error type.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationException.GetErrorValue(GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError)">
            <summary>
            Gets the string value for provided calculation error type.
            </summary>
            <param name="error">The calculation error type.</param>
            <returns>
            String value representing provided calculation error type.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds additional exception data to the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.CalculationEngine.SpreadsheetParserException">
            <summary>
            Represents exception that can occur in GemBox.Spreadsheet formula parsing process.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CalculationEngine.SpreadsheetParserException.WorksheetName">
            <summary>
            Gets the name of the <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <value>
            The name of the <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.CalculationEngine.SpreadsheetParserException.CellName">
            <summary>
            Gets the name of the <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.
            </summary>
            <value>
            The name of the <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.CalculationEngine.SpreadsheetParserException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds additional exception data to the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.CellBorder">
            <summary>
            Represents the color and line style for the single border of a cell.
            </summary>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Borders" />
            <seealso cref="T:GemBox.Spreadsheet.CellBorders" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellBorder.LineColor">
            <summary>
            <para>Gets or sets the border line color.</para>
            <para>Default value is color created from name <see cref="F:GemBox.Spreadsheet.ColorName.Empty" />.</para>
            </summary>
            <value>
            The border line color.
            </value>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellBorder.LineStyle">
            <summary>
            <para>Gets or sets the line style for this <see cref="T:GemBox.Spreadsheet.CellBorder" />.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.LineStyle.None" />.</para>
            </summary>
            <value>
            The line style for this <see cref="T:GemBox.Spreadsheet.CellBorder" />.
            </value>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellBorder.SetBorder(GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets the border color and line style.
            </summary>
            <param name="lineColor">The border line color.</param>
            <param name="lineStyle">The line style.</param>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellBorder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CellBorder"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CellBorder"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.CellBorders">
            <summary>
            Represents a single set of cell border formats (left, right, top, bottom and diagonal).
            </summary>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Borders" />
            <seealso cref="T:GemBox.Spreadsheet.CellBorder" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellBorders.Item(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.CellBorder" /> which contains the color and line style for the specified individual border of a cell.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.CellBorder" /> which contains the color and line style for the specified individual border of a cell.
            </value>
            <param name="individualBorder">The individual border for which to get the color and line style.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.CellBorder" /> which contains the color and line style for the specified individual border of a cell.</returns>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets the color and line style for the specified multiple borders of a cell.
            </summary>
            <param name="multipleBorders">The multiple borders for which to set the color and line style.</param>
            <param name="lineColor">The border line color.</param>
            <param name="lineStyle">The line style.</param>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellBorders.GetUnresolvedBorder(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the unresolved (direct) <see cref="T:GemBox.Spreadsheet.CellBorder"/> which contains the color and line style for the specified individual border of a cell.
            </summary>
            <param name="individualBorder">The individual border for which to get the color and line style.</param>
            <returns>The unresolved (direct) <see cref="T:GemBox.Spreadsheet.CellBorder"/> which contains the color and line style for the specified individual border of a cell.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellBorders.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CellBorders"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CellBorders"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.CellRange">
            <summary>
            Cell range is a rectangular group of worksheet cells.
            </summary>
            <remarks>
            <para>Cell range is determined by its <see cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex">top</see>, <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex">left</see>, <see cref="P:GemBox.Spreadsheet.CellRange.LastRowIndex">bottom</see> and <see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex">right</see> borders.
            These properties are read-only, so if you require different cell range use one of the following methods: <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String)" /> or <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)" />.
            Specific cell can be accessed in a few ways, depending on <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />.
            Cells in the range can be merged / unmerged by the use of <see cref="P:GemBox.Spreadsheet.CellRange.Merged" /> property.</para>
            <para><see cref="P:GemBox.Spreadsheet.CellRange.Value" /> property set will set value of multiple cells or of a merged range.
            <see cref="P:GemBox.Spreadsheet.CellRange.Value" /> property get has meaning only if range is merged; otherwise, exception is thrown.</para>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellRange" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellRange" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.FirstRowIndex">
            <summary>
            Gets index of the first (topmost) row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex">
            <summary>
            Gets index of the first (leftmost) column.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.LastRowIndex">
            <summary>
            Gets index of the last (bottommost) row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.LastColumnIndex">
            <summary>
            Gets index of the last (rightmost) column.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Width">
            <summary>
            Gets width of this cell range, in columns.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Height">
            <summary>
            Gets height of this cell range, in rows.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.StartPosition">
            <summary>
            Gets name of the first (top-left) cell in this cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.EndPosition">
            <summary>
            Gets name of the last (bottom-right) cell in this cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.IsAnyCellMerged">
            <summary>
            Returns <see langword="true"/> is any cell in this cell range is merged; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Item(System.Int32)">
            <overloads>Gets excel cell with the specified name or at the specified position.</overloads>
            <summary>
            Gets excel cell at the specified index.
            </summary>
            <param name="contextIndex">The zero-based context index of the cell.</param>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> context index  
            is specifying relative column position.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> context index
            is specifying relative row position.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> context index
            is specifying cell index inside cell range. The cell at <see cref="P:GemBox.Spreadsheet.CellRange.StartPosition">
            StartPosition</see> has index 0, and the cell at 
            <see cref="P:GemBox.Spreadsheet.CellRange.EndPosition" /> has index of 
            <see cref="P:GemBox.Spreadsheet.CellRange.Width" /> x 
            <see cref="P:GemBox.Spreadsheet.CellRange.Height" /> - 1.</para>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellRange" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellRange" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Item(System.Int32,System.Int32)">
            <summary>
            Gets excel cell at the specified relative position.
            </summary>
            <param name="relativeRow">The zero-based relative row position.</param>
            <param name="relativeColumn">The zero-based relative column position.</param>
            <remarks>
            Absolute position of excel cell is calculated by adding <paramref name="relativeRow" /> and <paramref name="relativeColumn" /> to
            <see cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex" /> and 
            <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex" />.
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellRange" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellRange" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Item(System.String)">
            <summary>
            Gets excel cell with the specified full or partial name.
            </summary>
            <param name="contextName">Full or partial name of the cell.</param>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> full name of 
            the cell must be used (for example; "A1", "D7", etc.).</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> column name  
            must be used (for example; "A", "D", etc.).</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> row name 
            must be used (for example; "1", "7", etc.).</para>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellRange" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellRange" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Merged">
            <summary>
            Gets or sets whether cells in this range are merged.
            </summary>
            <remarks>
            <para>By setting this property to <see langword="true"/>, you are merging all the cells 
            (<see cref="T:GemBox.Spreadsheet.ExcelCell"/>) in this range. Merging process will fail if any 
            of the cells in the range is already merged.</para>
            <para>When modifying merged cell, whole merged range is modified. For example, if you set 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see>, value of merged range will be modified. 
            You can find out if the cell is merged by checking if 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange">ExcelCell.MergedRange</see> property is different 
            than <see langword="null"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Merged range can't be created because some of the cells
            in the range are already merged.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Value">
            <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
            <remarks>
            <para>Property set will set value of multiple cells or of a merged range.</para>
            <para>Property get has meaning only if range is <see cref="P:GemBox.Spreadsheet.CellRange.Merged"/>; 
            otherwise, exception is thrown.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Comment">
            <summary>
            Gets or sets comment
            </summary>		
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Hyperlink">
            <summary>
            Gets or sets hyperlink
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Formula">
            <summary>
            Gets or sets formula string.
            </summary>
            <remarks>
            <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed below.</para>
            <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
            <para>Depending on <see cref="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            ExcelFile.DelayFormulaParse</see> property, formula string can be parsed when this property is set
            or when one of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            ExcelFile.SaveXls</see> methods is called.</para>
            <para>GemBox.Spreadsheet formula parser will use English culture to parse numbers.</para>
            <para>
            Currently unsupported formula features are:
            <list type="bullet">
            <item><description>Const array</description></item>
            <item><description>Array formula</description></item>
            <item><description>R1C1 reference</description></item>
            </list>
            </para>
            <para>
            Currently supported functions in XLS format are: ABS, ACOS, ACOSH, ADDRESS, AND, ARCTAN, AREAS, ASC, ASIN, ASINH, ATAN2, ATANH, AVEDEV, AVERAGE, AVERAGEA, BETADIST, BETAINV, BINOMDIST, CEILING, CELL, CHAR, CHIDST, CHIINV, CHOOSE, CLEAN, CODE, COLUMN, COLUMNS, COMBIN, CONCATENATE, CONFIDENCE, COS, COSH, COUNT, COUNTA, COUNTBLANK, COUNTIF, CRITBINOM, DATE, DATEDIF, DATESTRING, DATEVALUE, DAVERAGE, DAY, DAYS360, DB, DBSC, DCOUNT, DCOUNTA, DDB, DEGREES, DEVSQ, DGET, DMAX, DMIN, DOLLAR, DPRODUCT, DSTDEV, DSTDEVP, DSUM, DVAR, DVARP, EVEN, EXACT, EXP, EXPONDIST, FACT, FDIST, FIND, FINDB, FINV, FISHER, FISHERINV, FIXED, FLOOR, FV, GAMMADIST, GAMMAINV, GAMMALN, GEOMEAN, GROWTH, HARMEAN, HLOOKUP, HOUR, HYPERLINK, HYPGEOMVERT, IF, INDEX, INDIRECT, INFO, INT, IPMT, IRR, ISBLANK, ISERR, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISNUMBER, ISPMT, ISREF, ISTEXT, KURT, LARGE, LEFT, LEFTB, LEN, LENB, LINEST, LN, LOG, LOG10, LOGEST, LOGINV, LOOKUP, LOWER, MATCH, MAX, MAXA, MDETERM, MEDIAN, MID, MIDB, MIN, MINA, MINUTE, MINVERSE, MIRR, MNORMSINV, MOD, MODE, MONTH, N, NA, EGBINOMDIST, NORMDIST, NORMINV, NORMSDIST, NORMSDIST, NOT, NOW, NPER, NPV, NUMBERSTRING, ODD, OFFSET, OR, PERCENTILE, PERCENTRANK, PERMUT, PHONETIC, PI, PMT, POISSON, POWER, PPMT, PRODUCT, PROPER, PV, QUARTILE, RADIANS, RAND, RANK, RATE, REPLACE, REPLACEB, REPT, RIGHT, RIGHTB, ROMAN, ROUND, ROUNDDOWN, ROUNDUP, ROW, ROWS, SEARCH, SEARCHB, SECOND, SIGN, SIN, SINH, SKEW, SLN, SMALL, SQRT, STANDARDIZE, STDEV, STDEVA, STDEVP, STDEVPA, SUBSTITUTE, SUBTOTAL, SUM, SUMIF, SUMSQ, SYD, T, TAN, TANH, TDIST, TEXT, TIME, TIMEVALUE, TINV, TODAY, TRANSPOSE, TREND, TRIM, TRIMMEAN, TRUNC, TYPE, UPPER, USDOLLAR, VALUE, VAR, VARA, VARP, VARPA, VDB, VLOOKUP, WEEKDAY, WEIBULL, YEAR, ZTEST, FALSE, TRUE.
            </para>
            <para>
            For more information on formulas, consult Microsoft Excel documentation.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges. At the end, code shows how to calculate worksheet formulas.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Formula" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Formula" />
    </example>
            <seealso cref="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
            NamedRangeCollection.Add</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Sort(System.Boolean)">
            <summary>
            <para>Gets the <see cref="T:GemBox.Spreadsheet.SortState" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Sort" />) if active <see cref="P:GemBox.Spreadsheet.SortState.Range" /> is equal to this <see cref="T:GemBox.Spreadsheet.CellRange" /> and parameter <paramref name="active" /> is <see langword="true" />; otherwise, a new <see cref="T:GemBox.Spreadsheet.SortState" /> instance, which is set as active on the parent worksheet if parameter <paramref name="active" /> is <see langword="true" />.</para>
            <para><see cref="T:GemBox.Spreadsheet.SortState" /> is used to store sort settings and to apply sort on this range of cells.</para>
            </summary>
            <param name="active">if set to <see langword="true" />, gets or sets the <see cref="T:GemBox.Spreadsheet.SortState" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Sort" />).</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.SortState" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Sort" />) if active <see cref="P:GemBox.Spreadsheet.SortState.Range" /> is equal to this <see cref="T:GemBox.Spreadsheet.CellRange" /> and parameter <paramref name="active" /> is <see langword="true" />; otherwise, a new <see cref="T:GemBox.Spreadsheet.SortState" /> instance, which is set as active on the parent worksheet if parameter <paramref name="active" /> is <see langword="true" />.</returns>
            <remarks>
            Use this method (with parameter <paramref name="active" /> set to <see langword="false" />) to create multiple independent <see cref="T:GemBox.Spreadsheet.SortState" />s for the same <see cref="T:GemBox.Spreadsheet.CellRange" /> instance, even if it has an active <see cref="T:GemBox.Spreadsheet.SortState" /> (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Sort" />), which can then be stored and used later on.
            </remarks>
            <example>
      <para>
        Following methods shows various ways to specify and apply a <see cref="T:GemBox.Spreadsheet.SortState" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Sort" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Sort" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-sort/113">Excel Sorting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Filter">
            <summary>
            <para>Gets the <see cref="T:GemBox.Spreadsheet.AutoFilter" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Filter" />) if active <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> is equal to this <see cref="T:GemBox.Spreadsheet.CellRange" />; otherwise, a new <see cref="T:GemBox.Spreadsheet.AutoFilter" /> instance, which is set as active on the parent worksheet.</para>
            <para><see cref="T:GemBox.Spreadsheet.AutoFilter" /> is used to store filter settings and to apply filter on this range of cells.</para>
            </summary>
            <returns>The <see cref="T:GemBox.Spreadsheet.AutoFilter" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Filter" />) if active <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> is equal to this <see cref="T:GemBox.Spreadsheet.CellRange" />; otherwise, a new <see cref="T:GemBox.Spreadsheet.AutoFilter" /> instance, which is set as active on the parent worksheet.</returns>
            <remarks>
            This method has the same affect as <see cref="M:GemBox.Spreadsheet.CellRange.Filter(System.Boolean)" /> with parameter set to <see langword="true" />.
            </remarks>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Filter(System.Boolean)">
            <summary>
            <para>Gets the <see cref="T:GemBox.Spreadsheet.AutoFilter" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Filter" />) if active <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> is equal to this <see cref="T:GemBox.Spreadsheet.CellRange" /> and parameter <paramref name="active" /> is <see langword="true" />; otherwise, a new <see cref="T:GemBox.Spreadsheet.AutoFilter" /> instance, which is set as active on the parent worksheet if parameter <paramref name="active" /> is <see langword="true" />.</para>
            <para><see cref="T:GemBox.Spreadsheet.AutoFilter" /> is used to store filter settings and to apply filter on this range of cells.</para>
            </summary>
            <param name="active">if set to <see langword="true" />, gets or sets the <see cref="T:GemBox.Spreadsheet.AutoFilter" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Filter" />).</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.AutoFilter" /> active on the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Filter" />) if active <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> is equal to this <see cref="T:GemBox.Spreadsheet.CellRange" /> and parameter <paramref name="active" /> is <see langword="true" />; otherwise, a new <see cref="T:GemBox.Spreadsheet.AutoFilter" /> instance, which is set as active on the parent worksheet if parameter <paramref name="active" /> is <see langword="true" />.</returns>
            <remarks>
            Use this method (with parameter <paramref name="active" /> set to <see langword="false" />) to create multiple independent <see cref="T:GemBox.Spreadsheet.AutoFilter" />s for the same <see cref="T:GemBox.Spreadsheet.CellRange" /> instance, even if it has an active <see cref="T:GemBox.Spreadsheet.AutoFilter" /> (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Filter" />), which can then be stored and used later on.
            </remarks>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).</returns>
            <remarks>
            Returns default enumerator that iterates all cells in the range. If you are only reading existing
            cells (values or formatting), use more appropriate <see cref="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator"/>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).</returns>
            <remarks>
            Returns default enumerator that iterates all cells in the range. If you are only reading existing
            cells (values or formatting), use more appropriate <see cref="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator"/>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator">
            <summary>
            Returns enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (only allocated cells).
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (only allocated cells).</returns>
            <remarks>
            Returns enumerator that iterates only already allocated cells in the range. If you are only reading existing
            cells (values or formatting), use this enumerator as it is faster and doesn't allocate unnecessary cells.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.IndexingMode">
            <summary>
            Gets indexing mode used for cell range.
            </summary>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.Height" /> is 1, indexing mode 
            is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal" />.</para>
            <para>Otherwise, if <see cref="P:GemBox.Spreadsheet.CellRange.Width" /> is 1, indexing mode 
            is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical" />.</para>
            <para>Otherwise, indexing mode is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">
            Rectangular</see>.</para>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellRange" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellRange" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new cell range using absolute indexing.
            </summary>
            <param name="firstAbsoluteRow">Absolute index of the first row.</param>
            <param name="firstAbsoluteColumn">Absolute index of the first column.</param>
            <param name="lastAbsoluteRow">Absolute index of the last row.</param>
            <param name="lastAbsoluteColumn">Absolute index of the last column.</param>
            <returns>New cell range using absolute indexing.</returns>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.LastRowIndex"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new cell range using relative indexing.
            </summary>
            <param name="relativeRow">Relative index of the first row.</param>
            <param name="relativeColumn">Relative index of the first column.</param>
            <param name="width">Width of new cell range in columns.</param>
            <param name="height">Height of new cell range in rows.</param>
            <returns>New cell range using relative indexing.</returns>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Width"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Height"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)">
            <summary>
            Returns new cell range using start and end position.
            </summary>
            <param name="firstCell">Name of first (top-left) cell.</param>
            <param name="lastCell">Name of last (bottom-right) cell.</param>
            <returns>New cell range using start and end position.</returns>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellRange" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellRange" />
    </example>
            <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.StartPosition" />
            <seealso cref="P:GemBox.Spreadsheet.CellRange.EndPosition" />
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)" />
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)" />
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String)" />
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String)">
            <summary>
            Returns new cell range using A1 style notation.
            </summary>
            <param name="reference">The cell range reference in A1 style notation.</param>
            <returns>New cell range using A1 style notation.</returns>
            <remarks>
            New cell range must be within this cell range.
            Multiple area selection is not supported (e.g. "A1:B2,C3:D4,E5:F6").
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.StartPosition"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.EndPosition"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(System.Int32,System.Int32)">
            <overloads>Copies this cell range to the specified position.</overloads>
            <summary>
            Copies this cell range to another position in the same worksheet.
            </summary>
            <param name="absoluteRow">Absolute index of the destination row.</param>
            <param name="absoluteColumn">Absolute index of the destination column.</param>
            <remarks>
            <para><paramref name="absoluteRow"/> and <paramref name="absoluteColumn"/> specify position of the top-left cell of 
            the destination cell range.</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(GemBox.Spreadsheet.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Copies this cell range to another worksheet.
            </summary>
            <param name="destinationWorksheet">Destination worksheet.</param>
            <param name="absoluteRow">Absolute index of the destination row.</param>
            <param name="absoluteColumn">Absolute index of the destination column.</param>
            <remarks>
            <para><paramref name="absoluteRow"/> and <paramref name="absoluteColumn"/> specify position of the top-left cell of 
            the destination cell range.</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Destination worksheet is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(System.String)">
            <summary>
            Copies this cell range to another position in the same worksheet or in another worksheet.
            </summary>
            <param name="topLeftCell">Full name of the top-left cell of the destination range (e.g. "D4", "Sheet2!D5", etc.).</param>
            <remarks>
            <para><paramref name="topLeftCell"/> specifies position of the top-left cell of 
            the destination cell range (e.g. "D4, "Sheet2!D5", etc.).</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentException">Top-left cell is incorrectly specified.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(GemBox.Spreadsheet.ExcelWorksheet,System.String)">
            <summary>
            Copies this cell range to another worksheet.
            </summary>
            <param name="destinationWorksheet">Destination worksheet.</param>
            <param name="topLeftCell">Full name of the top-left cell of the destination range.</param>
            <remarks>
            <para><paramref name="topLeftCell"/> specifies position of the top-left cell of 
            the destination cell range.</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Overlaps(GemBox.Spreadsheet.CellRange)">
            <summary>
            Checks if this cell range overlaps with another cell range.
            </summary>
            <param name="range">Cell range.</param>
            <returns><see langword="true"/> if cell ranges overlap; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="range"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.FindText(System.String,System.Int32@,System.Int32@)">
            <summary>
            Finds the first occurrence of the specified text in the current cell range.
            </summary>
            <param name="text">Test to search.</param>
            <param name="row">Index of the row where the text was found or -1 if no text was found.</param>
            <param name="column">Index of the column where the text was found or -1 if no text was found.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.FindText(System.String,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Finds the first occurrence of the specified text in the current cell range.
            </summary>
            <param name="text">Test to search.</param>
            <param name="matchCase"><see langword="true"/> to match exact case, <see langword="false"/> otherwise.</param>
            <param name="row">Index of the row where the text was found or -1 if no text was found.</param>
            <param name="column">Index of the column where the text was found or -1 if no text was found.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.FindText(System.String,System.Boolean,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Finds the first occurrence of the specified text in the current cell range.
            </summary>
            <param name="text">Test to search.</param>
            <param name="matchCase"><see langword="true"/> to match exact case, <see langword="false"/> otherwise.</param>
            <param name="matchEntireCellContents"><see langword="true"/> to match entire cell contents, <see langword="false"/> otherwise.</param>
            <param name="row">Index of the row where the text was found or -1 if no text was found.</param>
            <param name="column">Index of the column where the text was found or -1 if no text was found.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.FindText(System.Text.RegularExpressions.Regex,System.Int32@,System.Int32@)">
            <summary>
            Finds the first occurrence which matches the specified <see cref="T:System.Text.RegularExpressions.Regex"/> in the current cell range.
            </summary>
            <param name="regex">The <see cref="T:System.Text.RegularExpressions.Regex"/> which should be matched.</param>
            <param name="row">Index of the row where the text was found or -1 if no text was found.</param>
            <param name="column">Index of the column where the text was found or -1 if no text was found.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="regex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Insert(GemBox.Spreadsheet.InsertShiftDirection)">
            <summary>
            Inserts a range by shifting cells in the specified direction.
            </summary>
            <param name="direction">The shift direction.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Remove(GemBox.Spreadsheet.RemoveShiftDirection)">
            <summary>
            Removes a range by shifting cells in the specified direction.
            </summary>
            <param name="direction">The shift direction.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Calculate">
            <summary>
            Calculates formula for every excel cell in this range.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.ClearFormat">
            <summary>
            Clears the range format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.PositionToRowColumn(System.String,System.Int32@,System.Int32@)">
            <summary>
            Converts position string ("A1", "BN27", etc.) to row and column index.
            </summary>
            <param name="position">Position string.</param>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.RowColumnToPosition(System.Int32,System.Int32)">
            <summary>
            Converts row and column index to position string ("A1", "BN27", etc.).
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Position string.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.CellRange"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.CellRange"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.CellRange"/> and is equal to this <see cref="T:GemBox.Spreadsheet.CellRange"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.CellRange"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.CellRange"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.op_Equality(GemBox.Spreadsheet.CellRange,GemBox.Spreadsheet.CellRange)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.CellRange"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.CellRange"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.CellRange"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.CellRange"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.op_Inequality(GemBox.Spreadsheet.CellRange,GemBox.Spreadsheet.CellRange)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.CellRange"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.CellRange"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.CellRange"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.CellRange"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Sort(GemBox.Spreadsheet.SortDescription[])">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Boolean)"/>, <see cref="O:GemBox.Spreadsheet.SortState.By"/> and <see cref="M:GemBox.Spreadsheet.SortState.Apply"/> methods instead.</para>
            <para>Sorts the rows of this <see cref="T:GemBox.Spreadsheet.CellRange"/> by comparing values of <see cref="T:GemBox.Spreadsheet.ExcelCell"/>s in columns specified by <paramref name="sortDescriptions"/>.</para>
            </summary>
            <param name="sortDescriptions">The sort descriptions that specify columns by which to sort.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Boolean)"/>, <see cref="O:GemBox.Spreadsheet.SortState.By"/> and <see cref="M:GemBox.Spreadsheet.SortState.Apply"/> methods instead.</para>
            <para>Sorts the rows of this <see cref="T:GemBox.Spreadsheet.CellRange"/> by comparing values of <see cref="T:GemBox.Spreadsheet.ExcelCell"/>s in columns specified by <paramref name="sortDescriptions"/>.</para>
            </summary>
            <param name="sortDescriptions">The sort descriptions that specify columns by which to sort.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.CellRangeCollection">
            <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.CellRange"/> items.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeCollection.Add(GemBox.Spreadsheet.ExcelWorksheet,System.String)">
            <summary>
            Adds the <see cref="T:GemBox.Spreadsheet.CellRange"/> from the specified worksheet to the collection.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="cellReference">The cell reference for which to create <see cref="T:GemBox.Spreadsheet.CellRange"/>.</param>
            <returns>An instance of the <see cref="T:GemBox.Spreadsheet.CellRange"/> that was added to the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeCollection.InsertItem(System.Int32,GemBox.Spreadsheet.CellRange)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeCollection.SetItem(System.Int32,GemBox.Spreadsheet.CellRange)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.CellRangeEnumerator">
            <summary>
            Enumerator used for iterating cells in a <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.Dispose">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.Parent">
            <summary>
            Parent <see cref="T:GemBox.Spreadsheet.CellRange"/>. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentRow">
            <summary>
            Current absolute row index in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentColumn">
            <summary>
            Current absolute column index in the cell range.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is one column before 
            the first cell in the cell range.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the cell range.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if 
            the enumerator has passed the end of the cell range.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.Current">
            <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell"/> in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell"/> in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentCell">
            <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell"/> in the cell range.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CellStyle">
            <summary>
            Represents cell formatting.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.AbstractRange.Style" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" />
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class not associated with any workbook.
            </summary>
            <remarks>
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </remarks><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyle.#ctor(GemBox.Spreadsheet.ExcelFile)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class which references default (<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" /></b>) style from the specified workbook.
            </summary>
            <param name="workbook">The workbook from which default (<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" /></b>) style this <see cref="T:GemBox.Spreadsheet.CellStyle" /> inherits formatting.</param>
            <remarks>
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </remarks><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.NumberFormat">
            <summary>
            <para>Gets or sets the number format which indicates how to format and render the numeric value of a cell.</para>
            <para>Default value is <b>General</b>.</para>
            <para>If set to <see langword="null" />, number format will be resolved from referenced workbook style.</para>
            </summary>
            <value>
            The number format which indicates how to format and render the numeric value of a cell.
            </value>
            <remarks>
      <para>
        If the value of this property is <b>General</b> or <see cref="F:System.String.Empty" /> and <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> is of <see cref="T:System.DateTime" /> type, ISO date/time format will be used as number format.
      </para>
      <para>Custom number format has to be in invariant culture format.</para>
      <para>Example:</para>
      <table border="1" cellpadding="5" cellspacing="0">
        <tr>
          <th>Format string</th>
          <th>Value</th>
          <th>Output</th>
        </tr>
        <tr>
          <td>#####</td>
          <td>123</td>
          <td>123</td>
        </tr>
        <tr>
          <td>00000</td>
          <td>123</td>
          <td>00123</td>
        </tr>
        <tr>
          <td>#,#</td>
          <td>1234567890</td>
          <td>1,234,567,890</td>
        </tr>
        <tr>
          <td>00.00</td>
          <td>1.2</td>
          <td>01.20</td>
        </tr>
        <tr>
          <td>#,##0.00</td>
          <td>1234567890</td>
          <td>1,234,567,890.00</td>
        </tr>
        <tr>
          <td>#0.##%</td>
          <td>0.092</td>
          <td>9.2%</td>
        </tr>
      </table>
      <para>
        For more information on number format strings consult <see href="https://support.office.com/en-us/article/Create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4">Microsoft Excel documentation</see>.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates number formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Number" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Number" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.NumberFormatLocal">
            <summary>
            Gets a <see cref="T:System.String"/> that represents the format code for the numeric value in the language of the user.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the format code for the numeric value in the language of the user.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment">
            <summary>
            <para>Gets or sets the horizontal alignment.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General" />.</para>
            </summary>
            <value>
            The horizontal alignment.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Indent" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.WrapText" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment">
            <summary>
            <para>Gets or sets the vertical alignment.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom" />.</para>
            </summary>
            <value>
            The vertical alignment.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Indent" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.WrapText" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Indent">
            <summary>
            <para>Gets or sets the number of spaces (of the <b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" /></b> style font) of indentation for text in a cell.</para>
            <para>The number of spaces to indent is calculated as following: Number of spaces to indent = <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" /> * 3.</para>
            <para>Default value is 0.</para>
            </summary>
            <value>
            The number of spaces (of the <b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" /></b> style font) of indentation for text in a cell.
            </value>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is <see langword="true" />, <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" /> should be set to <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Left" />, <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Right" /> or <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Distributed" />.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is <see langword="false" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" /> should be set to <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom" />, <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Top" /> or <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Distributed" />.</para>
            <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
            </remarks>
            <example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be greater than or equal to 0.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.WrapText" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Rotation">
            <summary>
            <para>Gets or sets the text rotation in degrees (1/360th of a full circle).</para>
            <para>Value must be between -90 and 90 and specifies counterclockwise rotation of the text from the normal position. The first letter of the text is considered the center-point of the arc.</para>
            <para>Default value is 0.</para>
            <para>This member is currently not supported in PDF, XPS and image file formats.</para>
            </summary>
            <value>
            The text rotation in degrees.
            </value>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> are mutually exclusive.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> is set, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is set to <see langword="false" />.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is set, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> is set to 0.</para>
            <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
            </remarks>
            <example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be between -90 and 90.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Indent" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.WrapText" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.IsTextVertical">
            <summary>
            <para>Gets or sets a value indicating whether text orientation is vertical.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> if text orientation is vertical; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> are mutually exclusive.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is set, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> is set to 0.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> is set, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is set to <see langword="false" />.</para>
            <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
            </remarks>
            <example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Indent" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.WrapText" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.WrapText">
            <summary>
            <para>Gets or sets a value indicating whether the text in a cell should be line-wrapped within the cell.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> if the text in a cell should be line-wrapped within the cell; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Indent" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit">
            <summary>
            <para>Gets or sets a value indicating whether the displayed text in the cell should be shrunk to fit the cell width. Not applicable when a cell contains multiple lines of text.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> if the displayed text in the cell should be shrunk to fit the cell width; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Indent" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.WrapText" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Font">
            <summary>
            <para>Gets or sets the font.</para>
            <para>If set to <see langword="null" />, font will be resolved from referenced workbook style.</para>
            </summary>
            <value>
            The font.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Borders">
            <summary>
            <para>Gets or sets the borders.</para>
            <para>If set to <see langword="null" />, borders will be resolved from referenced workbook style.</para>
            </summary>
            <value>
            The borders.
            </value>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.FillPattern">
            <summary>
            <para>Gets or sets the fill (cell background).</para>
            <para>If set to <see langword="null" />, fill will be resolved from referenced workbook style.</para>
            <para>Fill can be either pattern or gradient.</para>
            <para>Gradient fill is currently supported in XLSX and partially in rendering formats (PDF, XPS and image formats).</para>
            </summary>
            <value>
            The fill (cell background).
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Locked">
            <summary>
            <para>Gets or sets a value indicating whether the cell is locked.</para>
            <para>Default value is <see langword="true" />.</para>
            </summary>
            <value>
            <see langword="true" /> if the cell is locked; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>When cells are marked as "locked" and the workbook is <see cref="P:GemBox.Spreadsheet.ExcelFile.Protected" /> or the sheet is <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected" />, 
            then the options specified in the <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.ProtectionSettings" /> are prohibited for these cells.</para>
            <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
            </remarks>
            <example>
      <para>Following code demonstrates protection formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Protection" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Protection" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.ProtectionSettings" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.FormulaHidden">
            <summary>
            <para>Gets or sets a value indicating whether the contents of the cell will not be displayed in the formula bar.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> if the contents of the cell will not be displayed in the formula bar; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>When the cell is hidden and the workbook is <see cref="P:GemBox.Spreadsheet.ExcelFile.Protected" /> or the sheet on which the cell resides is <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected" />, 
            then the cell value will be displayed in the cell grid location, but the contents of the cell will not be displayed in the formula bar.
            This is true for all types of cell content, including formula, text, or numbers.</para>
            <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
            </remarks>
            <example>
      <para>Following code demonstrates protection formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Protection" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Protection" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Locked" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Name">
            <summary>
            <para>If <see cref="T:GemBox.Spreadsheet.CellStyle" /> is workbook <see cref="T:GemBox.Spreadsheet.Style" />, gets or sets the name of the style; otherwise, gets the name of the referenced workbook <see cref="T:GemBox.Spreadsheet.Style" /> from which this <see cref="T:GemBox.Spreadsheet.CellStyle" /> inherits formatting.</para>
            <para>Default value is <b>Normal</b>.</para>
            </summary>
            <value>
            If <see cref="T:GemBox.Spreadsheet.CellStyle" /> is workbook <see cref="T:GemBox.Spreadsheet.Style" />, the name of the style; otherwise, the name of the referenced workbook <see cref="T:GemBox.Spreadsheet.Style" /> from which this <see cref="T:GemBox.Spreadsheet.CellStyle" /> inherits formatting.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.QuotePrefix">
            <summary>
            <para>Gets or sets a value indicating whether the text string in a cell should be prefixed by a single quote mark (e.g., 'text). Use it to store numeric value of a cell as text.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> if the text string in a cell should be prefixed by a single quote mark (e.g., 'text); otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.IsDefault">
            <summary>
            Gets a value indicating whether the referenced workbook style is default (<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" /></b>) and there are no additional modifications of cell formatting.
            </summary>
            <value>
            <see langword="true" /> if the referenced workbook style is default (<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" /></b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CellStyle"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CellStyle"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.CellStyleCollection">
            <summary>
            Represents a collection of workbook (master) <see cref="T:GemBox.Spreadsheet.Style" />s.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Styles" />
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyleCollection.Normal">
            <summary>
            Gets the '<b>Normal</b>' style.
            </summary>
            <value>
            The '<b>Normal</b>' style.
            </value>
            <remarks>
            <para>The '<b>Normal</b>' style always exists in a workbook and it cannot be removed.</para>
            <para>The '<b>Normal</b>' style stores default cell formatting properties for an entire workbook, because all cells will reference the '<b>Normal</b>' style by default.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyleCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.Style"/>s contained in the collection. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyleCollection.Item(System.String)">
            <summary>
            <para>Gets the <see cref="T:GemBox.Spreadsheet.Style"/> that corresponds to given name.</para>
            <para>If <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/> doesn't contain correspondent style, then new style will be added and returned.</para>
            </summary>
            <param name="styleName">The name of the <see cref="T:GemBox.Spreadsheet.Style"/>.</param>
            <returns><see cref="T:GemBox.Spreadsheet.Style"/> that corresponds to given name.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyleCollection.Item(GemBox.Spreadsheet.BuiltInCellStyleName)">
            <summary>
            <para>Gets the <see cref="T:GemBox.Spreadsheet.Style"/> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName"/>.</para>
            <para>If <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/> doesn't contain correspondent style, then new style will be added and returned.</para>
            </summary>
            <param name="styleName">The <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName"/> of the <see cref="T:GemBox.Spreadsheet.Style"/>.</param>
            <returns><see cref="T:GemBox.Spreadsheet.Style"/> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.Add(System.String)">
            <summary>
            Adds an empty <see cref="T:GemBox.Spreadsheet.Style" /> instance to the <see cref="T:GemBox.Spreadsheet.CellStyleCollection" />.
            </summary>
            <param name="name">The name of new <see cref="T:GemBox.Spreadsheet.Style" /> instance.</param>
            <returns>
            New <see cref="T:GemBox.Spreadsheet.Style" /> instance that is added to this collection.
            </returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="name"/> cannot be null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Style with name <paramref name="name"/> is already contained in the workbook.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.Remove(System.String)">
            <summary>
            Removes style with the specified name from the workbook.
            </summary>
            <param name="name">The name of the style which should be removed from the workbook.</param>
            <returns><see langword="true"/> if style is successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if style was not found in the workbook.</returns>
            <exception cref="T:System.InvalidOperationException">'<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal"/></b>' style cannot be removed from the workbook.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.Remove(GemBox.Spreadsheet.BuiltInCellStyleName)">
            <summary>
            Removes built-in style with the specified name from the workbook.
            </summary>
            <param name="name">The name of the built-in style which should be removed from the workbook.</param>
            <returns><see langword="true"/> if style is successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if style was not found in the workbook.</returns>
            <exception cref="T:System.InvalidOperationException">'<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal"/></b>' style cannot be removed from the workbook.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.Remove(GemBox.Spreadsheet.Style)">
            <summary>
            Removes the specified style from the workbook.
            </summary>
            <param name="style">The style to remove from the workbook.</param>
            <returns><see langword="true"/> if <paramref name="style"/> is successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <paramref name="style"/> was not found in the workbook.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/> contains a <see cref="T:GemBox.Spreadsheet.Style"/> instance with specific name.
            </summary>
            <param name="styleName">Name of the <see cref="T:GemBox.Spreadsheet.Style"/> to locate in the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>.</param>
            <returns>
            <see langword="true"/> if <see cref="T:GemBox.Spreadsheet.Style"/> instance with specific name is found in the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;Style&gt;</see> that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.CellValueType">
            <summary>
            Represents the possible cell value types.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CellValueType.Null">
            <summary>
            Blank cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CellValueType.Bool">
            <summary>
             Cell value is boolean.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CellValueType.Int">
            <summary>
            Cell value is integer.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CellValueType.Double">
            <summary>
            Cell value is double.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CellValueType.DateTime">
            <summary>
            Cell value is date-time.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CellValueType.String">
            <summary>
            Cell value is string.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CellValueType.Object">
            <summary>
            A general type representing any reference or value type 
            not explicitly represented by another CellValueType.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.AreaChart">
            <summary>
            Represents a chart whose series values are drawn using filled areas.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AreaChart.SeriesCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AreaChart.ChartType">
            <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.AreaChart"/> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Area"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Area"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AreaChart.Grouping">
            <summary>
            Gets or sets the chart grouping.
            </summary>
            <value>
            The chart grouping.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AreaChart.Axes">
            <summary>
            Gets the chart axes.
            </summary>
            <value>
            The chart axes.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AreaChart.DefaultEmptyCellDisplayMode">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AreaChart.SupportedDataLabelPositions">
            <exclude />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AreaChart.DefaultDataLabelPosition">
            <exclude />
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.AxisGridlines">
            <summary>
            Represents an axis major or minor gridlines.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.AxisGridlines.IsVisible">
            <summary>
            Gets or sets a value indicating whether gridlines are visible.
            </summary>
            <value>
            <see langword="true" /> if gridlines are visible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.AxisGridlines.Delete">
            <summary>
            Deletes gridlines.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.AxisGridlines.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.AxisGridlines"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.AxisGridlines"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.AxisLabelsPosition">
            <summary>
            Represents the possible positions for axis labels.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.None">
            <summary>
            Axis labels are not drawn.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.NextToAxis">
            <summary>
            Axis labels are next to the axis.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.Low">
            <summary>
            Axis labels are at the low end of the perpendicular axis.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.High">
            <summary>
            <para>Axis labels are at the high end of the perpendicular axis.</para>
            <para>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.NextToAxis"/>.</para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.AxisPosition">
            <summary>
            Represents the possible positions for an axis.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisPosition.BottomOrLeft">
            <summary>
            Axis is displayed at the bottom of the plot area if it is horizontal or at the left of the plot area if it is vertical.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisPosition.TopOrRight">
            <summary>
            Axis is displayed at the top of the plot area if it is horizontal or at the right of the plot area if it is vertical.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.AxisType">
            <summary>
            Represents an axis type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisType.Category">
            <summary>
            Axis type used for categories.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisType.Date">
            <summary>
            <para>Axis type used for categories which are dates / times.</para>
            <para>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Category"/>.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.AxisType.Value">
            <summary>
            Axis type used for series values.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.BarChart">
            <summary>
            Represents a chart whose series values are drawn using horizontal rectangles.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.BarChart.SeriesCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.BarChart.ChartType">
            <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.BarChart"/> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Bar"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Bar"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.BarChart.Grouping">
            <summary>
            Gets or sets the chart grouping.
            </summary>
            <value>
            The chart grouping.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.BarChart.Axes">
            <summary>
            Gets the chart axes.
            </summary>
            <value>
            The chart axes.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.BarChart.DefaultEmptyCellDisplayMode">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.BarChart.SupportedDataLabelPositions">
            <exclude />
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.CategoryAxis">
            <summary>
            Represents an axis used for categories.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.CategoryAxis.AxisType">
            <summary>
            Gets the axis type for <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis"/> which is <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Category"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Category"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.CategoryAxis.LabelsInterval">
            <summary>
            Gets or sets the interval between labels that are drawn.
            </summary>
            <value>
            The interval between labels that are drawn.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be between 1 and 255.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.CategoryAxis.TickMarksInterval">
            <summary>
            Gets or sets the interval between tick marks that are drawn.
            </summary>
            <value>
            The interval between tick marks that are drawn.
            </value>
            <remarks>
            Default value of this property is 1.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be between 1 and 31999.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.CategoryAxis.AxisPositionOnTickMarks">
            <summary>
            Gets or sets a value indicating whether the value axis shall cross the category axis at the midpoint of a category or between data markers.
            </summary>
            <value>
            <see langword="true"/> if the value axis shall cross the category axis at the midpoint of a category; otherwise, <see langword="false"/> if the value axis shall cross the category axis between data markers.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.CategoryAxis.NumberFormatFromLinkedSource">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.CategoryAxis.Import(GemBox.Spreadsheet.Charts.ChartAxis)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartAxes">
            <summary>
            Represents chart axes.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.IsVisible">
            <summary>
            Gets or sets a value indicating whether any axis is visible.
            </summary>
            <value>
            <see langword="true" /> if any axis is visible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.Horizontal">
            <summary>
            Gets the horizontal chart axis.
            </summary>
            <value>
            The horizontal chart axis.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.Vertical">
            <summary>
            Gets the vertical chart axis.
            </summary>
            <value>
            The vertical chart axis.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.HorizontalCategory">
            <summary>
            Gets the horizontal chart axis as category axis, if horizontal chart axis is category axis; otherwise <see langword="null"/>.
            </summary>
            <value>
            The horizontal chart axis as category axis, if horizontal chart axis is category axis; otherwise <see langword="null"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.HorizontalDate">
            <summary>
            Gets the horizontal chart axis as date axis, if horizontal chart axis is date axis; otherwise <see langword="null"/>.
            </summary>
            <value>
            The horizontal chart axis as date axis, if horizontal chart axis is date axis; otherwise <see langword="null"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.HorizontalValue">
            <summary>
            Gets the horizontal chart axis as value axis, if horizontal chart axis is value axis; otherwise <see langword="null"/>.
            </summary>
            <value>
            The horizontal chart axis as value axis, if horizontal chart axis is value axis; otherwise <see langword="null"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.VerticalCategory">
            <summary>
            Gets the vertical chart axis as category axis, if vertical chart axis is category axis; otherwise <see langword="null"/>.
            </summary>
            <value>
            The vertical chart axis as category axis, if vertical chart axis is category axis; otherwise <see langword="null"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.VerticalDate">
            <summary>
            Gets the vertical chart axis as date axis, if vertical chart axis is date axis; otherwise <see langword="null"/>.
            </summary>
            <value>
            The vertical chart axis as date axis, if vertical chart axis is date axis; otherwise <see langword="null"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.VerticalValue">
            <summary>
            Gets the vertical chart axis as value axis, if vertical chart axis is value axis; otherwise <see langword="null"/>.
            </summary>
            <value>
            The vertical chart axis as value axis, if vertical chart axis is value axis; otherwise <see langword="null"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartAxes.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxes"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxes"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartAxes.Delete">
            <summary>
            Deletes axes.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartAxis">
            <summary>
            Represents a base class for all chart axis types.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.IsVisible">
            <summary>
            Gets or sets a value indicating whether axis is visible.
            </summary>
            <value>
            <see langword="true" /> if axis is visible; otherwise, <see langword="false" />.
            </value>
            <remarks>
            Default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.Position">
            <summary>
            Gets or sets the axis position.
            </summary>
            <value>
            The axis position.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource">
            <summary>
            Gets or sets a value indicating whether number format from chart's source data (cells) will be used to format axis value labels.
            </summary>
            <value>
            <see langword="true" /> if number format from chart's source data (cells) will be used to format axis value labels; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>
      If <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> is <see langword="true" />, then number format from chart's source data (cells) will be used to format axis value labels based on the following logic:
    </para><list type="bullet">
      <item>
        <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis" /> or <see cref="T:GemBox.Spreadsheet.Charts.DateAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference" /> will be used.
        </description>
      </item>
      <item>
        <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.ValueAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.ValuesReference" /> of the chart's first series will be used.
        </description>
      </item>
    </list><para>
      Otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormat" /> is specified, then it will be used to format axis value labels.
    </para><para>
      Otherwise, if number format cannot be retrieved by any previously described means, then "General" number format will be used to format axis value labels.
    </para>
            <para>Default value of this property is <see langword="true" />.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatFromLinkedSource">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MajorTickMarkType">
            <summary>
            Gets or sets the major tick marks position.
            </summary>
            <value>
            The major tick marks position.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MinorTickMarkType">
            <summary>
            Gets or sets the minor tick marks position.
            </summary>
            <value>
            The minor tick marks position.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.LabelsPosition">
            <summary>
            Gets or sets the axis labels position.
            </summary>
            <value>
            The axis labels position.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType">
            <summary>
            Gets the <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType"/> of this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis"/> instance.
            </summary>
            <value>
            The <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType"/> of this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis"/> instance.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.ReverseOrder">
            <summary>
            <para>Gets or sets a value indicating whether values on the axis shall be reversed so they go from maximum to minimum.</para>
            <para>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is always exported as <see langword="false"/>.</para>
            </summary>
            <value>
            <see langword="true" /> if values on the axis shall be reversed so they go from maximum to minimum; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>Setting the value also changes position of the axis perpendicular to this one. 
            If value is <see langword="true"/>, axis perpendicular to this one will be positioned at the top (if horizontal) or at the right (if vertical) of the plot area; otherwise,
            if value is <see langword="false"/>, axis perpendicular to this one will be positioned at the bottom (if horizontal) or at the left (if vertical) of the plot area.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormat">
            <summary>
            Gets or sets the number format used for formatting axis value labels. 
            If <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> is <see langword="true" />, then number format from chart's source data (cells) will be used to format axis value labels as explained in remarks.
            Setting this property, sets <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> to <see langword="false" />.
            </summary>
            <value>
            The number format used for formatting axis value labels.
            </value>
            <remarks>
            <para>
      If <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> is <see langword="true" />, then number format from chart's source data (cells) will be used to format axis value labels based on the following logic:
    </para><list type="bullet">
      <item>
        <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis" /> or <see cref="T:GemBox.Spreadsheet.Charts.DateAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference" /> will be used.
        </description>
      </item>
      <item>
        <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.ValueAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.ValuesReference" /> of the chart's first series will be used.
        </description>
      </item>
    </list><para>
      Otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormat" /> is specified, then it will be used to format axis value labels.
    </para><para>
      Otherwise, if number format cannot be retrieved by any previously described means, then "General" number format will be used to format axis value labels.
    </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.Title">
            <summary>
            Gets the axis title.
            </summary>
            <value>
            The axis title.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MajorGridlines">
            <summary>
            Gets the major gridlines.
            </summary>
            <value>
            The major gridlines.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MinorGridlines">
            <summary>
            Gets the minor gridlines.
            </summary>
            <value>
            The minor gridlines.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.IsDefaultMajorGridlinesVisible">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.IsDefaultMinorGridlinesVisible">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.ChangeAxisType(GemBox.Spreadsheet.Charts.AxisType)">
            <summary>
            Changes the type of the axis.
            </summary>
            <param name="axisType">New type of the axis.</param>
            <returns><see cref="T:GemBox.Spreadsheet.Charts.ChartAxis"/> instance with <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType"/> equal to <paramref name="axisType"/>, if <paramref name="axisType"/> is not equal to <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType"/> of this instance; otherwise, this instance.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.ChangeAxisType``1">
            <summary>
            Changes the type of the axis.
            </summary>
            <typeparam name="TChartAxis">New type of the axis.</typeparam>
            <returns><see cref="T:GemBox.Spreadsheet.Charts.ChartAxis"/> instance of <typeparamref name="TChartAxis"/> type, if this instance is not of <typeparamref name="TChartAxis"/> type; otherwise, this instance.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.Import(GemBox.Spreadsheet.Charts.ChartAxis)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.Delete">
            <summary>
            Deletes axis.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartDataLabels">
            <summary>
            Represents the settings for the data labels for an entire series or the entire chart.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.LabelContainsSeriesName">
            <summary>
            Gets or sets a value indicating whether the series name should be shown in a data label.
            </summary>
            <value>
              <see langword="true" /> if the series name should be shown in a data label; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.LabelContainsCategoryName">
            <summary>
            Gets or sets a value indicating whether the category name should be shown in a data label.
            </summary>
            <value>
              <see langword="true" /> if the category name should be shown in a data label; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.LabelContainsValue">
            <summary>
            Gets or sets a value indicating whether the value should be shown in a data label.
            </summary>
            <value>
              <see langword="true" /> if the value should be shown in a data label; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.ShowLeaderLines">
            <summary>
            Gets or sets a value indicating whether leader lines should be shown for data labels.
            </summary>
            <value>
              <see langword="true" /> if leader lines should be shown for data labels; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.LabelContainsLegendKey">
            <summary>
            Gets or sets a value indicating whether the legend key should be shown in a data label.
            </summary>
            <value>
              <see langword="true" /> if the legend key should be shown in a data label; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.Separator">
            <summary>
            Gets or sets the text that should be used to separate the parts of a data label.
            </summary>
            <value>
            The text that should be used to separate the parts of a data label.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.LabelPosition">
            <summary>
            Gets or sets the position of the data label.
            </summary>
            <value>
            The position of the data label.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.NumberFormat">
            <summary>
            Gets or sets the number format used for formatting data labels.
            If <see cref="P:GemBox.Spreadsheet.Charts.ChartDataLabels.NumberFormatLinkedToSource" /> is <see langword="true" />, then number format from chart's source data (cells) will be used to format data labels.
            Setting this property, sets <see cref="P:GemBox.Spreadsheet.Charts.ChartDataLabels.NumberFormatLinkedToSource" /> to <see langword="false" />.
            </summary>
            <value>
            The number format used for formatting data labels.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartDataLabels.NumberFormatLinkedToSource">
            <summary>
            Gets or sets a value indicating whether number format from chart's source data (cells) will be used to format data labels.
            </summary>
            <value>
              <see langword="true" /> if number format from chart's source data (cells) will be used to format data labels; otherwise, <see langword="false" />.
            </value>
            <remarks>
            Default value of this property is <see langword="true" />.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartDataLabels.Show">
            <summary>
            Shows the value in the data label.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartDataLabels.Show(GemBox.Spreadsheet.Charts.DataLabelPosition)">
            <summary>
            <para>Shows the value in the data label at the specified position.</para>
            <para>
              <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart" /> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart" /> support <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Center" />, <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.InsideEnd" />, <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.InsideBase" /> and <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.OutsideEnd" /> data label positions.</para>
            <para>
              <see cref="T:GemBox.Spreadsheet.Charts.LineChart" /> supports <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Center" />, <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Left" />, <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Right" />, <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Top" /> and <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Bottom" /> data label positions.</para>
            <para>
              <see cref="T:GemBox.Spreadsheet.Charts.PieChart" /> supports <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Center" />, <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.InsideEnd" />, <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.OutsideEnd" /> and <see cref="F:GemBox.Spreadsheet.Charts.DataLabelPosition.BestFit" /> data label positions.</para>
            <para>
              <see cref="T:GemBox.Spreadsheet.Charts.AreaChart" /> supports none of the data label positions. Use <see cref="M:GemBox.Spreadsheet.Charts.ChartDataLabels.Show" /> overload for <see cref="T:GemBox.Spreadsheet.Charts.AreaChart" /> instead.</para>
            </summary>
            <param name="labelPosition">The position of the label.</param>
            <exception cref="T:System.NotSupportedException">The specified <paramref name="labelPosition" /> is not supported for this chart.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartDataLabels.Delete">
            <summary>
            Deletes data labels.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartDataLabels.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartDataLabels"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartDataLabels"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartGrouping">
            <summary>
            Represents the grouping of a chart series for each category in a chart.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.Standard">
            <summary>
            Chart series are drawn on the value axis. Not applicable for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart"/> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.Clustered">
            <summary>
            Chart series are drawn next to each other along the category axis. Applicable only for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart"/> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.Stacked">
            <summary>
            <para>Chart series are drawn next to each other on the value axis.</para>
            <para>Use it to compare the contribution of each value to a total across categories.</para>
            <para>
            This value is currently supported only by <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart"/> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart"/> when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.ChartGrouping.Standard"/> for all other chart types.
            </para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.PercentStacked">
            <summary>
            <para>Chart series are drawn next to each other along the value axis and scaled to total 100%.</para>
            <para>Use it to compare the percentage that each value contributes to a total across categories.</para>
            <para>
            This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.ChartGrouping.Stacked"/> for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart"/> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart"/> and as <see cref="F:GemBox.Spreadsheet.Charts.ChartGrouping.Standard"/> for all other chart types.
            </para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartLegend">
            <summary>
            Represents a chart legend.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartLegend.IsVisible">
            <summary>
            Gets or sets a value indicating whether legend is visible.
            </summary>
            <value>
            <see langword="true" /> if legend is visible; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>Default value of this property is <see langword="true"/>.</para>
            <para>If legend is not visible, its properties won't be saved when saving a workbook into XLSX format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartLegend.Position">
            <summary>
            Gets or sets the legend position.
            </summary>
            <value>
            The legend position.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartLegend.AllowOverlap">
            <summary>
            Gets or sets a value indicating whether legend overlaps chart's plot area or resizes it.
            </summary>
            <value>
            <see langword="true" /> if legend overlaps chart's plot area without resizing it; otherwise, <see langword="false" /> if legend doesn't overlap chart's plot area but resizes it instead.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartLegend.Delete">
            <summary>
            Deletes legend.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartLegend.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartLegend"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartLegend"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartLegendPosition">
            <summary>
            Specifies the possible positions for a legend.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Right">
            <summary>
            Specifies that the legend shall be drawn at the right of the chart.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Top">
            <summary>
            Specifies that the legend shall be drawn at the top of the chart.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Bottom">
            <summary>
            Specifies that the legend shall be drawn at the bottom of the chart.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Left">
            <summary>
            Specifies that the legend shall be drawn at the left of the chart.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.TopRight">
            <summary>
            Specifies that the legend shall be drawn at the top right of the chart.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartSeries">
            <summary>
            Represents a single chart series.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.Index">
            <summary>
            Gets the index of this <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/> instance in the parent <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection"/>.
            </summary>
            <value>
            The index of this <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/> instance in the parent <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.Name">
            <summary>
            Gets or sets the series name as direct value (for example, 'My series') or as a reference to a cell with value (for example, '=Sheet1!A1').
            </summary>
            <value>
            The series name.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.IsLegendEntryVisible">
            <summary>
            Gets or sets a value indicating whether legend entry for this series instance is visible.
            </summary>
            <value>
            <see langword="true" /> if legend entry for this series instance is visible; otherwise, <see langword="false" />.
            </value>
            <remarks>
            Default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.DisplayName">
            <summary>
            Gets the series display name. If <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Name"/> is direct value, then <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Name"/> value is returned; otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Name"/> is a cell reference, then referenced cell value is returned. 
            </summary>
            <value>
            The series display name.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.DataLabels">
            <summary>
            Gets the settings for the data labels for an entire series.
            </summary>
            <value>
            The settings for the data labels for an entire series.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.ValuesReference">
            <summary>
            Gets or sets the chart series values as a cell range reference (for example, 'Sheet1!A1:D1'). Values from cells in the referenced range will be used as values of this series.
            </summary>
            <value>
            The chart series values as a cell range reference.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.Values">
            <summary>
            Gets the chart series values.
            </summary>
            <value>
            The chart series values.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.SetValues(System.Collections.IEnumerable)">
            <summary>
            Sets the chart series values.
            </summary>
            <param name="values">The chart series values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.SetValues(System.Object[])">
            <summary>
            Sets the chart series values.
            </summary>
            <param name="values">The chart series values.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.Delete">
            <summary>
            Deletes the series.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.ToString">
            <summary>
            Returns the <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.DisplayName"/> value.
            </summary>
            <returns>
            The <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.DisplayName"/> value.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/> objects.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.CountCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Count">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.GetItemCore(System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection"/>. 
            </summary>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection"/> from which to get the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/>.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.CreateCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.AddCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add">
            <summary>
            Adds a new empty series to the chart.
            </summary>
            <returns>A new empty series added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.AddCore(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add(System.String,System.String)">
            <summary>
            Adds a new series with specified name and values reference to the chart.
            </summary>
            <param name="name">The series name.</param>
            <param name="valuesReference">The series values reference.</param>
            <returns>A new series with specified name and values reference added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.AddCore(System.String,System.Collections.IEnumerable)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add(System.String,System.Collections.IEnumerable)">
            <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
            <param name="name">The series name.</param>
            <param name="values">The series values.</param>
            <returns>A new series with specified name and values added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add(System.String,System.Object[])">
            <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
            <param name="name">The series name.</param>
            <param name="values">The series values.</param>
            <returns>A new series with specified name and values added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.RemoveAtCore(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.ClearCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.MoveCore(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the series at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.GetEnumeratorCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#ICollection#IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#ICollection#SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets the element at the specified index. Setting element is not supported.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.NotSupportedException">Setting element is not supported. Use one of <see cref="O:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add">ChartSeriesCollection.Add</see> overloads.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Not supported. Use one of <see cref="O:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add">ChartSeriesCollection.Add</see> overloads.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
            <exception cref="T:System.NotSupportedException">Not supported. Use one of <see cref="O:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add">ChartSeriesCollection.Add</see> overloads.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Not supported. Use one of <see cref="O:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add">ChartSeriesCollection.Add</see> overloads.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">Not supported. Use one of <see cref="O:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add">ChartSeriesCollection.Add</see> overloads.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">
            <summary>
            Represents a collection of series of specific type which derives from <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/> type.
            </summary>
            <typeparam name="T">A <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries"/> derived type.</typeparam>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.CreateItem">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.CountCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="T"/> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">ChartSeriesCollection&lt;T&gt;</see>. 
            </summary>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">ChartSeriesCollection&lt;T&gt;</see> from which to get the <typeparamref name="T"/>.</param>
            <returns>The <typeparamref name="T"/> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">ChartSeriesCollection&lt;T&gt;</see>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.GetItemCore(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.CreateCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add">
            <summary>
            Adds a new empty series to the chart.
            </summary>
            <returns>A new empty series added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.AddCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add(System.String,System.String)">
            <summary>
            Adds a new series with specified name and values reference to the chart.
            </summary>
            <param name="name">The series name.</param>
            <param name="valuesReference">The series values reference.</param>
            <returns>A new series with specified name and values reference added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.AddCore(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add(System.String,System.Collections.IEnumerable)">
            <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
            <param name="name">The series name.</param>
            <param name="values">The series values.</param>
            <returns>A new series with specified name and values added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.AddCore(System.String,System.Collections.IEnumerable)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add(System.String,System.Object[])">
            <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
            <param name="name">The series name.</param>
            <param name="values">The series values.</param>
            <returns>A new series with specified name and values added to the chart.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.RemoveAtCore(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.ClearCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the series at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.MoveCore(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.GetEnumeratorCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets the item at the specified index. Setting item is not supported.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.NotSupportedException">Setting item is not supported. Use one of <see cref="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add">ChartSeriesCollection&lt;T&gt;.Add</see> method or one of its overloads.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Not supported. Use one of <see cref="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add">ChartSeriesCollection&lt;T&gt;.Add</see> method or one of its overloads.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The <typeparamref name="T"/> to insert into the <see cref="T:System.Collections.Generic.IList`1">IList&lt;T&gt;</see>.</param>
            <exception cref="T:System.NotSupportedException">Not supported. Use one of <see cref="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add">ChartSeriesCollection&lt;T&gt;.Add</see> method or one of its overloads.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Not supported. Use one of <see cref="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add">ChartSeriesCollection&lt;T&gt;.Add</see> method or one of its overloads.
            </summary>
            <param name="item">The <typeparamref name="T"/> to add to the <see cref="T:System.Collections.Generic.IList`1">IList&lt;T&gt;</see>.</param>
            <exception cref="T:System.NotSupportedException">Not supported. Use one of <see cref="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add">ChartSeriesCollection&lt;T&gt;.Add</see> method or one of its overloads.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollectionImpl.CreateItem">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartTitle">
            <summary>
            Represents a chart or axis title.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.Direction">
            <summary>
            Gets or sets the title text direction.
            </summary>
            <value>
            The title text direction.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.AllowOverlap">
            <summary>
            Gets or sets a value indicating whether title overlaps chart's plot area or resizes it.
            </summary>
            <value>
            <see langword="true" /> if title overlaps chart's plot area without resizing it; otherwise, <see langword="false" /> if title doesn't overlap chart's plot area but resizes it instead.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.IsVisible">
            <summary>
            Gets or sets a value indicating whether title is visible.
            </summary>
            <value>
            <see langword="true" /> if title is visible; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>Default value of this property is <see langword="false"/>.</para>
            <para>If title is not visible, its properties won't be saved when saving a workbook into XLSX format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.Text">
            <summary>
            Gets or sets the title text as direct value (for example, 'My chart title') or as a reference to a cell with value (for example, '=Sheet1!A1'). 
            If set value is not <see langword="null"/> nor <see cref="F:System.String.Empty"/>, then <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.IsVisible"/> is set to <see langword="true"/>.
            </summary>
            <value>
            The title text.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.DisplayText">
            <summary>
            Gets the title display text. If <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.IsVisible"/> is <see langword="false"/>, then <see cref="F:System.String.Empty"/> is returned;
            otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.Text"/> is direct value, then <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.Text"/> value is returned; 
            otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.Text"/> is a cell reference, then referenced cell value is returned;
            otherwise, default title is returned.
            </summary>
            <value>
            The title display text.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartTitle.Delete">
            <summary>
            Deletes the title.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ChartTitle.ToString">
            <summary>
            Returns the <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.DisplayText"/> value.
            </summary>
            <returns>
            The <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.DisplayText"/> value.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartTitleDirection">
            <summary>
            Represents chart or axis title text direction.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Horizontal">
            <summary>
            Text is horizontal.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Rotate90">
            <summary>
            Text is vertical (each line is 90 degrees rotated clockwise, so it goes from top to bottom; each next line is to the left from the previous one).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Rotate270">
            <summary>
            Text is vertical (each line is 270 degrees rotated clockwise, so it goes from bottom to top; each next line is to the right from the previous one).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Stacked">
            <summary>
            Text is vertical (one letter on top of another).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ChartType">
            <summary>
            Represents a chart type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartType.Column">
            <summary>
            Chart type whose series values are drawn using vertical rectangles.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartType.Bar">
            <summary>
            Chart type whose series values are drawn using horizontal rectangles.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartType.Line">
            <summary>
            Chart type whose series values are drawn using lines.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartType.Area">
            <summary>
            Chart type whose series values are drawn using filled areas.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ChartType.Pie">
            <summary>
            Chart type whose single series values are drawn as filled arcs in a pie-like form.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ColumnChart">
            <summary>
            Represents a chart whose series values are drawn using vertical rectangles.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.SeriesCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.ChartType">
            <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart"/> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Column"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Column"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.Grouping">
            <summary>
            Gets or sets the chart grouping.
            </summary>
            <value>
            The chart grouping.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.Axes">
            <summary>
            Gets the chart axes.
            </summary>
            <value>
            The chart axes.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.DefaultEmptyCellDisplayMode">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.SupportedDataLabelPositions">
            <exclude />
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.DataLabelPosition">
            <summary>
            Represents the possible positions for a data label.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.None">
            <summary>
            Data label is not shown.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Left">
            <summary>
            Specifies that data labels shall be displayed to the left of the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Right">
            <summary>
            Specifies that data labels shall be displayed to the right of the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Top">
            <summary>
            Specifies that data labels shall be displayed above the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Bottom">
            <summary>
            Specifies that data labels shall be displayed below the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.Center">
            <summary>
            Specifies that data labels shall be displayed centered on the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.InsideBase">
            <summary>
            Specifies that data labels shall be displayed inside the base of the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.InsideEnd">
            <summary>
            Specifies that data labels shall be displayed inside the end of the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.OutsideEnd">
            <summary>
            Specifies that data labels shall be displayed outside the end of the data marker.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.DataLabelPosition.BestFit">
            <summary>
            Specifies that data labels shall be displayed in the best position.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.DateAxis">
            <summary>
            <para>Represents an axis used for categories which are dates / times.</para>
            <para>This axis type is currently not supported when exporting a chart to PDF, XPS or image file formats. This axis is exported as <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis"/>.</para>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.Minimum">
            <summary>
            Gets or sets the minimum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The minimum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.Maximum">
            <summary>
            Gets or sets the maximum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The maximum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MajorTimeUnit">
            <summary>
            Gets or sets the time unit for <see cref="P:GemBox.Spreadsheet.Charts.DateAxis.MajorUnit">major tick marks</see>.
            </summary>
            <value>
            The time unit for major tick marks.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MinorTimeUnit">
            <summary>
            Gets or sets the time unit for <see cref="P:GemBox.Spreadsheet.Charts.DateAxis.MinorUnit">minor tick marks</see>.
            </summary>
            <value>
            The time unit for minor tick marks.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.BaseUnit">
            <summary>
            Gets or sets the smallest time unit that is represented on the date axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The smallest time unit that is represented on the date axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MajorUnit">
            <summary>
            Gets or sets the distance between major ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The distance between major ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MinorUnit">
            <summary>
            Gets or sets the distance between minor ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The distance between minor ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.AxisType">
            <summary>
            Gets the axis type for <see cref="T:GemBox.Spreadsheet.Charts.DateAxis"/> which is <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Date"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Date"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.NumberFormatFromLinkedSource">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.DateAxis.AxisPositionOnTickMarks">
            <summary>
            Gets or sets a value indicating whether the value axis shall cross the category axis at the midpoint of a category or between data markers.
            </summary>
            <value>
            <see langword="true"/> if the value axis shall cross the category axis at the midpoint of a category; otherwise, <see langword="false"/> if the value axis shall cross the category axis between data markers.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.DateAxis.Import(GemBox.Spreadsheet.Charts.ChartAxis)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.EmptyCellDisplayMode">
            <summary>
            Specifies the possible ways to display empty cell values (cells with <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> equal to <see langword="null"/>).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.EmptyCellDisplayMode.Zero">
            <summary>
            Specifies that empty cell values shall be treated as zero.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.EmptyCellDisplayMode.Gaps">
            <summary>
            Specifies that empty cell values shall be left as a gap.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.EmptyCellDisplayMode.ConnectDataPointsWithLine">
            <summary>
            Specifies that empty cell values shall be spanned with a line.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ExcelChart">
            <summary>
            Represents a base class for all charts in a worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.SeriesCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.Series">
            <summary>
            Gets the chart's series.
            </summary>
            <value>
            The chart's series.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.ChartType">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Charts.ChartType"/> of this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> instance.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.Charts.ChartType"/> of this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> instance.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.DefaultEmptyCellDisplayMode">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.Title">
            <summary>
            Gets the chart's title.
            </summary>
            <value>
            The chart's title.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.Legend">
            <summary>
            Gets the chart's legend.
            </summary>
            <value>
            The chart's legend.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.DataLabels">
            <summary>
            Gets the settings for the data labels for the entire chart.
            </summary>
            <value>
            The settings for the data labels for the entire chart.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.ShowEmptyCellsAs">
            <summary>
            Gets or sets the value which indicates how empty cells (cells with <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> equal to <see langword="null"/>) shall be plotted on the chart.
            </summary>
            <value>
            The value which indicates how empty cells (cells with <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> equal to <see langword="null"/>) shall be plotted on the chart.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference">
            <summary>
            Gets or sets the chart's category labels as a cell range reference (for example, 'Sheet1!A1:D1'). Values from cells in the referenced range will be used as category labels.
            </summary>
            <value>
            The chart's category labels as a cell range reference.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabels">
            <summary>
            Gets the chart's category labels.
            </summary>
            <value>
            The chart's category labels.
            </value>
            <remarks>
            If category labels are not set neither as <see cref="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference">cell range reference</see> nor as <see cref="M:GemBox.Spreadsheet.Charts.ExcelChart.SetCategoryLabels(System.Collections.Generic.IEnumerable{System.String})">direct value</see>, automatic labels will be used (sequence of integral numbers starting from 1 whose count will be equal to the count of <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Values">values</see> in the first chart series).
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.IsAutoDisplayTitleVisible">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SetCategoryLabels(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the chart's category labels.
            </summary>
            <param name="categoryLabels">The chart's category labels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="categoryLabels"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SetCategoryLabels(System.String[])">
            <summary>
            Sets the chart's category labels.
            </summary>
            <param name="categoryLabels">The chart's category labels.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range"/> parameter is not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String,System.Boolean)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range"/> parameter is not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String,System.Boolean,System.Boolean)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
            <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range"/>.</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range"/> parameter is not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
            <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range"/>.</param>
            <param name="excludeSeriesNames">if set to <see langword="true" />, series names won't be resolved from <paramref name="range"/>.</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range"/> parameter is not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range"/> is <see langword="null"/> or not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange,System.Boolean)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range"/> is <see langword="null"/> or not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange,System.Boolean,System.Boolean)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
            <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range"/>.</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range"/> is <see langword="null"/> or not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects the data for the chart.
            </summary>
            <param name="range">The cell range which contains data for the chart.</param>
            <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
            <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range"/>.</param>
            <param name="excludeSeriesNames">if set to <see langword="true" />, series names won't be resolved from <paramref name="range"/>.</param>
            <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range"/> is <see langword="null"/> or not valid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ChangeChartType(GemBox.Spreadsheet.Charts.ChartType)">
            <summary>
            Changes the chart to a different type of chart.
            </summary>
            <param name="chartType">Type of chart to change the chart to.</param>
            <returns>A chart of different type.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ChangeChartType``1">
            <summary>
            Changes the chart to a different type of chart.
            </summary>
            <typeparam name="TChart">Type of chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type to change the chart to.</typeparam>
            <returns>A chart of different type.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.Import(GemBox.Spreadsheet.Charts.ExcelChart)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ToStringCore">
            <exclude/>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.ExcelChart.allSupportedDataLabelPositions">
            <exclude />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.SupportedDataLabelPositions">
            <exclude />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.DefaultDataLabelPosition">
            <exclude />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.DefaultDataLabelSeparator">
            <exclude />
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ExcelChartCollection">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart">chart</see>s in the worksheet.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Charts">ExcelWorksheet.Charts</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="positionFrom">The chart's position.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFrom">The chart's position.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="positionFrom">The chart's position.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFrom">The chart's position.</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="positionFromCell">The chart's position (for example, "A1").</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFromCell">The chart's position (for example, "A1").</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="positionFromCell">The chart's position (for example, "A1").</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFromCell">The chart's position (for example, "A1").</param>
            <param name="width">The chart's width.</param>
            <param name="height">The chart's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="positionFrom">The chart's position (top-left corner).</param>
            <param name="positionTo">The chart's end position (bottom-right corner).</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFrom">The chart's position (top-left corner).</param>
            <param name="positionTo">The chart's end position (bottom-right corner).</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="positionFrom">The chart's position (top-left corner).</param>
            <param name="positionTo">The chart's end position (bottom-right corner).</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFrom">The chart's position (top-left corner).</param>
            <param name="positionTo">The chart's end position (bottom-right corner).</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,System.String,System.String)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
            <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.String)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
            <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(System.String,System.String)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
            <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.String)">
            <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
            <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> type.</typeparam>
            <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
            <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
            <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
            <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Get``1(System.Int32)">
            <summary>
            Gets the chart at the specified index and casts it to the specified chart subtype deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/>.
            </summary>
            <typeparam name="T">The chart subtype deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/> to cast the chart to.</typeparam>
            <param name="index">The zero-based index of the chart to get.</param>
            <returns>The chart at the specified index casted to <typeparamref name="T"/> type.</returns>
            <remarks>This method serves as a utility method for casting.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ExcelDrawingCollection`1.Count"/>.</exception>
            <exception cref="T:System.InvalidCastException">A chart at the specified index cannot be cast to type <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.LineChart">
            <summary>
            Represents a chart whose series values are drawn using lines.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.ShowMarkers">
            <summary>
            <para>Gets or sets a value indicating whether markers will be shown on series points.</para>
            <para>Value is resolved from first series. If first series has marker than all newly added series will also have marker.</para>
            <para>When setting a value, value is propagated to all series.</para>
            </summary>
            <value>
            <see langword="true"/> if markers will be shown on series points; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.Series">
            <summary>
            Gets the chart's series.
            </summary>
            <value>
            The chart's series.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.SeriesCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.ChartType">
            <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.LineChart"/> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Line"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Line"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.Grouping">
            <summary>
            Gets or sets the chart grouping.
            </summary>
            <value>
            The chart grouping.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.Axes">
            <summary>
            Gets the chart axes.
            </summary>
            <value>
            The chart axes.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.DefaultEmptyCellDisplayMode">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.LineChart.ToStringCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.LineChart.Import(GemBox.Spreadsheet.Charts.ExcelChart)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.SupportedDataLabelPositions">
            <exclude />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChart.DefaultDataLabelPosition">
            <exclude />
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.LineChartSeries">
            <summary>
            Represents a single <see cref="T:GemBox.Spreadsheet.Charts.LineChart"/> series.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.LineChartSeries.Marker">
            <summary>
            Gets the marker.
            </summary>
            <value>
            The marker.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.LineChartSeriesCollection">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.Charts.LineChartSeries"/> objects.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.LineChartSeriesCollection.CreateItem">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.Marker">
            <summary>
            Represents a marker for <see cref="T:GemBox.Spreadsheet.Charts.LineChartSeries"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.Marker.MarkerType">
            <summary>
            Gets or sets the marker type.
            </summary>
            <value>
            The marker type.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.Marker.Size">
            <summary>
            Gets or sets the marker size.
            </summary>
            <value>
            The marker size.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.Marker.Delete">
            <summary>
            Deletes the marker from series.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.Marker.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.Marker"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Charts.Marker"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.MarkerType">
            <summary>
            Represents a marker symbol which will be used on each <see cref="T:GemBox.Spreadsheet.Charts.LineChartSeries"/> data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Auto">
            <summary>
            Specifies an automatic symbol shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.None">
            <summary>
            Specifies nothing shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Square">
            <summary>
            Specifies a square shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Diamond">
            <summary>
            Specifies a diamond shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Triangle">
            <summary>
            Specifies a triangle shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.X">
            <summary>
            Specifies an X shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Star">
            <summary>
            Specifies a star shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Dot">
            <summary>
            Specifies a dot shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Dash">
            <summary>
            Specifies a dash shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Circle">
            <summary>
            Specifies a circle shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Plus">
            <summary>
            Specifies a plus shall be drawn at each data point.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Picture">
            <summary>
            Specifies a picture shall be drawn at each data point.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.PieChart">
            <summary>
            Represents a chart whose single series values are drawn as filled arcs in a pie-like form.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.PieChart.SeriesCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.PieChart.ChartType">
            <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.PieChart"/> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Pie"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Pie"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.PieChart.DefaultEmptyCellDisplayMode">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.PieChart.IsAutoDisplayTitleVisible">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.PieChart.SupportedDataLabelPositions">
            <exclude />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.PieChart.DefaultDataLabelPosition">
            <exclude />
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.PieChart.DefaultDataLabelSeparator">
            <exclude />
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.TickMarkType">
            <summary>
            Represents the possible positions for axis major and minor tick marks.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.None">
            <summary>
            No tick marks.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.Inside">
            <summary>
            Tick marks are inside the plot area.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.Outside">
            <summary>
            Tick marks are outside the plot area.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.Cross">
            <summary>
            Tick marks cross the axis.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.TimeUnit">
            <summary>
            Represents a unit of time used by <see cref="T:GemBox.Spreadsheet.Charts.DateAxis"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.TimeUnit.Days">
            <summary>
            Chart data is shown in days.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.TimeUnit.Months">
            <summary>
            Chart data is shown in months.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Charts.TimeUnit.Years">
            <summary>
            Chart data is shown in years.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Charts.ValueAxis">
            <summary>
            Represents an axis used for series values.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.Minimum">
            <summary>
            Gets or sets the minimum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The minimum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is greater than Maximum.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.Maximum">
            <summary>
            Gets or sets the maximum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The maximum value of the axis or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is smaller than Minimum.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.MajorUnit">
            <summary>
            Gets or sets the distance between major ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The distance between major ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number or is smaller than MinorUnit.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.MinorUnit">
            <summary>
            Gets or sets the distance between minor ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </summary>
            <value>
            The distance between minor ticks or <see langword="null"/> if value should be automatically calculated based on chart's data.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number or is greater than MajorUnit.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.AxisType">
            <summary>
            Gets the axis type for <see cref="T:GemBox.Spreadsheet.Charts.ValueAxis"/> which is <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Value"/>.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Value"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.NumberFormatFromLinkedSource">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.IsDefaultMajorGridlinesVisible">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Charts.ValueAxis.Import(GemBox.Spreadsheet.Charts.ChartAxis)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ClearOptions">
            <summary>
            Specifies the clear options.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ClearOptions.Content">
            <summary>
            Clears the cell content.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ClearOptions.Format">
            <summary>
            Clears the cell formatting.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ClearOptions.Comment">
            <summary>
            Clears the cell comment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ClearOptions.Hyperlink">
            <summary>
            Clears the cell hyperlink.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ClearOptions.All">
            <summary>
            Clears everything (content, formatting, comment and hyperlink).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ColorName">
            <summary>
            Represents a color name of colors available in <b>MS Excel</b> user interface.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Color"/>
            <seealso cref="P:GemBox.Spreadsheet.CellBorder.LineColor"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.GradientColor1"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.GradientColor2"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.TabColor"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Empty">
            <summary>
            No color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Automatic">
            <summary>
            <para><b>Automatic</b> color.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background1">
            <summary>
            '<b>Background 1</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background1Darker5Pct">
            <summary>
            '<b>Background 1, Darker 5%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background1Darker15Pct">
            <summary>
            '<b>Background 1, Darker 15%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background1Darker25Pct">
            <summary>
            '<b>Background 1, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background1Darker35Pct">
            <summary>
            '<b>Background 1, Darker 35%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background1Darker50Pct">
            <summary>
            '<b>Background 1, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text1">
            <summary>
            '<b>Text 1</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text1Lighter50Pct">
            <summary>
            '<b>Text 1, Lighter 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text1Lighter35Pct">
            <summary>
            '<b>Text 1, Lighter 35%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text1Lighter25Pct">
            <summary>
            '<b>Text 1, Lighter 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text1Lighter15Pct">
            <summary>
            '<b>Text 1, Lighter 15%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text1Lighter5Pct">
            <summary>
            '<b>Text 1, Lighter 5%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background2">
            <summary>
            '<b>Background 2</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background2Darker10Pct">
            <summary>
            '<b>Background 2, Darker 10%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background2Darker25Pct">
            <summary>
            '<b>Background 2, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background2Darker50Pct">
            <summary>
            '<b>Background 2, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background2Darker75Pct">
            <summary>
            '<b>Background 2, Darker 75%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Background2Darker90Pct">
            <summary>
            '<b>Background 2, Darker 90%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text2">
            <summary>
            '<b>Text 2</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text2Lighter80Pct">
            <summary>
            '<b>Text 2, Lighter 80%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text2Lighter60Pct">
            <summary>
            '<b>Text 2, Lighter 60%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text2Lighter40Pct">
            <summary>
            '<b>Text 2, Lighter 40%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text2Darker25Pct">
            <summary>
            '<b>Text 2, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Text2Darker50Pct">
            <summary>
            '<b>Text 2, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent1">
            <summary>
            '<b>Accent 1</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent1Lighter80Pct">
            <summary>
            '<b>Accent 1, Lighter 80%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent1Lighter60Pct">
            <summary>
            '<b>Accent 1, Lighter 60%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent1Lighter40Pct">
            <summary>
            '<b>Accent 1, Lighter 40%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent1Darker25Pct">
            <summary>
            '<b>Accent 1, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent1Darker50Pct">
            <summary>
            '<b>Accent 1, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent2">
            <summary>
            '<b>Accent 2</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent2Lighter80Pct">
            <summary>
            '<b>Accent 2, Lighter 80%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent2Lighter60Pct">
            <summary>
            '<b>Accent 2, Lighter 60%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent2Lighter40Pct">
            <summary>
            '<b>Accent 2, Lighter 40%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent2Darker25Pct">
            <summary>
            '<b>Accent 2, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent2Darker50Pct">
            <summary>
            '<b>Accent 2, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent3">
            <summary>
            '<b>Accent 3</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent3Lighter80Pct">
            <summary>
            '<b>Accent 3, Lighter 80%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent3Lighter60Pct">
            <summary>
            '<b>Accent 3, Lighter 60%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent3Lighter40Pct">
            <summary>
            '<b>Accent 3, Lighter 40%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent3Darker25Pct">
            <summary>
            '<b>Accent 3, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent3Darker50Pct">
            <summary>
            '<b>Accent 3, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent4">
            <summary>
            '<b>Accent 4</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent4Lighter80Pct">
            <summary>
            '<b>Accent 4, Lighter 80%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent4Lighter60Pct">
            <summary>
            '<b>Accent 4, Lighter 60%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent4Lighter40Pct">
            <summary>
            '<b>Accent 4, Lighter 40%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent4Darker25Pct">
            <summary>
            '<b>Accent 4, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent4Darker50Pct">
            <summary>
            '<b>Accent 4, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent5">
            <summary>
            '<b>Accent 5</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent5Lighter80Pct">
            <summary>
            '<b>Accent 5, Lighter 80%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent5Lighter60Pct">
            <summary>
            '<b>Accent 5, Lighter 60%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent5Lighter40Pct">
            <summary>
            '<b>Accent 5, Lighter 40%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent5Darker25Pct">
            <summary>
            '<b>Accent 5, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent5Darker50Pct">
            <summary>
            '<b>Accent 5, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent6">
            <summary>
            '<b>Accent 6</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent6Lighter80Pct">
            <summary>
            '<b>Accent 6, Lighter 80%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent6Lighter60Pct">
            <summary>
            '<b>Accent 6, Lighter 60%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent6Lighter40Pct">
            <summary>
            '<b>Accent 6, Lighter 40%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent6Darker25Pct">
            <summary>
            '<b>Accent 6, Darker 25%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Accent6Darker50Pct">
            <summary>
            '<b>Accent 6, Darker 50%</b>' theme color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Black">
            <summary>
            '<b>Black</b>' standard color (R = 0, G = 0, B = 0, ARGB = 0xFF000000).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.White">
            <summary>
            '<b>White</b>' standard color (R = 255, G = 255, B = 255, ARGB = 0xFFFFFFFF).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.DarkRed">
            <summary>
            '<b>Dark Red</b>' standard color (R = 192, G = 0, B = 0, ARGB = 0xFFC00000).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Red">
            <summary>
            '<b>Red</b>' standard color (R = 255, G = 0, B = 0, ARGB = 0xFFFF0000).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Orange">
            <summary>
            '<b>Orange</b>' standard color (R = 255, G = 192, B = 0, ARGB = 0xFFFFC000).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Yellow">
            <summary>
            '<b>Yellow</b>' standard color (R = 255, G = 255, B = 0, ARGB = 0xFFFFFF00).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.LightGreen">
            <summary>
            '<b>Light Green</b>' standard color (R = 146, G = 208, B = 80, ARGB = 0xFF92D050).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Green">
            <summary>
            '<b>Green</b>' standard color (R = 0, G = 176, B = 80, ARGB = 0xFF00B050).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.LightBlue">
            <summary>
            '<b>Light Blue</b>' standard color (R = 0, G = 176, B = 240, ARGB = 0xFF00B0F0).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Blue">
            <summary>
            '<b>Blue</b>' standard color (R = 0, G = 112, B = 192, ARGB = 0xFF0070C0).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.DarkBlue">
            <summary>
            '<b>Dark Blue</b>' standard color (R = 0, G = 32, B = 96, ARGB = 0xFF002060).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColorName.Purple">
            <summary>
            '<b>Purple</b>' standard color (R = 112, G = 48, B = 160, ARGB = 0xFF7030A0).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ColumnTypeResolution">
            <summary>
            Defines resolution method that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>. 
            </summary>
            <remarks>
            <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see> is determined by the <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution">column type resolution</see> and by exploring 
            types of all <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> in some column.
            Column type can be <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime">
            DateTime</see>, <see cref="T:System.String"/> or <see cref="T:System.Object"/>.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.Object">
            <summary>
            All columns will be of type <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.StringInvariantCulture">
            <summary>
            All columns  will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.InvariantCulture">
            invariant culture</see> will be used.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.StringCurrentCulture">
            <summary>
            All columns  will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.CurrentCulture">
            current culture</see> will be used.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.Auto">
            <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.Object"/>. 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.AutoPreferStringInvariantCulture">
            <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.InvariantCulture">
            invariant culture</see> will be used.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.AutoPreferStringCurrentCulture">
            <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.CurrentCulture">
            current culture</see> will be used.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ComHelper">
            <summary>
            Contains methods that can be useful for users which are calling GemBox.Spreadsheet component using COM interop.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ComHelper"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.ComSetLicense(System.String)">
            <summary>
            Call this method from your application to set GemBox.Spreadsheet serial key.
            </summary>
            <remarks>
            <para>You should call this method before using any other class from GemBox.Spreadsheet library. 
            Key can only be set once (if you try second key, exception will be thrown). 
            The best place to call this method is from static constructor of your application's main class.</para>
            <para>Valid serial key has multiple groups of alphanumeric characters, separated with dashes.</para>
            <para>Free version serial key is: <b>FREE-LIMITED-KEY</b>.</para>
            </remarks>
            <param name="serialKey">Serial key.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.Load(System.String)">
            <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <returns>A loaded spreadsheet.</returns>
            <remarks>
            File extension that is extracted from the <paramref name="path" /> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.LoadOptions" />
            derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.ExcelFile.Load(System.String,GemBox.Spreadsheet.LoadOptions)" /> method.
            <para>Following file extensions are supported:</para>
            <list type="bullet">
            <item><description>Microsoft Excel: .xlsx, xlsm, .xltx, .xltm, .xls, .xlt</description></item>
            <item><description>OpenDocument Spreadsheet: .ods, .ots</description></item>
            <item><description>Character Separated Values: .csv, .tsv</description></item>
            <item><description>HyperText Markup Language: .htm, .html, .mht, .mhtml</description></item>
            </list>
            </remarks>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Load" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Load" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.LoadWithOptions(System.String,System.Object)">
            <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <param name="options">The loading options which can be used to define settings for load operation.</param>
            <returns>A loaded spreadsheet.</returns>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Load" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Load" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.LoadXlsxFromDirectory(System.String)">
            <summary>
            Loads all parts of XLSX file as separate files from input directory.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <returns>A loaded XLSX spreadsheet.</returns>
            <remarks>
            You need to use external ZIP library to extract all parts from XLSX file.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.SaveWithOptions(System.Object,System.String,System.Object)">
            <summary>
            Saves the spreadsheet to a file with the specified path.
            </summary>
            <param name="file">The ExcelFile instance which to save.</param>
            <param name="path">The path to which to save the spreadsheet.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Save" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Save" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.SaveXlsxToDirectory(System.Object,System.String)">
            <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
            <param name="file">The ExcelFile instance which to save.</param>
            <param name="path">Path of output directory.</param>
            <remarks>
            <para>You need to use external ZIP library to package all created files to XLSX file.</para>
            <note type="note">
            When using external ZIP library to package all created files to XLSX file, only the contents of the directory should be zipped and not the directory itself.
            </note>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.GetColumn(System.Object,System.Int32)">
            <summary>
            Gets the column from a sheet with the specified index.
            </summary>
            <param name="sheet">The ExcelWorksheet instance from which to retrieve the column.</param>
            <param name="index">The zero-based index of the column.</param>
            <returns>The ExcelColumn instance of the specified index.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.GetRow(System.Object,System.Int32)">
            <summary>
            Gets the row from a sheet with the specified index.
            </summary>
            <param name="sheet">The ExcelWorksheet instance from which to retrieve the row.</param>
            <param name="index">The zero-based index of the row.</param>
            <returns>The ExcelRow instance of the specified index.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.RemoveColumn(System.Object,System.Int32)">
            <summary>
            Removes the column with the specified index.
            </summary>
            <param name="sheet">The ExcelWorksheet instance from which to remove the column.</param>
            <param name="index">The zero-based index of the column.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.RemoveRow(System.Object,System.Int32)">
            <summary>
            Removes the row with the specified index.
            </summary>
            <param name="sheet">The ExcelWorksheet instance from which to remove the row.</param>
            <param name="index">The zero-based index of the row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.SetFrozenWorksheetPanes(System.Object,System.String)">
            <summary>
            Sets frozen worksheet panes for freezing rows and columns.
            </summary>
            <param name="sheet">The ExcelWorksheet instance in which to freeze row and column.</param>
            <param name="topLeftCell">Top left visible cell in the bottom right pane.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition">
            <summary>
            Represents a condition that formats only cells with values that are above or below average.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.Below">
            <summary>
            <para>Gets or sets a value indicating whether to format cells with values below average.</para>
            <para>Default value is <see langword="false"/> (formats cells with values above average).</para>
            </summary>
            <value>
            <see langword="true" /> to format cells with values below average; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.Equal">
            <summary>
            <para>Gets or sets a value indicating whether to format cells with values equal to average.</para>
            <para>Default value is <see langword="false"/> (formats cells with values exclusively above or below average).</para>
            </summary>
            <value>
            <see langword="true" /> to format cells with values equal to average; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.AboveOrBelowAverage"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.AboveOrBelowAverage"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.StandardDeviations">
            <summary>
            <para>Gets or sets the number of standard deviations above or below average.</para>
            <para>Only cells with values above or below average ± <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.StandardDeviations"/> * <i>std</i> are formatted.</para>
            <para>Default value is 0.</para>
            </summary>
            <value>
            The number of standard deviations above or below average.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is less than zero.</exception>
            <seealso href="http://en.wikipedia.org/wiki/Standard_deviation#Discrete_random_variable">Standard deviation (std)</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.Style">
            <summary>
            Gets the actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition"/>.
            </summary>
            <value>
            The actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition">
            <summary>
            Represents a condition that formats fill of all cells based on their values using a specified 2-point or 3-point color scale.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition.Colors">
            <summary>
            Gets the color points.
            </summary>
            <value>
            The color points.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.ColorScale"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.ColorScale"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition.Minimum">
            <summary>
            Gets the minimum color point.
            </summary>
            <value>
            The minimum color point.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition.Midpoint">
            <summary>
            Gets the midpoint color point or <see langword="null"/> if conditional formatting rule is '<b>2-Color Scale</b>'.
            </summary>
            <value>
            The midpoint color point or <see langword="null"/> if conditional formatting rule is '<b>2-Color Scale</b>'.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition.Maximum">
            <summary>
            Gets the maximum color point.
            </summary>
            <value>
            The maximum color points.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor">
            <summary>
            Represents a conditional color used in <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> of a conditional formatting rule to specify color scale point.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor.ParentCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor.VerifyValue(GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor.GetIndexToString(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColorCollection">
            <summary>
            Represents a collection of conditional colors used in <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> of a conditional formatting rule.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColorCollection.Minimum">
            <summary>
            Gets the minimum color point.
            </summary>
            <value>
            The minimum color point.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColorCollection.Midpoint">
            <summary>
            Gets the midpoint color point or <see langword="null"/>.
            </summary>
            <value>
            The midpoint color point or <see langword="null"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColorCollection.Maximum">
            <summary>
            Gets the maximum color point.
            </summary>
            <value>
            The maximum color points.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColorCollection.ConditionObject">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColorCollection.CreateItem(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalColorCollection.CloneItem(GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule">
            <summary>
            Represents a conditional formatting rule.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.StopIfTrue">
            <summary>
            Gets or sets a value indicating whether a rule with lower priority may be applied over this rule, when this rule evaluates to true.
            </summary>
            <value>
            <see langword="true" /> if no rules with lower priority may be applied over this rule, when this rule evaluates to true; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.AppliesTo">
            <summary>
            Gets or sets the sequence of references to cell ranges over which this conditional formatting rule is applied.
            </summary>
            <value>
            The sequence of references to cell ranges over which this conditional formatting rule is applied.
            </value>
            <exception cref="T:System.ArgumentException">Parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.Condition">
            <summary>
            Gets the condition specified in this conditional formatting rule.
            </summary>
            <value>
            The condition specified in this conditional formatting rule.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.Set2ColorScale">
            <summary>
            Sets a '<b>2-Color Scale</b>' formatting condition to this conditional formatting rule.
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> set to this conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <remarks>
            Newly set condition has the same default settings as in MS Excel.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.Set3ColorScale">
            <summary>
            Sets a '<b>3-Color Scale</b>' formatting condition to this conditional formatting rule.
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> set to this conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <remarks>
            Newly set condition has the same default settings as in MS Excel.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetDataBar">
            <summary>
            Sets a '<b>Data Bar</b>' formatting condition to this conditional formatting rule.
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition"/> set to this conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <remarks>
            Newly set condition has the same default settings as in MS Excel.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetIconSet">
            <summary>
            Sets an '<b>Icon Set</b>' formatting condition to this conditional formatting rule.
            </summary>
            <returns>An <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition"/> set to this conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <remarks>
            Newly set condition has the same default settings as in MS Excel.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetContainValue(GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator,System.Object)">
            <summary>
            Sets a '<b>Cells with Cell Value</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="operator">The operator (all except <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> and <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />).</param>
            <param name="value">The value (constant or formula).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" /> set to this conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="operator"/> is <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />. Use other method overload for these operators.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="value"/> type is not supported.</exception>
            <remarks>
            <para>Value can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/> and value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            <para>If value is formula, then value type must be <see cref="T:System.String"/> and it must start with '='.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetContainValue(GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator,System.Object,System.Object)">
            <summary>
            Sets a '<b>Cells with Cell Value</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="operator">The operator (<see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />).</param>
            <param name="value">The value (constant or formula).</param>
            <param name="value2">The second value (constant or formula).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" /> set to this conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="operator"/> is not <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> nor <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />. Use other method overload for other operators.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="value"/> or <paramref name="value2"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="value"/> or <paramref name="value2"/> type is not supported.</exception>
            <remarks>
            <para>Values can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/> and value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            <para>If value is formula, then value type must be <see cref="T:System.String"/> and it must start with '='.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetContainText(GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator,System.String)">
            <summary>
            Sets a '<b>Cells with Specific Text</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="operator">The textual operator.</param>
            <param name="value">The value (constant string or formula).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition" /> set to this conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="value"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>Value can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/>.</para>
            <para>If value is formula, it must start with '='.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetContainDate(GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator)">
            <summary>
            Sets a '<b>Cells with Dates Occurring</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="operator">The date operator.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition" /> set to this conditional formatting rule which can be used to customize the formatting.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetContain(GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType)">
            <summary>
            Sets a '<b>Cells with Blanks</b>' or '<b>Cells with No Blanks</b>' or '<b>Cells with Errors</b>' or '<b>Cells with No Errors</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="containConditionType">The contain condition type (<see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Blanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoBlanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Errors" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoErrors" />).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition" /> set to this conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="containConditionType"/> is not <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Blanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoBlanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Errors" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoErrors" />.</exception>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetTopOrBottomRanked(System.Boolean,System.Int32)">
            <summary>
            Sets a '<b>Top or Bottom Ranked</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="bottom">if set to <see langword="true" /> format cells with bottom ranked values; otherwise, format cells with top ranked values.</param>
            <param name="rank">The number of top or bottom ranked cells which are formatted.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition" /> set to this conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="rank"/> is less than or equal to zero.</exception>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetAboveOrBelowAverage(System.Boolean)">
            <summary>
            Sets an '<b>Above or Below Average</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="below">if set to <see langword="true" /> format cells with values below average; otherwise, format cells with values above average.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition" /> set to this conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetUniqueOrDuplicate(System.Boolean)">
            <summary>
            Sets a '<b>Unique or Duplicate</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="duplicate">if set to <see langword="true" /> format cells with duplicate values; otherwise, format cells with unique values.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition" /> set to this conditional formatting rule which can be used to customize the formatting.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.SetFormula(System.String)">
            <summary>
            Sets a '<b>Formula</b>' formatting condition to this conditional formatting rule.
            </summary>
            <param name="formula">The formula used to determine which cells to format (only cells for which the formula result evaluates to <see langword="true"/> are formatted).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition" /> set to this conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="formula"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection">
            <summary>
            <para>Represents a collection of a conditional formatting rules.</para>
            <para>Rules are applied in the order they appear in the collection (first rule has highest priority and last rule has lowest priority).</para>
            <para>Newly added rules are inserted at the beginning of the collection so they are first applied.</para>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/>s contained in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/>s contained in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> to get.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Add2ColorScale(System.String)">
            <summary>
            Adds a '<b>2-Color Scale</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> set to a newly created conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            <para>Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.</para>
            <para>Newly added rule has the same default settings as in MS Excel.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Add3ColorScale(System.String)">
            <summary>
            Adds a '<b>3-Color Scale</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/> set to a newly created conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            <para>Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.</para>
            <para>Newly added rule has the same default settings as in MS Excel.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddDataBar(System.String)">
            <summary>
            Adds a '<b>Data Bar</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition"/> set to a newly created conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            <para>Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.</para>
            <para>Newly added rule has the same default settings as in MS Excel.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddIconSet(System.String)">
            <summary>
            Adds an '<b>Icon Set</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <returns>An <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition"/> set to a newly created conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            <para>Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.</para>
            <para>Newly added rule has the same default settings as in MS Excel.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddContainValue(System.String,GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator,System.Object)">
            <summary>
            Adds a '<b>Cells with Cell Value</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="operator">The operator (all except <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> and <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />).</param>
            <param name="value">The value (constant or formula).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" /> set to a newly created conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="operator"/> is <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />. Use other method overload for these operators.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="value"/> type is not supported.</exception>
            <remarks>
            <para>Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.</para>
            <para>Value can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/> and value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            <para>If value is formula, then value type must be <see cref="T:System.String"/> and it must start with '='.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddContainValue(System.String,GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator,System.Object,System.Object)">
            <summary>
            Adds a '<b>Cells with Cell Value</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="operator">The operator (<see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />).</param>
            <param name="value">The value (constant or formula).</param>
            <param name="value2">The second value (constant or formula).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" /> set to a newly created conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="operator"/> is not <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" /> nor <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" />. Use other method overload for other operators.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="value"/> or <paramref name="value2"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="value"/> or <paramref name="value2"/> type is not supported.</exception>
            <remarks>
            <para>Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.</para>
            <para>Values can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/> and value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            <para>If value is formula, then value type must be <see cref="T:System.String"/> and it must start with '='.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddContainText(System.String,GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator,System.String)">
            <summary>
            Adds a '<b>Cells with Specific Text</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="operator">The textual operator.</param>
            <param name="value">The value (constant string or formula).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition" /> set to a newly created conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="value"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.</para>
            <para>Value can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/>.</para>
            <para>If value is formula, it must start with '='.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddContainDate(System.String,GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator)">
            <summary>
            Adds a '<b>Cells with Dates Occurring</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="operator">The date operator.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition" /> set to a newly created conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddContain(System.String,GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType)">
            <summary>
            Adds a '<b>Cells with Blanks</b>' or '<b>Cells with No Blanks</b>' or '<b>Cells with Errors</b>' or '<b>Cells with No Errors</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="containConditionType">The contain condition type (<see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Blanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoBlanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Errors" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoErrors" />).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition" /> set to a newly created conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="containConditionType"/> is not <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Blanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoBlanks" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Errors" /> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoErrors" />.</exception>
            <remarks>
            Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddTopOrBottomRanked(System.String,System.Boolean,System.Int32)">
            <summary>
            Adds a '<b>Top or Bottom Ranked</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="bottom">if set to <see langword="true" /> format cells with bottom ranked values; otherwise, format cells with top ranked values.</param>
            <param name="rank">The number of top or bottom ranked cells which are formatted.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition" /> set to a newly created conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="rank"/> is less than or equal to zero.</exception>
            <remarks>
            Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddAboveOrBelowAverage(System.String,System.Boolean)">
            <summary>
            Adds an '<b>Above or Below Average</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="below">if set to <see langword="true" /> format cells with values below average; otherwise, format cells with values above average.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition" /> set to a newly created conditional formatting rule which can be used to further customize the formatting condition.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddUniqueOrDuplicate(System.String,System.Boolean)">
            <summary>
            Adds a '<b>Unique or Duplicate</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="duplicate">if set to <see langword="true" /> format cells with duplicate values; otherwise, format cells with unique values.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition" /> set to a newly created conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.AddFormula(System.String,System.String)">
            <summary>
            Adds a '<b>Formula</b>' conditional formatting rule applied to a specified sequence of references to cell ranges.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added conditional formatting rule is applied.</param>
            <param name="formula">The formula used to determine which cells to format (only cells for which the formula result evaluates to <see langword="true"/> are formatted).</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition" /> set to a newly created conditional formatting rule which can be used to customize the formatting.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="formula"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <remarks>
            Newly added rule is inserted at the beginning of the collection so it has the highest priority and is first applied.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Remove(GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule)">
            <summary>
            Removes the specified <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> from the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </summary>
            <param name="rule">The <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> to remove from the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.</param>
            <returns>
            <see langword="true"/> if <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> was not found in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Remove(GemBox.Spreadsheet.ConditionalFormatting.FormatCondition)">
            <summary>
            Removes a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> associated with the specified <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition"/> from the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </summary>
            <param name="condition">The <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition"/> which associated <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> to remove from the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.</param>
            <returns>
            <see langword="true"/> if <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> associated with the specified <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition"/> is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> associated with the specified <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition"/> was not found in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> at the specified index of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> at the specified index to a new location in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/> to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newIndex"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon">
            <summary>
            Represents a conditional icon used in <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition"/> of a conditional formatting rule to specify icon and a lower bound of the values onto which the icon is applied.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>
            The icon.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon.Equal">
            <summary>
            <para>Gets or sets a value indicating whether this or next icon will be shown if cell's value is equal to this <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.Value"/>.</para>
            <para>Default value is <see langword="true"/> (this icon will be shown if cell's value is equal to this <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.Value"/>).</para>
            </summary>
            <value>
            <see langword="true" /> if this icon will be shown if cell's value is equal to this <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.Value"/>; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon.ParentCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon.VerifyValue(GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon.GetIndexToString(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIconCollection">
            <summary>
            Represents a collection of conditional icons used in <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition"/> of a conditional formatting rule.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIconCollection.ConditionObject">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIconCollection.CreateItem(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalIconCollection.CloneItem(GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength">
            <summary>
            Represents a conditional length used in <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition"/> of a conditional formatting rule to specify data bar length.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength.Length">
            <summary>
            Gets or sets the data bar length as a percentage of the cell width.
            </summary>
            <value>
            The data bar length as a percentage of the cell width.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is less than 0 or greater than 100.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength.ParentCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength.VerifyValue(GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength.GetIndexToString(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLengthCollection">
            <summary>
            Represents a collection of conditional lengths used in <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition"/> of a conditional formatting rule.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLengthCollection.Minimum">
            <summary>
            Gets the data bar minimum.
            </summary>
            <value>
            The data bar minimum.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLengthCollection.Maximum">
            <summary>
            Gets the data bar maximum.
            </summary>
            <value>
            The data bar maximum.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLengthCollection.ConditionObject">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLengthCollection.CreateItem(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalLengthCollection.CloneItem(GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject">
            <summary>
            Represents a base class for conditional objects used in conditional formatting. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.ParentCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.ArgumentException">Specified value is not valid for the current conditional object.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.VerifyValue(GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.GetIndexToString(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection">
            <summary>
            Represents a base class for a collections of <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject"/>s used in conditional formatting.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.ConditionObject">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.CountObject">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.Count">
            <summary>
            Gets the number of conditional objects contained in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection"/>.
            </summary>
            <value>
            The number of conditional objects contained in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.Item(System.Int32)">
            <summary>
            Gets the conditional object at the specified index.
            </summary>
            <value>
            The conditional object at the specified index.
            </value>
            <param name="index">The zero-based index of the conditional object to get.</param>
            <returns>The conditional object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection"/>.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.GetItemObject(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.GetEnumeratorObject">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1">
            <summary>
            Represents a base class for a collections of <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject" />-derived instances used in conditional formatting.
            </summary>
            <typeparam name="T">A <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject"/>-derived type.</typeparam>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.Count">
            <summary>
            Gets the number of conditional objects contained in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1" />.
            </summary>
            <value>
            Gets the number of conditional objects contained in the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.CountObject">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets the conditional object at the specified index.
            </summary>
            <value>
            The conditional object at the specified index.
            </value>
            <param name="index">The zero-based index of the conditional object to get.</param>
            <returns>The conditional object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1"/>.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.CreateItem(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.CloneItem(`0)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.GetItemObject(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.GetEnumeratorObject">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection`1.Initialize(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue">
            <summary>
            Represents a conditional value used in conditional formating rules which format all cells based on their values (<see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition"/>, <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition"/> and <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition"/>).
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.None">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.None"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Automatic">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Automatic"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Lowest">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Lowest"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Highest">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Highest"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType">
            <summary>
            Gets the conditional value type.
            </summary>
            <value>
            The conditional value type.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
            <remarks>
            Value is
            <list type="bullet">
            <item><description>equal to <see langword="null"/> if <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.None"/>, <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Automatic"/>, <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Lowest"/> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Highest"/>.</description></item>
            <item><description><see cref="T:System.Double"/> if <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Number"/>, <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Percent"/> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Percentile"/>.</description></item>
            <item><description><see cref="T:System.String"/> if <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Formula"/>.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.FromNumber(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> from the specified number.
            </summary>
            <param name="number">The number value.</param>
            <returns>
            A new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType"/> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Number"/> and <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Value"/> is equal to <paramref name="number"/> parameter.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.FromPercent(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" /> from the specified percent.
            </summary>
            <param name="percent">The percent value.</param>
            <returns>
            A new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" /> whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType" /> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Percent" /> and <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Value" /> is equal to <paramref name="percent" /> parameter.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Percent value is less than 0 or greater than 100.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.FromPercentile(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" /> from the specified percentile.
            </summary>
            <param name="percentile">The percentile value.</param>
            <returns>
            A new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" /> whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType" /> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Percentile" /> and <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Value" /> is equal to <paramref name="percentile" /> parameter.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Percentile value is less than 0 or greater than 100.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.FromFormula(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" /> from the specified formula.
            </summary>
            <param name="formula">The formula value.</param>
            <returns>
            A new instance of the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" /> whose <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType" /> is equal to <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Formula" /> and <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Value" /> is equal to <paramref name="formula" /> parameter.
            </returns>
            <exception cref="T:System.ArgumentException">Formula value is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Equals(GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue)">
            <summary>
            Determines whether the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> is equal to this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.
            </summary>
            <param name="other">The other <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> to compare with this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.</param>
            <returns><see langword="true"/> if the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> is equal to this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> and is equal to this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.op_Equality(GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue,GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.op_Inequality(GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue,GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue"/> type.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.None">
            <summary>
            No conditional value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Lowest">
            <summary>
            Lowest value from the applied ranges.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Highest">
            <summary>
            Highest value from the applied ranges.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Automatic">
            <summary>
            The shortest data bar is proportional to the minimum value and the longest data bar is proportional to the maximum value from the applied ranges.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Number">
            <summary>
            A constant number.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Percent">
            <summary>
            A percentage between the lowest and highest values from the applied ranges.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Formula">
            <summary>
            A formula.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Percentile">
            <summary>
            A percentile ranking of the values from the applied ranges.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition">
            <summary>
            Represents a condition that formats only cells that contain value which satisfies the specified criteria.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition.ContainConditionType">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition"/> type.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition"/> type.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Contain"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Contain"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition.Style">
            <summary>
            Gets the actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition"/>.
            </summary>
            <value>
            The actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition.ValueToString(System.Object)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainCondition"/> type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Value">
            <summary>
            Formats only cells with value that satisfies the specified criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Text">
            <summary>
            Formats only cells with text that satisfies the specified criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Date">
            <summary>
            Formats only cells with date that satisfies the specified criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Blanks">
            <summary>
            Formats only cells with blank values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoBlanks">
            <summary>
            Formats only cells without blank values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.Errors">
            <summary>
            Formats only cells with errors.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.NoErrors">
            <summary>
            Formats only cells without errors.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition">
            <summary>
            Represents a condition that formats only cells with date that satisfies the specified criteria.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition.Operator">
            <summary>
            Gets or sets the operator of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition"/>.
            </summary>
            <value>
            The operator of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition"/> operator.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.Yesterday">
            <summary>
            Cell is formatted if its value falls into yesterday's date.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.Today">
            <summary>
            Cell is formatted if its value falls into today's date.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.Tomorrow">
            <summary>
            Cell is formatted if its value falls into tomorrow's date.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.Last7Days">
            <summary>
            Cell is formatted if its value falls into dates of the last 7 days.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.LastWeek">
            <summary>
            Cell is formatted if its value falls into last week's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.ThisWeek">
            <summary>
            Cell is formatted if its value falls into this week's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.NextWeek">
            <summary>
            Cell is formatted if its value falls into next week's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.LastMonth">
            <summary>
            Cell is formatted if its value falls into last month's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.ThisMonth">
            <summary>
            Cell is formatted if its value falls into this month's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.NextMonth">
            <summary>
            Cell is formatted if its value falls into next month's dates.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition">
            <summary>
            Represents a condition that formats only cells with text that satisfies the specified criteria.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Operator">
            <summary>
            Gets or sets the operator of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition"/>.
            </summary>
            <value>
            The operator of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value">
            <summary>
            <para>Gets or sets the value of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition"/>.</para>
            <para>Value can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/>.</para>
            <para>If value is formula, it must start with '='.</para>
            </summary>
            <value>
            The value of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">Value is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition"/> operator.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator.Contains">
            <summary>
            Cell is formatted if its value contains <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator.NotContains">
            <summary>
            Cell is formatted if its value does not contain <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator.BeginsWith">
            <summary>
            Cell is formatted if its value begins with <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator.EndsWith">
            <summary>
            Cell is formatted if its value ends with <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition">
            <summary>
            Represents a condition that formats only cells with value that satisfies the specified criteria.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Operator">
            <summary>
            Gets or sets the operator of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/>.
            </summary>
            <value>
            The operator of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value">
            <summary>
            <para>Gets or sets the value of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/>.</para>
            <para>Value can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/> and value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            <para>If value is formula, then value type must be <see cref="T:System.String"/> and it must start with '='.</para>
            </summary>
            <value>
            The value of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">Value is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Value's type is not supported.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value2">
            <summary>
            <para>Gets or sets the second value of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/> used with <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between"/> and <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween"/> operators.</para>
            <para>Value can be either constant or formula.</para>
            <para>If value is constant, then it cannot be <see langword="null"/> and value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            <para>If value is formula, then value type must be <see cref="T:System.String"/> and it must start with '='.</para>
            </summary>
            <value>
            The second value of this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/> used with <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between"/> and <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween"/> operators.
            </value>
            <exception cref="T:System.ArgumentNullException">Value is <see langword="null"/> and <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Operator"/> is <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between"/> or <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween"/>.</exception>
            <exception cref="T:System.ArgumentException">Value's type is not supported.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition"/> operator.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between">
            <summary>
            Cell is formatted if its value is between <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/> and <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value2"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween">
            <summary>
            Cell is formatted if its value is not between <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/> and <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value2"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Equal">
            <summary>
            Cell is formatted if its value is equal to <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotEqual">
            <summary>
            Cell is formatted if its value is not equal to <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.GreaterThan">
            <summary>
            Cell is formatted if its value is greater than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.LessThan">
            <summary>
            Cell is formatted if its value is less than <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.GreaterThanOrEqual">
            <summary>
            Cell is formatted if its value is greater than or equal to <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.LessThanOrEqual">
            <summary>
            Cell is formatted if its value is less than or equal to <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarAxisPosition">
            <summary>
            Represents a data bar axis position.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.DataBarAxisPosition.Automatic">
            <summary>
            The axis position for the data bar is calculated automatically (variable position based on negative values).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.DataBarAxisPosition.Midpoint">
            <summary>
            The axis position for the data bar is the midpoint of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.DataBarAxisPosition.None">
            <summary>
            There is no axis for the data bar.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition">
            <summary>
            Represents a condition that formats all cells based on their values by displaying a data bar whose length is proportional to cell's value.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.ShowBarOnly">
            <summary>
            <para>Gets or sets a value indicating whether to show bar only.</para>
            <para>Default value is <see langword="false"/> (cell value is shown together with bar).</para>
            </summary>
            <value>
            <see langword="true" /> to show bar only; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.BarStyle">
            <summary>
            Gets the bar appearance settings.
            </summary>
            <value>
            The bar appearance settings.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.Lengths">
            <summary>
            Gets the data bar lengths.
            </summary>
            <value>
            The data bar lengths.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.DataBar"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.DataBar"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.Minimum">
            <summary>
            Gets the data bar minimum.
            </summary>
            <value>
            The data bar minimum.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.Maximum">
            <summary>
            Gets the data bar maximum.
            </summary>
            <value>
            The data bar maximum.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarDirection">
            <summary>
            Represents a data bar direction.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.DataBarDirection.Context">
            <summary>
            The direction of the data bar is determined by context.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.DataBarDirection.LeftToRight">
            <summary>
            The data bar is displayed in a <i>left-to-right</i> manner.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.DataBarDirection.RightToLeft">
            <summary>
            The data bar is displayed in a <i>right-to-left</i> manner.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle">
            <summary>
            Represents an appearance settings of a data bar.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.Direction">
            <summary>
            Gets or sets the data bar direction.
            </summary>
            <value>
            The data bar direction.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.GradientFill">
            <summary>
            <para>Gets or sets a value indicating whether the data bar <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.FillColor"/> is gradient or solid.</para>
            <para>Default value is <see langword="false"/> (data bar <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.FillColor"/> is solid).</para>
            </summary>
            <value>
            <see langword="true" /> if the data bar <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.FillColor"/> is gradient; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.AxisPosition">
            <summary>
            Gets or sets the data bar axis position.
            </summary>
            <value>
            The data bar axis position.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.FillColor">
            <summary>
            Gets or sets the data bar fill color.
            </summary>
            <value>
            The data bar fill color.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.BorderColor">
            <summary>
            <para>Gets or sets the data bar border color.</para>
            <para>If border color <see cref="P:GemBox.Spreadsheet.SpreadsheetColor.IsEmpty"/>, then data bar won't have any border.</para>
            </summary>
            <value>
            The data bar border color.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.NegativeFillColor">
            <summary>
            <para>Gets or sets the data bar fill color for negative values.</para>
            <para>If negative data bar fill color <see cref="P:GemBox.Spreadsheet.SpreadsheetColor.IsEmpty"/>, then data bar fill color for negative values is same as for positive values.</para>
            </summary>
            <value>
            The data bar fill color for negative values.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.NegativeBorderColor">
            <summary>
            <para>Gets or sets the data bar border color for negative values.</para>
            <para>If negative data bar border color <see cref="P:GemBox.Spreadsheet.SpreadsheetColor.IsEmpty"/>, then data bar border color for negative values is same as for positive values.</para>
            </summary>
            <value>
            The data bar border color for negative values.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.AxisColor">
            <summary>
            Gets or sets the data bar axis color.
            </summary>
            <value>
            The data bar axis color.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition">
            <summary>
            Represents a base class for all conditions that can be specified in a conditional formatting rule.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition.ConditionType">
            <summary>
            Gets the condition type.
            </summary>
            <value>
            The condition type.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition.Rule">
            <summary>
            Gets the conditional formatting rule associated with this condition.
            </summary>
            <value>
            The conditional formatting rule associated with this condition.
            </value>
            <exception cref="T:System.InvalidOperationException">Format condition is invalid because it is no longer associated with any conditional formatting rule.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormatCondition"/> type.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.ColorScale">
            <summary>
            Formats fill of all cells based on their values using a specified 2-point or 3-point color scale.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.DataBar">
            <summary>
            Formats all cells based on their values by displaying a data bar whose length is proportional to cell's value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.IconSet">
            <summary>
            Formats all cells based on their values by displaying an icon from the specified icon set according to cell's value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Contain">
            <summary>
            Formats only cells that contain value which satisfies the specified criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.TopOrBottomRanked">
            <summary>
            Formats only cells with top or bottom ranked values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.AboveOrBelowAverage">
            <summary>
            Formats only cells with values that are above or below average.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.UniqueOrDuplicate">
            <summary>
            Formats only cells with unique or duplicate values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Formula">
            <summary>
            Formats only cells for which the specified formula result evaluates to <see langword="true"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition">
            <summary>
            Represents a condition that formats only cells for which the specified formula result evaluates to <see langword="true"/>.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Formula"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Formula"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition.Formula">
            <summary>
            Gets or sets the formula used to determine which cells to format (only cells for which the formula result evaluates to <see langword="true"/> are formatted).
            </summary>
            <value>
            The formula used to determine which cells to format.
            </value>
            <exception cref="T:System.ArgumentException">Value is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition.Style">
            <summary>
            Gets the actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition"/>.
            </summary>
            <value>
            The actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition">
            <summary>
            Represents a condition that formats all cells based on their values by displaying an icon from the specified icon set according to cell's value.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.ShowIconOnly">
            <summary>
            <para>Gets or sets a value indicating whether to show icon only.</para>
            <para>Default value is <see langword="false"/> (cell value is shown together with icon).</para>
            </summary>
            <value>
            <see langword="true" /> to show icon only; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.Icons">
            <summary>
            Gets the icons.
            </summary>
            <value>
            The icons.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.IconSet"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.IconSet"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.ReverseIconOrder">
            <summary>
            <para>Gets or sets a value indicating whether the order of icons should be reversed.</para>
            <para>Default value is <see langword="false"/>.</para>
            </summary>
            <value>
            <see langword="true" /> if the order of icons should be reversed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.IconStyle">
            <summary>
            <para>Gets or sets the icon style for all icons contained in the <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.Icons"/> collection.</para>
            <para>If icons are of different <see cref="T:GemBox.Spreadsheet.SpreadsheetIconStyle"/> or are not ordered, then <see cref="F:GemBox.Spreadsheet.SpreadsheetIconStyle.Custom"/> is returned.</para>
            </summary>
            <value>
            The icon style for all icons contained in the <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.Icons"/> collection.
            </value>
            <exception cref="T:System.ArgumentException">Icon style is set to <see cref="F:GemBox.Spreadsheet.SpreadsheetIconStyle.None"/> or <see cref="F:GemBox.Spreadsheet.SpreadsheetIconStyle.Custom"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition">
            <summary>
            Represents a condition that formats only cells with top or bottom ranked values.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Bottom">
            <summary>
            <para>Gets or sets a value indicating whether to format cells with bottom ranked values.</para>
            <para>Default value is <see langword="false"/> (formats cells with top ranked values).</para>
            </summary>
            <value>
            <see langword="true" /> to format cells with bottom ranked values; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Percent">
            <summary>
            <para>Gets or sets a value indicating whether the <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Rank"/> value is expressed as a percentage of a number of cells in the applied range.</para>
            <para>Default value is <see langword="false"/> (the <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Rank"/> value is expressed as a number of cells).</para>
            </summary>
            <value>
            <see langword="true" /> if the <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Rank"/> value is expressed as a percentage of a number of cells in the applied range; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.TopOrBottomRanked"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.TopOrBottomRanked"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Rank">
            <summary>
            Gets or sets the number or percentage of top or bottom ranked cells which are formatted.
            </summary>
            <value>
            The number or percentage of top or bottom ranked cells which are formatted.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is less than or equal to zero.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Style">
            <summary>
            Gets the actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition"/>.
            </summary>
            <value>
            The actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition">
            <summary>
            Represents a condition that formats only cells with unique or duplicate values.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition.Duplicate">
            <summary>
            <para>Gets or sets a value indicating whether to format cells with duplicate values.</para>
            <para>Default value is <see langword="false"/> (formats cells with unique values).</para>
            </summary>
            <value>
            <see langword="true" /> to format cells with duplicate values; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition.ConditionType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.UniqueOrDuplicate"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.UniqueOrDuplicate"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition.Style">
            <summary>
            Gets the actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition"/>.
            </summary>
            <value>
            The actual formatting which will be applied to a cell if its value satisfies this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.CreateDataTableOptions">
            <summary>
            Represents options creating <see cref="T:System.Data.DataTable" /> and filling it with values from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
            <remarks>
            Use default constructor to extract used cell range.
            </remarks>
            <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)" />
            <example>
      <para>
        Following code demonstrates how to extract data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to <see cref="T:System.Data.DataTable" /> using <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)" /> method.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CreateDataTable" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CreateDataTable" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-create-datatable-from-excel/503">Create DataTable from Excel sheet in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn">
            <summary>
            Gets or sets the index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn"/> is ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfRows">
            <summary>
            Gets or sets the number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns">
            <summary>
            Gets or sets the number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns"/> is ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes">
            <summary>
            Gets a list of indexes of columns which will be extracted.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn"/> and <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns"/> are ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.Resolution">
            <summary>
            Gets or sets the resolution type that specifies how column types will be resolved in created <see cref="T:System.Data.DataTable"/>,
            see <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution"/>.
            </summary>
            <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ColumnTypeResolution.Auto"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnHeaders">
            <summary>
            Gets or sets a value indicating whether to use first row of extracted data for column headers.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ExtractDataOptions">
            <summary>
            Gets or sets <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ExtractDataOptions"/>.
            </summary>
            <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ExtractDataOptions.None"/>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions"/> class.
            </summary>
            <remarks>
            Use this constructor to extract used cell range.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions"/> class.
            </summary>
            <param name="startRow">Index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="startColumn">Index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfColumns">Number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions"/> class.
            </summary>
            <param name="startCell">Name of the first (top left) cell of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfColumns">Number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.CsvLoadOptions">
            <summary>
            Represents options for loading from Character Separated Values file format.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.HasQuotedValues">
            <summary>
            Gets or sets a value indicating whether values in CSV file can be quoted. Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.AllowNewLineInQuotes">
            <summary>
            Gets or sets a value indicating whether a new line character can be inside quotes. Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.ParseNumbers">
            <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double"/> value when loading CSV file. If <see langword="false"/>, numbers will be loaded as strings. Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.NumberStyles">
            <summary>
            Gets or sets a value indicating number styles permitted in strings when parsing them to numeric types.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvLoadOptions.#ctor(GemBox.Spreadsheet.CsvType)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvLoadOptions"/> class.
            </summary>
            <param name="csvType">Value delimiter, <see cref="T:GemBox.Spreadsheet.CsvType"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvLoadOptions.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvLoadOptions"/> class.
            </summary>
            <param name="separator">Character that will serve as value delimiter.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Separator">
            <summary>
            Gets or sets character that serves as value delimiter.
            </summary>
            <exception cref="T:System.ArgumentException">Value is set to quote '"' or new line '\n'.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Type">
            <summary>
            Gets or sets value delimiter type, see <see cref="T:GemBox.Spreadsheet.CsvType"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.ParseFormatProvider">
            <summary>
            Gets or sets the format provider for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Encoding">
            <summary>
            Gets or sets the encoding for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.CsvSaveOptions">
            <summary>
            Represents options for saving to Character Separated Values file format.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveCsv" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveCsv" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.AlwaysQuoteValues">
            <summary>
            Gets or sets a value indicating whether values in CSV file will always be quoted. Default value is false.
            </summary>
            <remarks>
            Default value of this property will be false, not true like in ExcelFile.CsvAlwaysQuoteValues.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvSaveOptions.#ctor(GemBox.Spreadsheet.CsvType)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvSaveOptions" /> class.
            </summary>
            <param name="csvType">Value delimiter, <see cref="T:GemBox.Spreadsheet.CsvType" />.</param>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveCsv" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveCsv" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvSaveOptions.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvSaveOptions"/> class.
            </summary>
            <param name="separator">Character that will serve as value delimiter.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to CSV file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.ContentType">
            <summary>
            Gets the content-type for CSV file format:
            <list type="bullet">
            <item><description><b>"text/tab-separated-values; charset=" + <see cref="P:GemBox.Spreadsheet.CsvSaveOptions.Encoding"/>.<see cref="P:System.Text.Encoding.WebName"/></b> if <see cref="P:GemBox.Spreadsheet.CsvSaveOptions.Type"/> is <see cref="F:GemBox.Spreadsheet.CsvType.TabDelimited"/>, otherwise</description></item>
            <item><description><b>"text/csv; charset=" + <see cref="P:GemBox.Spreadsheet.CsvSaveOptions.Encoding"/>.<see cref="P:System.Text.Encoding.WebName"/></b>.</description></item>
            </list>
            </summary>
            <value>
            The content-type for CSV file format.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Separator">
            <summary>
            Gets or sets character that serves as value delimiter.
            </summary>
            <exception cref="T:System.ArgumentException">Value is set to quote '"' or new line '\n'.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Type">
            <summary>
            Gets or sets value delimiter type, see <see cref="T:GemBox.Spreadsheet.CsvType"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.FormatProvider">
            <summary>
            Gets or sets the format provider for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveCsv" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveCsv" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Encoding">
            <summary>
            Gets or sets the encoding for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.CsvType">
            <summary>
            Formatting type for CSV files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CsvType.CommaDelimited">
            <summary>
            Comma delimited CSV (most frequently used). 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CsvType.SemicolonDelimited">
            <summary>
            Semicolon delimited CSV (used by Excel if current culture specifies comma as decimal separator).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CsvType.TabDelimited">
            <summary>
            Tab delimited CSV.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CustomFilter">
            <summary>
            Represents a filter that specifies one or two conditions (operators and values) and whether the two conditions are joined by 'and' or 'or'.
            </summary>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CustomFilter.Operator">
            <summary>
            Gets or sets the operator used by the (first) filter condition.
            </summary>
            <value>
            The operator used by the (first) filter condition.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.CustomFilter.And">
            <summary>
            Gets or sets the value indicating whether the two conditions have an "and" relationship.
            <see langword="true"/> indicates "and", <see langword="false"/> indicates "or" and <see langword="null"/> indicates that second condition won't be applied.
            </summary>
            <value>
            The value indicating whether the two conditions have an "and" relationship.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.CustomFilter.Operator2">
            <summary>
            Gets or sets the operator used by the second filter condition.
            </summary>
            <value>
            The operator used by the second filter condition.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.CustomFilter.FilterType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.FilterType.Custom"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.FilterType.Custom"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.CustomFilter.Value">
            <summary>
            <para>Gets or sets the value used by the (first) filter condition.</para>
            <para>The value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (<see langword="null"/> and types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            </summary>
            <value>
            The value used by the (first) filter condition.
            </value>
            <exception cref="T:System.NotSupportedException">Value's type is not supported.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CustomFilter.Value2">
            <summary>
            <para>Gets or sets the value used by the second filter condition.</para>
            <para>The value's type must be supported in <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (<see langword="null"/> and types supported in <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)"/>).</para>
            </summary>
            <value>
            The value used by the second filter condition.
            </value>
            <exception cref="T:System.NotSupportedException">Value's type is not supported.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CustomFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CustomFilter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.CustomFilter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs">
            <summary>
            Arguments for <see cref="E:GemBox.Spreadsheet.InsertDataTableOptions.DataTableCellToExcelCellConverting"/> event.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable">
            <summary>
            Gets the source <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableRowIndex">
            <summary>
            Gets the source row index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableColumnIndex">
            <summary>
            Gets the source column index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableValue">
            <summary>
            Gets the source value from <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell">
            <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCellValue">
            <summary>
            Gets or sets the value which will be inserted into destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell" /> and <see cref="P:GemBox.Spreadsheet.ExcelCell.Worksheet" /> properties instead.</para>
            <para>Gets the destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.</para>
            </summary>
            <value>
            The destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelRowIndex">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell" />, <see cref="P:GemBox.Spreadsheet.ExcelCell.Row" /> and <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Index" /> properties instead.</para>
            <para>Gets the destination row index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.</para>
            </summary>
            <value>
            The destination row index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelColumnIndex">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell" />, <see cref="P:GemBox.Spreadsheet.ExcelCell.Column" /> and <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Index" /> properties instead.</para>
            <para>Gets the destination column index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.</para>
            </summary>
            <value>
            The destination column index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidation">
            <summary>
            A single item of data validation defined on ranges of the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Type">
            <summary>
            Gets or sets the type of data validation.
            </summary>
            <value>
            The type of data validation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Operator">
            <summary>
            Gets or sets the relational operator used with this data validation.
            </summary>
            <value>
            The relational operator used with this data validation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.IgnoreBlank">
            <summary>
            Gets or sets a value indicating whether the data validation treats empty or blank entries as 
            valid. <see langword="true"/> means empty entries are OK and do not violate the validation constraints.
            </summary>
            <value>
            <see langword="true"/> if empty entries are OK and do not violate the validation constraints; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.InCellDropdown">
            <summary>
            Gets or sets a value indicating whether to display the dropdown combo box for a <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/> data validation type.
            </summary>
            <value>
            <see langword="true"/> to display the dropdown combo box for a <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/> data validation type; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Formula1">
            <summary>
            Gets or sets the first formula in the DataValidation dropdown.
            </summary>
            <value>
            The first formula in the DataValidation dropdown.
            </value>
            <remarks>
            It used as a bounds for <see cref="F:GemBox.Spreadsheet.DataValidationOperator.Between"/> and <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween"/> relational
            operators, and the only formula used for other relational operators (<see cref="F:GemBox.Spreadsheet.DataValidationOperator.Equal"/>, 
            <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotEqual"/>, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.LessThan"/>, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.LessThanOrEqual"/>,
            <see cref="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThan"/>, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThanOrEqual"/>), 
            or for <see cref="F:GemBox.Spreadsheet.DataValidationType.Custom"/> or <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/> data validation type.
            The content can be an instance of any type, but the following rules apply when formula is being written:
            <list type="table">
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.WholeNumber"/> or <see cref="F:GemBox.Spreadsheet.DataValidationType.TextLength"/>, and content is integral data type
            (<see cref="T:System.SByte"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, 
            <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>), formula will be saved as integral constant, else if formula is an 
            Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Decimal"/>, and content is floating-point data type (<see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>), formula will be saved as floating-point constant, else if formula is an 
            Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Date"/>, and content is <see cref="T:System.DateTime"/> data type, formula will be saved as 
            date constant, else if formula is an Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), 
            value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Time"/>, and content is <see cref="T:System.TimeSpan"/> data type, formula will be saved as
            time constant, else if formula is an Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), 
            value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/>, and content is any type that implements <see cref="T:System.Collections.IEnumerable"/>, 
            formula will be saved as list series (comma separated values), else if formula is an Excel formula or an Excel reference 
            (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Custom"/>, and formula is an Excel formula or an Excel reference 
            (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.None"/>, formula won't be saved.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Formula2">
            <summary>
            Gets or sets the second formula in the DataValidation dropdown.
            </summary>
            <value>
            The second formula in the DataValidation dropdown.
            </value>
            <remarks>
            It used as a bounds for <see cref="F:GemBox.Spreadsheet.DataValidationOperator.Between"/> and <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween"/> relational operators only.
            For the information about the content, see <see cref="P:GemBox.Spreadsheet.DataValidation.Formula1"/> remarks.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ShowInputMessage">
            <summary>
            Gets or sets a value indicating whether to display the input prompt message.
            </summary>
            <value>
            <see langword="true"/> to display the input prompt message; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.InputMessageTitle">
            <summary>
            Gets or sets the title bar text of input prompt.
            </summary>
            <value>
            The title bar text of input prompt.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.InputMessage">
            <summary>
            Gets or sets the message text of input prompt.
            </summary>
            <value>
            The message text of input prompt.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ShowErrorAlert">
            <summary>
            Gets or sets a value indicating whether to display the error alert message when an invalid
            value has been entered, according to the criteria specified.
            </summary>
            <value>
            <see langword="true"/> to display the error alert message when an invalid
            value has been entered; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ErrorStyle">
            <summary>
            Gets or sets the style of error alert used for this data validation.
            </summary>
            <value>
            The style of error alert used for this data validation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ErrorTitle">
            <summary>
            Gets or sets the title bar text of error alert.
            </summary>
            <value>
            The title bar text of error alert.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ErrorMessage">
            <summary>
            Gets or sets the message text of error alert.
            </summary>
            <value>
            The message text of error alert.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.CellRanges">
            <summary>
            Gets the ranges over which data validation is applied.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.ExcelWorksheet,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified worksheet and cell references on which this data validation will be applied.
            </summary>
            <param name="worksheet">The worksheet that will be used to initialize <see cref="T:GemBox.Spreadsheet.CellRange"/>s that will be added to the <see cref="P:GemBox.Spreadsheet.DataValidation.CellRanges"/> collection of this data validation.</param>
            <param name="cellReferences">The cell references from which to create <see cref="T:GemBox.Spreadsheet.CellRange"/>s.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.ExcelWorksheet,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified worksheet and cell references on which this data validation will be applied.
            </summary>
            <param name="worksheet">The worksheet that will be used to initialize <see cref="T:GemBox.Spreadsheet.CellRange"/>s that will be added to the <see cref="P:GemBox.Spreadsheet.DataValidation.CellRanges"/> collection of this data validation.</param>
            <param name="cellReferences">The cell references from which to create <see cref="T:GemBox.Spreadsheet.CellRange"/>s.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.CellRange})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified cell ranges on which this data validation will be applied.
            </summary>
            <param name="cellRanges">The cell ranges on which this data validation will be applied.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.CellRange[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified cell ranges on which this data validation will be applied.
            </summary>
            <param name="cellRanges">The cell ranges on which this data validation will be applied.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationCollection">
            <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.DataValidation"/> items.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidationCollection.InsertItem(System.Int32,GemBox.Spreadsheet.DataValidation)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidationCollection.SetItem(System.Int32,GemBox.Spreadsheet.DataValidation)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationErrorStyle">
            <summary>
            The style of data validation error alert.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Stop">
            <summary>
            This data validation error style uses a stop icon in the error alert.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Warning">
            <summary>
            This data validation error style uses a warning icon in the error alert.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Information">
            <summary>
            This data validation error style uses an information icon in the error alert.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationOperator">
            <summary>
            The relational operator used in data validation.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.Between">
            <summary>
            Data validation which checks if a value is between two other values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween">
            <summary>
            Data validation which checks if a value is not between two other values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.Equal">
            <summary>
            Data validation which checks if a value is equal to a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.NotEqual">
            <summary>
            Data validation which checks if a value is not equal to a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.LessThan">
            <summary>
            Data validation which checks if a value is less than a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.LessThanOrEqual">
            <summary>
            Data validation which checks if a value is less than or equal to a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThan">
            <summary>
            Data validation which checks if a value is greater than a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThanOrEqual">
            <summary>
            Data validation which checks if a value is greater than or equal to a specified value.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationType">
            <summary>
            Specifies the type of data validation used to validate user input.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.None">
            <summary>
            No data validation.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.WholeNumber">
            <summary>
            Data validation which checks for whole number values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Decimal">
            <summary>
            Data validation which checks for decimal values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.List">
            <summary>
            Data validation which checks for a value matching one of list of values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Date">
            <summary>
            Data validation which checks for date values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Time">
            <summary>
            Data validation which checks for time values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.TextLength">
            <summary>
            Data validation which checks for text values, whose length satisfies the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Custom">
            <summary>
            Data validation which uses a custom formula to check the cell value.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DateTimeGroup">
            <summary>
            <para>Represents a group of <see cref="P:GemBox.Spreadsheet.DateTimeGroup.DateTime"/>s.</para>
            <para>Each <see cref="P:GemBox.Spreadsheet.DateTimeGroup.DateTime"/> instance that has the same date/time components (year, month, day, hour, minute, second) as this <see cref="P:GemBox.Spreadsheet.DateTimeGroup.DateTime"/> up to <see cref="P:GemBox.Spreadsheet.DateTimeGroup.Level"/> belongs to this group.</para>
            <para>Instance of <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> can be inserted into <see cref="P:GemBox.Spreadsheet.ValuesFilter.Values"/> collection to enable filtering <see cref="P:GemBox.Spreadsheet.DateTimeGroup.DateTime"/> values.</para>
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> type with <see cref="F:GemBox.Spreadsheet.DateTimeGroupLevel.Year"/> level.
            </summary>
            <param name="year">The year.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> type with <see cref="F:GemBox.Spreadsheet.DateTimeGroupLevel.Month"/> level.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> type with <see cref="F:GemBox.Spreadsheet.DateTimeGroupLevel.Day"/> level.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> type with <see cref="F:GemBox.Spreadsheet.DateTimeGroupLevel.Hour"/> level.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> type with <see cref="F:GemBox.Spreadsheet.DateTimeGroupLevel.Minute"/> level.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> type with <see cref="F:GemBox.Spreadsheet.DateTimeGroupLevel.Second"/> level.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.DateTimeGroup.Level">
            <summary>
            Gets the grouping level of this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.
            </summary>
            <value>
            The grouping level of this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DateTimeGroup.DateTime">
            <summary>
            <para>Gets the date/time of this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</para>
            <para>Valid date/time components are only those upon to <see cref="P:GemBox.Spreadsheet.DateTimeGroup.Level"/>.</para>
            </summary>
            <value>
            The date/time of this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.Equals(GemBox.Spreadsheet.DateTimeGroup)">
            <summary>
            Determines whether the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> is equal to this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.
            </summary>
            <param name="other">The other <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> to compare with this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.</param>
            <returns><see langword="true"/> if the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> is equal to this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> and is equal to this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.op_Equality(GemBox.Spreadsheet.DateTimeGroup,GemBox.Spreadsheet.DateTimeGroup)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DateTimeGroup.op_Inequality(GemBox.Spreadsheet.DateTimeGroup,GemBox.Spreadsheet.DateTimeGroup)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.DateTimeGroupLevel">
            <summary>
            Represents a level of a <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DateTimeGroupLevel.Second">
            <summary>
            The second level.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DateTimeGroupLevel.Minute">
            <summary>
            The minute level.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DateTimeGroupLevel.Hour">
            <summary>
            The hour level.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DateTimeGroupLevel.Day">
            <summary>
            The day level.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DateTimeGroupLevel.Month">
            <summary>
            The month level.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DateTimeGroupLevel.Year">
            <summary>
            The year level.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DefinedName">
            <summary>
            Defined name class describes defined name that is not directly related with one cell range.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedName.Name">
            <summary>
            Gets or sets the name of the defined name object.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedName.LocalSheetIndex">
            <summary>
            Gets or sets the local sheet index of the defined name.
            If the local sheet index is -1, defined name is global.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedName.Value">
            <summary>
            Gets or sets the value of the defined name.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.DefinedName"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.DefinedName"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.DefinedNameCollection">
            <summary>
            Collection of defined names that are not directly related with one cell range.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Count">
            <summary>
            Returns the number of defined names in collection.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Item(System.Int32)">
            <summary>
            Gets or sets defined name described by index from collection.
            </summary>
            <param name="index">Index of the defined name.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Item(System.String)">
            <summary>
            Gets defined name described by name from collection.
            </summary>
            <param name="definedName">Name of the defined name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.AddDefinedName(System.String,System.String,System.Int32)">
            <summary>
            Adds defined name to collection and returns index of that defined name.
            </summary>
            <param name="name">Name of the defined name.</param>
            <param name="value">Range string.</param>
            <param name="localSheetIndex">Local sheet index. If the value is -1, defined name is global.</param>
            <returns>Index of the defined name.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.RemoveDefinedName(System.String)">
            <summary>
            Removes the defined name described by name from collection.
            </summary>
            <param name="definedName">Name of the defined name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.RemoveDefinedNameAt(System.Int32)">
            <summary>
            Removes the defined name described by index from collection.
            </summary>
            <param name="index">Index of the defined name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.Clear">
            <summary>
            Removes all elements from defined names collection.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection. 
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for the collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.DigitalSignatureSaveOptions">
            <summary>
            Represents a class that stores details for signing a workbook with a digital signature.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.Certificate">
            <summary>
            <para>Gets or sets the X.509 certificate.</para>
            <para>Value must be of type System.Security.Cryptography.X509Certificates.X509Certificate2.</para>
            </summary>
            <value>
            The X.509 certificate.
            </value>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2">System.Security.Cryptography.X509Certificates.X509Certificate2</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.CertificateBytes">
            <summary>
            Gets or sets the byte array that contains data from an X.509 certificate.
            </summary>
            <value>
            The byte array that contains data from an X.509 certificate.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.CertificatePath">
            <summary>
            Gets or sets the file path to the X.509 certificate.
            </summary>
            <value>
            The file path to the X.509 certificate.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.UseMachineKeySet">
            <summary>
            Gets or sets a value indicating whether private keys are stored in the local computer store rather than the current user store.
            </summary>
            <value>
              <see langword="true" /> if private keys are stored in the local computer store rather than the current user store; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.CertificatePassword">
            <summary>
            Gets or sets the password required to access the X.509 certificate data.
            </summary>
            <value>
            The password required to access the X.509 certificate data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.Location">
            <summary>
            Gets or sets the CPU host name or physical location of the signing.
            </summary>
            <value>
            The CPU host name or physical location of the signing.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.Reason">
            <summary>
            Gets or sets the reason for the signing.
            </summary>
            <value>
            The reason for the signing, such as ( I agree … ).
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.ContactInfo">
            <summary>
            Gets or sets the contact information.
            </summary>
            <value>
            Information provided by the signer to enable a recipient to contact the signer 
            to verify the signature; for example, a phone number.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.DocumentProperties">
            <summary>
            Contains a collection of built-in and custom document properties.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DocumentProperties.BuiltIn">
            <summary>
            Gets a collection of built-in document properties.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DocumentProperties.Custom">
            <summary>
            Gets a collection of custom document properties.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DocumentProperties.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.Spreadsheet.DocumentProperties"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.Spreadsheet.DocumentProperties"/>.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.DynamicFilter">
            <summary>
            Represents a dynamic filter criteria that can change, either with the data itself (e.g., "above average") or with the current system date (e.g., show values for "today"). 
            </summary>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.DynamicFilter.DynamicFilterType">
            <summary>
            Gets or sets the dynamic filter type.
            </summary>
            <value>
            The dynamic filter type.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DynamicFilter.FilterType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.FilterType.Dynamic"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.FilterType.Dynamic"/> value.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.DynamicFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.DynamicFilter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.DynamicFilter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.DynamicFilterType">
            <summary>
            Represents a dynamic filter type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Null">
            <summary>
            Common filter type not available.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.AboveAverage">
            <summary>
            Shows values that are above average.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.BelowAverage">
            <summary>
            Shows values that are below average.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.LastWeek">
            <summary>
            Shows last week's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.LastMonth">
            <summary>
            Shows last month's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.LastQuarter">
            <summary>
            Shows last quarter's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.LastYear">
            <summary>
            Shows last year's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.ThisWeek">
            <summary>
            Shows this week's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.ThisMonth">
            <summary>
            Shows this month's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.ThisQuarter">
            <summary>
            Shows this quarter's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.ThisYear">
            <summary>
            Shows this year's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.NextWeek">
            <summary>
            Shows next week's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.NextMonth">
            <summary>
            Shows next month's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.NextQuarter">
            <summary>
            Shows next quarter's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.NextYear">
            <summary>
            Shows next year's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Yesterday">
            <summary>
            Shows yesterday's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Today">
            <summary>
            Shows today's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Tomorrow">
            <summary>
            Shows tomorrow's dates.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.YearToDate">
            <summary>
            Shows the dates between the beginning of the year and today, inclusive.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month1">
            <summary>
            Shows the dates that are in January, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month2">
            <summary>
            Shows the dates that are in February, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month3">
            <summary>
            Shows the dates that are in March, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month4">
            <summary>
            Shows the dates that are in April, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month5">
            <summary>
            Shows the dates that are in May, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month6">
            <summary>
            Shows the dates that are in June, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month7">
            <summary>
            Shows the dates that are in July, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month8">
            <summary>
            Shows the dates that are in August, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month9">
            <summary>
            Shows the dates that are in September, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month10">
            <summary>
            Shows the dates that are in October, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month11">
            <summary>
            Shows the dates that are in November, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Month12">
            <summary>
            Shows the dates that are in December, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Quarter1">
            <summary>
            Shows the dates that are in the 1st quarter, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Quarter2">
            <summary>
            Shows the dates that are in the 2nd quarter, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Quarter3">
            <summary>
            Shows the dates that are in the 3rd quarter, regardless of year.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DynamicFilterType.Quarter4">
            <summary>
            Shows the dates that are in the 4th quarter, regardless of year.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCell">
            <summary>
            Excel cell provides access to a single worksheet cell or to a merged range if the cell is merged.
            </summary>
            <remarks>
            <para>Merged range is created by using <see cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</see> property. 
            See the property documentation for more information on merging.</para>
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange"/>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Worksheet">
            <summary>
            Gets the parent worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Row">
            <summary>
            Gets row of the cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Column">
            <summary>
            Gets column of the cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Value">
            <summary>
            Gets or sets value of this cell or of merged range if this cell is merged.
            </summary>
            <remarks>
            <para>Exception is thrown if value for the set is not of supported type (See 
            <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</see> for details).</para>
            <para>Note that the fact some type is supported doesn't mean it is written to Excel file in the native format. As
            Microsoft Excel has just few basic types, the object of supported type will be converted to a similar excel type. 
            If similar excel type doesn't exist, value is written as a string value.</para>
            <para>If the value of this property is of <see cref="T:System.DateTime"/> type and 
            <see cref="P:GemBox.Spreadsheet.AbstractRange.Style"/> number format is not set, ISO date/time 
            format will be used as <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</see> 
            value.</para>
            </remarks>
            <exception cref="T:System.NotSupportedException">Value is not supported.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange"/>
            <seealso cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</seealso>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.ValueType">
            <summary>
            Gets the cell value type.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.BoolValue">
            <summary>
            Gets the boolean value of this cell or of merged range if this cell is merged.
            </summary>
            <returns>The boolean value.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.IntValue">
            <summary>
            Gets the integer value of this cell or of merged range if this cell is merged.
            </summary>
            <returns>The integer value.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.DoubleValue">
            <summary>
            Gets the double value of this cell or of merged range if this cell is merged.
            </summary>
            <returns>The double value.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.DateTimeValue">
            <summary>
            Gets the DateTime value of this cell or of merged range if this cell is merged.
            </summary>
            <returns>The DateTime value.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.StringValue">
            <summary>
            Gets the string value of this cell or of merged range if this cell is merged.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Comment">
            <summary>
            Gets or sets cell comment.
            </summary>
            <remarks>
            <para>
            You can set comment text, set whether comment will be visible when opening xlsx file or not.
            Additionally you can get column or row of the excel cell to which this comment is assigned.
            </para>
            <para>
            Supported only in xlsx.
            </para>
            </remarks>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Comment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Comment" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.HasCommentInternal">
            <summary>
            Used for performance reason! Works without creating ExcelComment editor instance.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Hyperlink">
            <summary>
            Gets or sets cell hyperlink.
            </summary>
            <remarks>
            <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
            <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
            </remarks> 
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.HasHyperlinkInternal">
            <summary>
            Used for performance reason! Works without creating SpreadsheetHyperlink editor instance.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Formula">
            <summary>
            Gets or sets cell formula string.
            </summary>
            <remarks>
            <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed below.</para>
            <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
            <para>Depending on <see cref="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            ExcelFile.DelayFormulaParse</see> property, formula string can be parsed when this property is set
            or when one of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            ExcelFile.SaveXls</see> methods is called.</para>
            <para>GemBox.Spreadsheet formula parser will use English culture to parse numbers.</para>
            <para>
            Currently unsupported formula features are:
            <list type="bullet">
            <item><description>Const array</description></item>
            <item><description>Array formula</description></item>
            <item><description>R1C1 reference</description></item>
            </list>
            </para>
            <para>
            Currently supported functions in XLS format are: ABS, ACOS, ACOSH, ADDRESS, AND, ARCTAN, AREAS, ASC, ASIN, ASINH, ATAN2, ATANH, AVEDEV, AVERAGE, AVERAGEA, BETADIST, BETAINV, BINOMDIST, CEILING, CELL, CHAR, CHIDST, CHIINV, CHOOSE, CLEAN, CODE, COLUMN, COLUMNS, COMBIN, CONCATENATE, CONFIDENCE, COS, COSH, COUNT, COUNTA, COUNTBLANK, COUNTIF, CRITBINOM, DATE, DATEDIF, DATESTRING, DATEVALUE, DAVERAGE, DAY, DAYS360, DB, DBSC, DCOUNT, DCOUNTA, DDB, DEGREES, DEVSQ, DGET, DMAX, DMIN, DOLLAR, DPRODUCT, DSTDEV, DSTDEVP, DSUM, DVAR, DVARP, EVEN, EXACT, EXP, EXPONDIST, FACT, FDIST, FIND, FINDB, FINV, FISHER, FISHERINV, FIXED, FLOOR, FV, GAMMADIST, GAMMAINV, GAMMALN, GEOMEAN, GROWTH, HARMEAN, HLOOKUP, HOUR, HYPERLINK, HYPGEOMVERT, IF, INDEX, INDIRECT, INFO, INT, IPMT, IRR, ISBLANK, ISERR, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISNUMBER, ISPMT, ISREF, ISTEXT, KURT, LARGE, LEFT, LEFTB, LEN, LENB, LINEST, LN, LOG, LOG10, LOGEST, LOGINV, LOOKUP, LOWER, MATCH, MAX, MAXA, MDETERM, MEDIAN, MID, MIDB, MIN, MINA, MINUTE, MINVERSE, MIRR, MNORMSINV, MOD, MODE, MONTH, N, NA, EGBINOMDIST, NORMDIST, NORMINV, NORMSDIST, NORMSDIST, NOT, NOW, NPER, NPV, NUMBERSTRING, ODD, OFFSET, OR, PERCENTILE, PERCENTRANK, PERMUT, PHONETIC, PI, PMT, POISSON, POWER, PPMT, PRODUCT, PROPER, PV, QUARTILE, RADIANS, RAND, RANK, RATE, REPLACE, REPLACEB, REPT, RIGHT, RIGHTB, ROMAN, ROUND, ROUNDDOWN, ROUNDUP, ROW, ROWS, SEARCH, SEARCHB, SECOND, SIGN, SIN, SINH, SKEW, SLN, SMALL, SQRT, STANDARDIZE, STDEV, STDEVA, STDEVP, STDEVPA, SUBSTITUTE, SUBTOTAL, SUM, SUMIF, SUMSQ, SYD, T, TAN, TANH, TDIST, TEXT, TIME, TIMEVALUE, TINV, TODAY, TRANSPOSE, TREND, TRIM, TRIMMEAN, TRUNC, TYPE, UPPER, USDOLLAR, VALUE, VAR, VARA, VARP, VARPA, VDB, VLOOKUP, WEEKDAY, WEIBULL, YEAR, ZTEST, FALSE, TRUE.
            </para>
            <para>
            For more information on formulas, consult Microsoft Excel documentation.
            </para>
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges. At the end, code shows how to calculate worksheet formulas.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Formula" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Formula" />
    </example>
            <seealso cref="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange)">
            NamedRangeCollection.Add</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.Calculate">
            <summary>
            Calculates formula for this excel cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.MergedRange">
            <summary>
            Returns associated merged range if the cell is merged; otherwise, <see langword="null"/>.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.GetFormattedValue">
            <summary>
            Converts <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">cell value</see> of this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance to string representation using <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> 
            that is specified on this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance.
            </summary>
            <returns>Formatted <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">cell value.</see></returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.SetValue(System.Boolean)">
            <summary>
            Sets the boolean value to this cell or to merged range if this cell is merged.
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.SetValue(System.Int32)">
            <summary>
            Sets the integer value to this cell or to merged range if this cell is merged.
            </summary>
            <param name="value">The integer value.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.SetValue(System.Double)">
            <summary>
            Sets the double value to this cell or to merged range if this cell is merged.
            </summary>
            <param name="value">The double value.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.SetValue(System.DateTime)">
            <summary>
            Sets the DateTime value to this cell or to merged range if this cell is merged.
            </summary>
            <param name="value">The DateTime value.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.SetValue(System.String)">
            <summary>
            Sets the string value to this cell or to merged range if this cell is merged.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.SetValue(System.String,GemBox.Spreadsheet.HtmlLoadOptions)">
            <summary>
            Loads the specified HTML text as the value of this <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.
            </summary>
            <param name="html">The HTML text which should be loaded as the value of this <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.</param>
            <param name="options">The options used to define settings for load operation.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.Insert(GemBox.Spreadsheet.InsertShiftDirection)">
            <summary>
            Inserts a cell by shifting cells in the specified direction.
            </summary>
            <param name="direction">The shift direction.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.Remove(GemBox.Spreadsheet.RemoveShiftDirection)">
            <summary>
            Removes a cell by shifting cells in the specified direction.
            </summary>
            <param name="direction">The shift direction.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.ExcelCell"/> and is equal to this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.op_Equality(GemBox.Spreadsheet.ExcelCell,GemBox.Spreadsheet.ExcelCell)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelCell"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelCell"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.op_Inequality(GemBox.Spreadsheet.ExcelCell,GemBox.Spreadsheet.ExcelCell)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelCell"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelCell"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.ConvertExcelNumberToDateTime(System.Double,System.Boolean)">
            <summary>
            Converts Excel floating-point number to <see cref="T:System.DateTime"/> structure.
            </summary>
            <remarks>
            <para>
            Excel file format doesn't have a separate data type for date and time. 
            <see cref="T:System.DateTime"/> value is
            stored as IEEE number encoded in a special way. When reading Excel file, 
            <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</see> is examined and if it matches 
            some of date/time number formats cell value is interpreted as <see cref="T:System.DateTime"/>.</para>
            <para>However, if some non-standard date/time number format is used, cell value will not be recognized 
            as <see cref="T:System.DateTime"/> but as ordinary number. In such cases (when you know that
            specific cell holds <see cref="T:System.DateTime"/> value but you get a number when reading
            Excel file) use this method to convert IEEE number to <see cref="T:System.DateTime"/> 
            structure.</para>
            </remarks>
            <param name="num">Excel floating-point number.</param>
            <param name="use1904DateSystem">True to use 1904 date system.</param>
            <returns>Converted DateTime structure.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.HasComment">
            <summary>
            If cell has comment returns true, else returns false.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.HasHyperlink">
            <summary>
            If cell has hyperlink returns true, else returns false.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCellCollection">
            <summary>
            Collection of excel cells (<see cref="T:GemBox.Spreadsheet.ExcelCell"/>).
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelCellCollection.syncIndex">
            <summary>
            Used as part of cell synchronization mechanism.
            It is compared against worksheet index on each get/set operation. If different, fresh reference to ExcelCellData must be retrieved from the storage.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellCollection.Item(System.Int32)">
            <exclude/>
            <summary>
            Gets the cell with the specified index.
            </summary>
            <param name="index">The zero-based index of the cell.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellCollection.Count">
            <summary>
            Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks).
            </summary>
            <remarks>
            The cells are internally allocated in rows and not in columns. In other words, when you load CSV/XLS/XLSX or 
            access some cells via worksheet.Cells property new rows and cells can be allocated but the column count 
            will stay the same. To find last used column in the worksheet, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange">ExcelWorksheet.GetUsedCellRange</see> method.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCellCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellCollection.GetEnumeratorCore">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCellDataType">
            <summary>
            Enumerates cell types.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelCellDataType.BlankCellData">
            <summary>
            Cell with style and no value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelCellDataType.LightCellData">
            <summary>
            Cell with simple value (int, double, string, etc.), plus style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelCellDataType.RichCellData">
            <summary>
            Merged cell or cell with comment/hyperlink/formula, plus style.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs">
            <summary>
            Arguments for <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting"/> event.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable">
            <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableColumnIndex">
            <summary>
            Gets the destination column index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableColumnType">
            <summary>
            Gets the destination column type in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue">
            <summary>
            Gets or sets the value which will be inserted into destination <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/> cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.IsDataTableValueValid">
            <summary>
            Gets a value indication whether current <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue"/> can be converted into <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/> cell.
            </summary>
            <remarks>
            If this value is false, you need to set an appropriate <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue"/> before exiting event handler or
            <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> will be thrown.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCell">
            <summary>
            Gets the source <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCell"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.Action">
            <summary>
            Gets or sets the action which will be executed after event, see <see cref="T:GemBox.Spreadsheet.ExtractDataEventAction"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCell" /> and <see cref="P:GemBox.Spreadsheet.ExcelCell.Worksheet" /> properties instead.</para>
            <para>Gets the source <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.</para>
            </summary>
            <value>
            The source <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelRowIndex">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCell" />, <see cref="P:GemBox.Spreadsheet.ExcelCell.Row" /> and <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Index" /> properties instead.</para>
            <para>Gets the source row index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.</para>
            </summary>
            <value>
            The source row index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelColumnIndex">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCell" />, <see cref="P:GemBox.Spreadsheet.ExcelCell.Column" /> and <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Index" /> properties instead.</para>
            <para>Gets the source column index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.</para>
            </summary>
            <value>
            The source column index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCellValue">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCell" /> and <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> properties instead.</para>
            <para>Gets the source value from <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.</para>
            </summary>
            <value>
            The source value from <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelColumn">
            <summary>
            Excel column contains column options and cell range with column cells.
            </summary>
            <remarks>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns" /> method.</para>
            </remarks>
            <seealso cref="T:GemBox.Spreadsheet.ExcelRow" />
            <example>
      <para>
        Following code shows how to get hidden columns and shows how to get number of columns occupied with data.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="ColumnCollection" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="ColumnCollection" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumn.Width">
            <summary>
            Gets or sets column width.
            </summary>
            <remarks>
            Unit is 1/256th of the width of the zero character in default font.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultColumnWidth"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.CreateCells">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit(System.Double)">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit(System.Double,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Automatically fits column width by checking only the cells in the column that are specified by row range.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
            <param name="firstRow">First row.</param>
            <param name="lastRow">Last row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.GetWidth(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the width of column in arbitrary length unit.
            </summary>
            <param name="lengthUnit">The length unit in which to return column width.</param>
            <returns>The width of column in arbitrary length unit.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.SetWidth(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the width of column in arbitrary length unit.
            </summary>
            <param name="value">Column width value.</param>
            <param name="lengthUnit">The length unit in which <paramref name="value"/> is specified.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFitAdvanced(System.Single)">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFitAdvanced(System.Single,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Automatically fits column width by checking only the cells in the column that are specified by row range.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
            <param name="firstRow">First row.</param>
            <param name="lastRow">Last row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.Delete">
            <summary>
            Deletes this column from the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelColumn)">
            <summary>
            Inserts specified number of copied columns before the current column.
            </summary>
            <param name="columnCount">Number of columns to insert.</param>
            <param name="sourceColumn">Source column to copy.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.InsertEmpty(System.Int32)">
            <summary>
            Inserts specified number of empty columns before the current column.
            </summary>
            <param name="columnCount">Number of columns to insert.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelColumnCollection">
            <summary>
            Collection of excel columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn" />).
            </summary>
            <remarks>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns" /> method.</para>
            </remarks>
            <seealso cref="T:GemBox.Spreadsheet.ExcelColumn" />
            <example>
      <para>
        Following code shows how to get hidden columns and shows how to get number of columns occupied with data.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="ColumnCollection" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="ColumnCollection" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column with the specified index.
            </summary>
            <param name="index">The zero-based index of the column.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.Remove(System.Int32)">
            <summary>
            Removes the column with the specified index.
            </summary>
            <param name="columnIndex">The zero-based index of the column.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes specified number of columns starting at the specified index.
            </summary>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="columnCount">Number of columns to remove.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.InsertEmpty(System.Int32)">
            <summary>
            Inserts empty column at the specified index.
            </summary>
            <param name="columnIndex">The zero-based index of the column.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.InsertEmpty(System.Int32,System.Int32)">
            <summary>
            Inserts specified number of empty columns at the specified index.
            </summary>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="columnCount">Number of columns to insert.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelColumn)">
            <summary>
            Inserts copied column at the specified index.
            </summary>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="sourceColumn">Source column to copy.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.InsertCopy(System.Int32,System.Int32,GemBox.Spreadsheet.ExcelColumn)">
            <summary>
            Inserts specified number of copied columns at the specified index.
            </summary>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="columnCount">Number of columns to insert.</param>
            <param name="sourceColumn">Source column to copy.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.AdjustArraySize(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ParseName(System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixMergedRegionsIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixNamedRegionsIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixFormulaReferencesIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixPageBreaksIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixTableIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixDataValidationIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixConditionalFormatRuleIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnCollection.GetEnumerableCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.DeleteInternalCore(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ColumnNameToIndex(System.String)">
            <summary>
            Converts column name ("A", "B", ...) to column index (0, 1, ...).
            </summary>
            <param name="name">Column name.</param>
            <returns>Column index for the specified name.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ColumnIndexToName(System.Int32)">
            <summary>
            Converts column index (0, 1, ...) to column name ("A", "B", ...).
            </summary>
            <param name="columnIndex">Column index.</param>
            <returns>Column name for the specified index.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelColumnRowBase">
            <summary>
            Base class for the excel column and row classes.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.#ctor(GemBox.Spreadsheet.ExcelWorksheet,System.Int32)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells">
            <summary>
            Gets cell range with column / row cells.
            </summary>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellReferencing" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellReferencing" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells" />
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Index">
            <summary>
            Gets the row / column zero-based index which represents its position in a worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Name">
            <summary>
            Gets the name of <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance.
            </summary>
            <remarks>
            A row name includes row number. For example, the name of row 0 is "1".
            A column name includes column letter. For example, the name of column 0 is "A".
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">
            <summary>
            Gets or sets the cell formatting of cells in this column / row.
            </summary>
            <value>
            The cell formatting of cells in this column / row.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed">
            <summary>
            Gets or sets whether object is collapsed in outlining.
            </summary>
            <remarks>
            <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
            <para><see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" /> property needs to be set to correct outline level.</para>
            <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" /> property 
            needs to be set to <see langword="true" />.</para>
            <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" /> property needs to be set to <see langword="true" />.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="GroupingAndOutline" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="GroupingAndOutline" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" />
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel">
            <summary>
            Gets or sets outline level.
            </summary>
            <remarks>
            <para>Exception is thrown if value is out of 0 to 7 range.</para>
            <para>Using this property you can create hierarchical groups. Range of consecutive objects (rows or columns) 
            with the same value of outline level belongs to the same group. Default value is zero, which prevents grouping.</para>
            <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
            <para><see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" /> property needs to be set to correct outline level.</para>
            <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" /> property 
            needs to be set to <see langword="true" />.</para>
            <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" /> property needs to be set to <see langword="true" />.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="GroupingAndOutline" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="GroupingAndOutline" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" />
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 0 to 7 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden">
            <summary>
            Gets or sets whether excel object is hidden.
            </summary>
            <remarks>
            <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
            <para><see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel"/> property needs to be set to correct outline level.</para>
            <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden"/> property 
            needs to be set to <see langword="true"/>.</para>
            <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed"/> property needs to be set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.ExtentEmuVisible">
            <summary>
            Gets the extent in EMU. If row/column is hidden, 0.
            </summary>
            <value>
            The extent in EMU. If row/column is hidden, 0.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.CreateCells">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> and is equal to this <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.op_Equality(GemBox.Spreadsheet.ExcelColumnRowBase,GemBox.Spreadsheet.ExcelColumnRowBase)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.op_Inequality(GemBox.Spreadsheet.ExcelColumnRowBase,GemBox.Spreadsheet.ExcelColumnRowBase)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.IsStyleDefault">
            <summary>
            Returns <see langword="true"/> if style is default; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelComment">
            <summary>
            Represents a comment object used by <see cref="P:GemBox.Spreadsheet.ExcelCell.Comment" /> in the worksheet.
            </summary>
            <remarks>Supported only in xlsx.</remarks>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Comment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Comment" />
    </example>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelComment.key">
            <summary>
            The key of ExcelCommentData instance.
            Only the following types are supported:
            - ExcelCell, if instantiated from ExcelCell.Comment property,
            - ExcelRichCellData, if instantiated from ExcelCommentCollection.GetEnumerator() method,
            - MergedCellRange, if instantiated from MergedCellRange.Comment property
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.Exists">
            <summary>
            If comment exists returns true, otherwise returns false.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.Text">
            <summary>
            Gets the comment text assigned to excel cell
            </summary>
            <value>The comment text assigned to excel cell.</value>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Comment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Comment" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.Author">
            <summary>
            Gets or sets comment author.
            </summary>
            <value>Comment author.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<see langword="true" /> if this instance is visible; otherwise, <see langword="false" />.
            </value>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Comment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Comment" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.TopLeftCell">
            <summary>
            Gets or sets the top left anchor cell for the comment shape.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.BottomRightCell">
            <summary>
            Gets or sets the bottom right anchor cell for the comment shape.
            </summary>        
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelComment.GetCharacters(System.Int32)">
            <summary>
            Returns a <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object that represents a range of characters within the comment text.
            The range starts at a specified character position.
            Supported in XLSX only.
            </summary>
            <param name="startIndex">The zero-based starting character position.</param>
            <returns>New <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="startIndex"/> is less than zero or is equal to or greater than 32767.</exception>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-comments/208">ExcelCell Comments example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelComment.GetCharacters(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object that represents a range of characters within the comment text.
            The range starts at a specified character position and has a specified length.
            Supported in XLSX only.
            </summary>
            <param name="startIndex">The zero-based starting character position.</param>
            <param name="length">The number of characters.</param>
            <returns>New <see cref="T:GemBox.Spreadsheet.FormattedCharacterRange"/> object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="startIndex"/> is less than zero or is equal to or greater than 32767.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="length"/> is equal to or less than zero or is greater than 32767.</exception>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-comments/208">ExcelCell Comments example</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelComment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.ExcelComment"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.ExcelComment"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.ExcelComment"/> and is equal to this <see cref="T:GemBox.Spreadsheet.ExcelComment"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelComment.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.ExcelComment"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.ExcelComment"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelComment.op_Equality(GemBox.Spreadsheet.ExcelComment,GemBox.Spreadsheet.ExcelComment)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelComment"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ExcelComment"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ExcelComment"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelComment"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelComment.op_Inequality(GemBox.Spreadsheet.ExcelComment,GemBox.Spreadsheet.ExcelComment)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelComment"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.ExcelComment"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.ExcelComment"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.ExcelComment"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCommentCollection">
            <summary>
            Collection of comments (<see cref="T:GemBox.Spreadsheet.ExcelComment"/>).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelCommentCollection.dictionary">
            <summary>
            Ordered dictionary supporting objects of following types as keys: ExcelRichCellData and MergedCellRange.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelCommentCollection.SyncIndex">
            <summary>
            Used as part of cell synchronization mechanism.
            It is incremented by one each time the structure of dictionary or worksheet is changed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCommentCollection.Item(System.Int32)">
            <summary>
            Gets the comment at the specified index.
            </summary>
            <param name="index">The zero-based index of the comment.</param>
            <returns>The comment at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCommentCollection.Count">
            <summary>
            Gets the number of comments contained in the collection. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCommentCollection.Clear">
            <summary>
            Removes all comments. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCommentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the comment at the specified index.
            </summary>
            <param name="index">The zero-based index of the comment to remove.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCommentCollection.Contains(GemBox.Spreadsheet.ExcelCommentData)">
            <summary>
            Determines whether a comment is in the collection.
            </summary>
            <param name="comment">The comment to locate in the collection.</param>
            <returns>True if comment is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCommentCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCommentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCommentData.Text">
            <summary>
            Gets the comment text assigned to excel cell
            </summary>
            <value>The comment text assigned to excel cell.</value>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Comment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Comment" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCommentData.Author">
            <summary>
            Gets or sets comment author.
            </summary>
            <value>Comment author.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCommentData.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<see langword="true" /> if this instance is visible; otherwise, <see langword="false" />.
            </value>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Comment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Comment" />
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelDrawing">
            <summary>
            Represents a base class for all drawings (pictures, charts, etc.) in the worksheet.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelPicture"/>
            <seealso cref="T:GemBox.Spreadsheet.Charts.ExcelChart"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawing.Position">
            <summary>
            Gets the position of this drawing (picture, chart, etc.) in the worksheet.
            </summary>
            <value>
            The position of this drawing (picture, chart, etc.) in the worksheet.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawing.Metadata">
            <summary>
            Gets the metadata (non-visual properties) of this <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> instance.
            </summary>
            <value>
            The metadata (non-visual properties) of this <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> instance.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawing.Hyperlink">
            <summary>
            Gets or sets the hyperlink on this drawing (picture, chart, etc.).
            </summary>
            <value>
            The hyperlink on this drawing (picture, chart, etc.).
            </value>
            <remarks>Supported only in XLSX.</remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawing.HasHyperlink">
            <summary>
            Gets a value indicating whether this drawing (picture, chart, etc.) has hyperlink.
            </summary>
            <value>
            <see langword="true" /> if this drawing (picture, chart, etc.) has hyperlink; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelDrawingCollection`1">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.ExcelDrawing">drawings</see> (pictures, charts, etc.) in the worksheet.
            </summary>
            <typeparam name="T">An <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> derived type.</typeparam>
            <see cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/>
            <see cref="T:GemBox.Spreadsheet.Charts.ExcelChartCollection"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">ExcelWorksheet.Pictures</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Charts">ExcelWorksheet.Charts</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.#ctor(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.ExcelDrawingCollection{`0})">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <value>
            The element at the specified index.
            </value>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.AddCopy(`0)">
            <summary>
            Adds a copy of the drawing (picture, chart, etc.) to the worksheet.
            </summary>
            <param name="item">The drawing (picture, chart, etc.) which will be copied to the worksheet.</param>
            <returns>A copy of the drawing (picture, chart, etc.) added to the worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            <para>Moves the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> at the specified index to a new location in the collection thus affecting its Z-index.</para>
            <para>Drawings at the lower location in the collection have a lower Z-index and are drawn before drawings at the higher location in the collection.</para>
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelDrawingMetadata">
            <summary>
            Represents a set of non-visual properties which shall be applied to the parent <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingMetadata.Id">
            <summary>
            Gets a unique identifier for the current drawing within the worksheet.
            </summary>
            <value>
            A unique identifier for the current drawing within the worksheet.
            </value>
            <remarks>
            This ID may be used to assist in uniquely identifying this drawing so that it can be referred to by other parts of the workbook.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingMetadata.Description">
            <summary>
            Gets or sets the alternative text for the current drawing, for use by assistive technologies or applications which will not display the current drawing.
            </summary>
            <value>
            The alternative text for the current drawing, for use by assistive technologies or applications which will not display the current drawing.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingMetadata.Name">
            <summary>
            Gets or sets the name for the current drawing.
            </summary>
            <value>
            The name for the current drawing.
            </value>
            <exception cref="T:System.ArgumentException">Drawing's name cannot be empty.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingMetadata.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelDrawingMetadata"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelDrawingMetadata"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelDrawingPosition">
            <summary>
            Represents a class which holds information about position and size of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode">
            <summary>
            Gets or sets the positioning mode of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </summary>
            <value>
            The positioning mode of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.From">
            <summary>
            Gets or sets the anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) spans from.
            </summary>
            <value>
            The anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) spans from.
            </value>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> is <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>, then:</para>
            <list type="bullet">
            <item><description>getter returns new instance of <see cref="T:GemBox.Spreadsheet.AnchorCell"/> for every request and changing that instance won't affect on the position of the drawing (picture, chart, etc.).</description></item>
            <item><description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top"/> properties, which are calculated by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s and <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of columns and rows in the worksheet.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.To">
            <summary>
            Gets or sets the anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) spans to.
            </summary>
            <value>
            The anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) spans to.
            </value>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> is <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/> or <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>, then:</para>
            <list type="bullet">
            <item><description>getter returns new instance of <see cref="T:GemBox.Spreadsheet.AnchorCell"/> for every request and changing that instance won't affect on the position of the drawing (picture, chart, etc.).</description></item>
            <item><description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height"/> properties, which are calculated by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s and <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of columns and rows in the worksheet.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left">
            <summary>
            Gets or sets the distance (in points) of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the left edge of the worksheet.
            </summary>
            <value>
            The distance (in points) of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the left edge of the worksheet.
            </value>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> is <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/> or <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>, then:</para>
            <list type="bullet">
            <item><description>getter calculates the distance from the left edge of the worksheet for every request by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s of columns in the worksheet.</description></item>
            <item><description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.From"/> property.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top">
            <summary>
            Gets or sets the distance (in points) of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the top edge of the worksheet.
            </summary>
            <value>
            The distance (in points) of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the top edge of the worksheet.
            </value>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> is <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/> or <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>, then:</para>
            <list type="bullet">
            <item><description>getter calculates the distance from the top edge of the worksheet for every request by using <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of rows in the worksheet.</description></item>
            <item><description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.From"/> property.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width">
            <summary>
            Gets or sets the width (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </summary>
            <value>
            The width (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </value>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> is <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>, then:</para>
            <list type="bullet">
            <item><description>getter calculates the width for every request by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s of columns in the worksheet.</description></item>
            <item><description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.To"/> property.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height">
            <summary>
            Gets or sets the height (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </summary>
            <value>
            The height (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </value>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> is <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>, then:</para>
            <list type="bullet">
            <item><description>getter calculates the height for every request by using <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of rows in the worksheet.</description></item>
            <item><description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.To"/> property.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetLeft(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the distance of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the left edge of the worksheet.
            </summary>
            <param name="unit">The length unit of the returned value.</param>
            <returns>The distance of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the left edge of the worksheet.</returns>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetTop(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the distance of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the top edge of the worksheet.
            </summary>
            <param name="unit">The length unit of the returned value.</param>
            <returns>The distance of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the top edge of the worksheet.</returns>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetWidth(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the width of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </summary>
            <param name="unit">The length unit of the returned value.</param>
            <returns>The width of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).</returns>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetHeight(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the height of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </summary>
            <param name="unit">The length unit of the returned value.</param>
            <returns>The height of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).</returns>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetLeft(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the distance of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the left edge of the worksheet.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The length unit of the <paramref name="value"/> parameter.</param>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetTop(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the distance of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) from the top edge of the worksheet.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The length unit of the <paramref name="value"/> parameter.</param>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetWidth(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the width of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The length unit of the <paramref name="value"/> parameter.</param>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetHeight(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the height of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.).
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The length unit of the <paramref name="value"/> parameter.</param>
            <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height" select="remarks"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelDrawingPosition"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelDrawingPosition"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelEmbeddedObject">
            <summary>
            Represents a read-only embedded object in the worksheet.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.EmbeddedObjects">ExcelWorksheet.EmbeddedObjects</seealso>	
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelEmbeddedObject.Data">
            <summary>
            Gets the embedded object data.
            </summary>
            <value>
            The embedded object data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelEmbeddedObject.ContentType">
            <summary>
            Gets the content type of the embedded object data.
            </summary>
            <value>
            The content type of the embedded object data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelEmbeddedObject.Position">
            <summary>
            Gets the position of this embedded object in the worksheet.
            </summary>
            <value>
            The position of this embedded object in the worksheet.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelEmbeddedObject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" /> instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" /> instance.
            </returns>
            <remarks>
            This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection">
            <summary>
            Represents a read-only collection of <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject">embedded object</see>s in the worksheet.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.EmbeddedObjects">ExcelWorksheet.EmbeddedObjects</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" />s contained in the <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection" />.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" />s contained in the <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" /> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" /> to get.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObject" /> at the specified index.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection" />.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.ExcelEmbeddedObjectCollection" />.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelFile">
            <summary>
            Excel file contains one or more worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>)
            and workbook related properties and methods.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.AutomaticFormulaUpdate">
            <summary>
            Gets or sets a value indicating whether the formula address references are automatically updated.
            </summary>
            <remarks>
            <para>
            If you use address references in a formula, those references will be automatically updated if you insert or delete 
            rows or columns and those changes affect the address reference in some way.
            </para>
            <para>
            If this property is <see langword="false"/>, formula address references will not update automatically.
            This should be used only for performance reasons when working on large files.
            </para>
            <para>Default value of this property is <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.ProtectionSettings">
            <summary>
            Gets workbook protection properties. 
            Supported in XLSX only.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.#ctor">
            <summary>
            Initializes an empty (no worksheets) instance of the ExcelFile class.
            </summary>
            <remarks>
            <para>To add new worksheets to a blank file use <see cref="P:GemBox.Spreadsheet.ExcelFile.Worksheets">
            Worksheets</see> property, <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(GemBox.Spreadsheet.SheetType,System.String)"/> methods.</para>
            <para>To load / read a spreadsheet from a file or a stream, use static <see cref="O:GemBox.Spreadsheet.ExcelFile.Load"/> methods.</para>
            <para>To save / write a spreadsheet to a file or a stream use <see cref="O:GemBox.Spreadsheet.ExcelFile.Save"/> methods.</para>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Worksheets">
            <summary>
            Collection of all worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>) in a workbook. 
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">
            <summary>
            Gets a value indicating whether the objects of specified type can be assigned 
            to <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see> property.
            </summary>
            <param name="type">Queried type.</param>
            <remarks>
            Currently supported types are:
            <list type="bullet">
            <item><description>System.DBNull</description></item>
            <item><description>System.Byte</description></item>
            <item><description>System.SByte</description></item>
            <item><description>System.Int16</description></item>
            <item><description>System.UInt16</description></item>
            <item><description>System.Int64</description></item>
            <item><description>System.UInt64</description></item>
            <item><description>System.UInt32</description></item>
            <item><description>System.Int32</description></item>
            <item><description>System.Single</description></item>
            <item><description>System.Double</description></item>
            <item><description>System.Boolean</description></item>
            <item><description>System.Char</description></item>
            <item><description>System.Text.StringBuilder</description></item>
            <item><description>System.Decimal</description></item>
            <item><description>System.DateTime</description></item>
            <item><description>System.String</description></item>
            </list>
            </remarks>
            <returns><see langword="true"/> if the specified type is supported; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Protected">
            <summary>
            Gets or sets the workbook protection flag.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on workbook protection, consult Microsoft Excel documentation.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">ExcelWorksheet.Protected</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.GroupMethodsAffectedCellsLimit">
            <summary>
            Maximum number of affected cells in group set methods.
            </summary>
            <remarks>
            If user tries to modify all cells in a group which has more cells than specified limit, exception
            will be thrown. This property was introduced to prevent users from accidentally modifying millions
            of cells which results in a long delay, a large memory allocation and a big resulting file. You can 
            set this limit to value which suits your needs (minimum is 5).
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Use1904DateSystem">
            <summary>
            Gets or sets whether 1904 date system is used.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            For more information on 1904 date system, consult Microsoft Excel documentation.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            <summary>
            Delays formula parsing until one of SaveXls methods is called.
            </summary>
            <remarks>
            <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed at <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>
            page. Only listed formulas can be saved to XLS file.</para>
            <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
            <para>If this property is true, each set of <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">
            ExcelCell.Formula</see> property will just store formula string. When one of
            <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">ExcelFile.SaveXls</see> methods is called
            formulas are parsed and exception is thrown if formula is not supported or in bad format.
            When XLSX is saved, formulas are not parsed, they are just saved as strings.
            If the formula is in bad format, MS Excel or other application will report an error in formula.
            </para>
            <para>If this property is false, formula string is parsed every time you set 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see> property. You will
            limit formulas to the ones supported by GemBox.Spreadsheet parser and the exception will be
            thrown immediately if the formula is not supported or in bad format.</para>
            <para>Default value of this property is <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DocumentProperties">
            <summary>
            Gets <see cref="P:GemBox.Spreadsheet.ExcelFile.DocumentProperties"/> of this <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DefinedNames">
            <summary>
            Gets the collection of defined names that are not directly related with one cell range.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.PivotCaches">
            <summary>
            <para>Gets the collection of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />s defined in this <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance.</para>
            <para>Currently supported in XLSX only.</para>
            </summary>
            <value>
            The collection of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />s defined in this <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance.
            </value>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Styles">
            <summary>
            Gets the collection of workbook (master) <see cref="T:GemBox.Spreadsheet.Style" />s defined for this <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.AutoDetectCsvSeparator(System.IO.Stream)">
            <summary>
            Autodetects CSV separator. If there's no separators in the input stream returns (char)0. 
            </summary>
            <remarks>
            This method counts the number of occurrences of the most common separators (',', ';', '\t')
            and returns one that has occurred the most times in first 5 rows. 
            </remarks>
            <param name="stream">Input Stream.</param>
            <returns>Char that is CSV separator. If there's no separators in the input StreamReader returns (char)0, 
            and if there are two with equal number of occurrence, returns first of them.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.AutoDetectCsvSeparator(System.IO.StreamReader,System.Int32,System.Char[])">
            <summary>
            Autodetects CSV separator. If there's no separators in the input stream returns (char)0. 
            </summary>
            <remarks>
            This method counts the number of occurrences of chars that are specified in the 
            array possibleSeparators, and returns one that has occurred the most times in first rowsToTest rows of StreamReader sr. 
            </remarks>
            <param name="sr">Input StreamReader.</param>
            <param name="rowsToTest">Number of rows to test.</param>
            <param name="possibleSeparators">Chars that can be CSV separators.</param>
            <returns>Char that is CSV separator. If there's no separators in the input StreamReader returns (char)0, 
            and if there are two with equal number of occurrence, returns first of them.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.CalculationOptions">
            <summary>
            Gets the calculation engine options.
            </summary>
            <value>
            The calculation engine options.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Calculate">
            <summary>
            Calculates formula for every excel cell in all worksheets.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.String)">
            <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <returns>A loaded spreadsheet.</returns>
            <remarks>
            File extension that is extracted from the <paramref name="path" /> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.LoadOptions" />
            derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.ExcelFile.Load(System.String,GemBox.Spreadsheet.LoadOptions)" /> method.
            <para>Following file extensions are supported:</para>
            <list type="bullet">
            <item><description>Microsoft Excel: .xlsx, xlsm, .xltx, .xltm, .xls, .xlt</description></item>
            <item><description>OpenDocument Spreadsheet: .ods, .ots</description></item>
            <item><description>Character Separated Values: .csv, .tsv</description></item>
            <item><description>HyperText Markup Language: .htm, .html, .mht, .mhtml</description></item>
            </list>
            </remarks>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Load" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Load" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.String,GemBox.Spreadsheet.LoadOptions)">
            <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <param name="options">The loading options which can be used to define settings for load operation.</param>
            <returns>A loaded spreadsheet.</returns>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Load" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Load" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.IO.Stream,GemBox.Spreadsheet.LoadOptions)">
            <summary>
            Loads a spreadsheet from the specified stream.
            </summary>
            <param name="stream">The stream from which to load a spreadsheet.</param>
            <param name="options">The loading options which can be used to define settings for load operation.</param>
            <returns>A loaded spreadsheet.</returns>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Load" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Load" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.IO.TextReader,GemBox.Spreadsheet.CsvLoadOptions)">
            <summary>
            Loads a spreadsheet from CSV data using the specified reader.
            </summary>
            <param name="reader">The reader which is used to load a spreadsheet.</param>
            <param name="options">The CSV loading options which can be used to define settings for load operation.</param>
            <returns>A loaded spreadsheet.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)">
            <summary>
            Saves the spreadsheet to a file with the specified path.
            </summary>
            <param name="path">The path to which to save the spreadsheet.</param>
            <exception cref="T:System.ArgumentException">If file extension is not specified or not supported. If file extension is not recognized, use <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> method overload instead.</exception>
            <remarks>
            File extension that is extracted from the <paramref name="path" /> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.SaveOptions" />
            derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> method.
            <para>Following file extensions are supported:</para>
            <list type="bullet">
            <item><description>Microsoft Excel: .xlsx, xlsm, .xltx, .xltm, .xls, .xlt</description></item>
            <item><description>OpenDocument Spreadsheet: .ods, .ots</description></item>
            <item><description>Character Separated Values: .csv, .tsv</description></item>
            <item><description>HyperText Markup Language: .htm, .html, .mht, .mhtml</description></item>
            <item><description>Portable Document Format: .pdf</description></item>
            <item><description>XML Paper Specification: .xps</description></item>
            <item><description>Image: .bmp, .gif, .jpg, .jpeg, .png, .tif, .tiff, .wdp</description></item>
            </list>
            </remarks>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Save" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Save" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)">
            <summary>
            Saves the spreadsheet to a file with the specified path.
            </summary>
            <param name="path">The path to which to save the spreadsheet.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Save" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Save" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.IO.Stream,GemBox.Spreadsheet.SaveOptions)">
            <summary>
            Saves the spreadsheet to the specified stream.
            </summary>
            <param name="stream">The stream to which to save the spreadsheet.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Save" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Save" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.IO.TextWriter,GemBox.Spreadsheet.CsvSaveOptions)">
            <summary>
            Save the spreadsheet to CSV format using the specified writer.
            </summary>
            <param name="writer">The writer which is used to save the spreadsheet.</param>
            <param name="options">The CSV saving options which can be used to define settings for save operation.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String)">
            <summary>
            Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is resolved from <paramref name="fileName" /> extension. See remarks why <paramref name="httpResponse" /> parameter is of type <see cref="T:System.Object" />.
            </summary>
            <param name="httpResponse">System.Web.HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or System.Web.HttpResponseBase object or System.Net.Http.HttpResponseMessage object.</param>
            <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
            <exception cref="T:System.ArgumentException">If file extension is not specified or not supported. If file extension is not recognized, use <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)" /> method overload instead.</exception>
            <remarks>
            <note type="note">
      Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).
    </note><para>
      This method accepts <see cref="T:System.Object" /> rather than <see href="https://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="https://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> or <see href="https://msdn.microsoft.com/en-us/library/system.net.http.httpresponsemessage.aspx">HttpResponseMessage</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> or <b>System.Net.Http</b> assemblies and could not be used in applications which target <i>Client Profile .NET Framework</i>.
    </para><para>
      <see href="https://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="https://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="https://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.
    </para>
            <para>For supported file extensions, see remarks for <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> method.</para>
            </remarks>
            <example>
      <para>Following examples show how to stream spreadsheet to a client's browser using various ASP.NET technologies.</para>
      <para />
      <para>
        <b>ASP.NET Web Forms</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="WebForms" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="WebForms" />
      <para />
      <para>
        <b>ASP.NET Web Forms</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="WebForms2" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="WebForms2" />
      <para />
      <para>
        <b>ASP.NET MVC</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.mvc.controller.aspx">System.Web.Mvc.Controller</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="Mvc" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="Mvc" />
      <para />
      <para>
        <b>ASP.NET Web API</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.http.apicontroller.aspx">System.Web.Http.ApiController</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="MvcWebApi" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="MvcWebApi" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/asp-net-excel-export/5101">Export Excel file with ASP.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)">
            <summary>
            Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is defined with <paramref name="options" /> parameter. See remarks why <paramref name="httpResponse" /> parameter is of type <see cref="T:System.Object" />.
            </summary>
            <param name="httpResponse">System.Web.HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or System.Web.HttpResponseBase object or System.Net.Http.HttpResponseMessage object.</param>
            <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <remarks>
            <note type="note">
      Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).
    </note><para>
      This method accepts <see cref="T:System.Object" /> rather than <see href="https://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="https://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> or <see href="https://msdn.microsoft.com/en-us/library/system.net.http.httpresponsemessage.aspx">HttpResponseMessage</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> or <b>System.Net.Http</b> assemblies and could not be used in applications which target <i>Client Profile .NET Framework</i>.
    </para><para>
      <see href="https://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="https://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="https://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.
    </para>
            </remarks>
            <example>
      <para>Following examples show how to stream spreadsheet to a client's browser using various ASP.NET technologies.</para>
      <para />
      <para>
        <b>ASP.NET Web Forms</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="WebForms" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="WebForms" />
      <para />
      <para>
        <b>ASP.NET Web Forms</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="WebForms2" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="WebForms2" />
      <para />
      <para>
        <b>ASP.NET MVC</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.mvc.controller.aspx">System.Web.Mvc.Controller</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="Mvc" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="Mvc" />
      <para />
      <para>
        <b>ASP.NET Web API</b>
      </para>
      <para>
        Method is defined inside a class that derives from <see href="https://msdn.microsoft.com/en-us/library/system.web.http.apicontroller.aspx">System.Web.Http.ApiController</see>.
      </para>
      <code language="c#" source="Examples\CSharp\AspNetTechnologies.cs" region="MvcWebApi" />
      <code language="vb" source="Examples\Vb\AspNetTechnologies.vb" region="MvcWebApi" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/asp-net-excel-export/5101">Export Excel file with ASP.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Print">
            <summary>
            Prints the document to the default printer.
            </summary>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Print" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Print" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-print-excel/451">Print Excel in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Print(System.String)">
            <summary>
            Prints the document to the specified printer.
            </summary>
            <param name="printerName">Printer name.</param>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Print" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Print" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-print-excel/451">Print Excel in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Print(System.String,GemBox.Spreadsheet.PrintOptions)">
            <summary>
            Prints the document to the specified printer according to specified options.
            </summary>
            <param name="printerName">Printer name.</param>
            <param name="options">Print options.</param>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Print" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Print" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-print-excel/451">Print Excel in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.AutoSizeColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            Automatics the size columns. This feature is not supported on the current .NET platform.
            </summary>
            <param name="worksheetIndex">Index of the worksheet.</param>
            <param name="columnStart">The column start.</param>
            <param name="columnCount">The column count.</param>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxColumns">
            <summary>
            Maximum number of columns in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            If you read/write XLS files, you are also limited by
            <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColumns">ExcelFile.MaxXlsColumns</see>.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxRows">
            <summary>
            Maximum number of rows in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            If you read/write XLS files, you are also limited by
            <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsRows">ExcelFile.MaxXlsRows</see>.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsCellStyles">
            <summary>
            Maximum number of user-defined cell styles in XLS (BIFF8) file.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColors">
            <summary>
            Maximum number of colors in XLS (BIFF8) file.
            </summary>
            <remarks>
            This number includes 8 default colors:
            <see cref="P:System.Drawing.Color.Black">Color.Black</see>, 
            <see cref="P:System.Drawing.Color.White">Color.White</see>,
            <see cref="P:System.Drawing.Color.Red">Color.Red</see>, 
            <see cref="P:System.Drawing.Color.Green">Color.Green</see>,
            <see cref="P:System.Drawing.Color.Blue">Color.Blue</see>, 
            <see cref="P:System.Drawing.Color.Yellow">Color.Yellow</see>,
            <see cref="P:System.Drawing.Color.Magenta">Color.Magenta</see> and
            <see cref="P:System.Drawing.Color.Cyan">Color.Cyan</see>.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColumns">
            <summary>
            Maximum number of columns in XLS (BIFF8) file.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsRows">
            <summary>
            Maximum number of rows in XLS (BIFF8) file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.CsvAllowNewlineInQuotes">
            <summary>
            Gets or sets whether SaveCsv() methods will allow newline in quotes.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>If this property is <see langword="true"/>, newline in quoted value will be threated as part of that value. 
            If this property is <see langword="false"/>, newline in quoted value will be threated as the beginning of the new row.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.CsvAlwaysQuoteValues">
            <summary>
            Gets or sets whether SaveCsv() methods will always put values in quotes.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>All values (including numbers) in CSV files are stored as text. If this property is
            <see langword="true"/>, any of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,System.Char)"/> 
            overloads will always put values in quotes. If this property is <see langword="false"/>, only values that
            contain special characters (quotes or CSV separator) will be quoted.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.CsvParseNumbersDuringLoad">
            <summary>
            Gets or sets whether LoadCsv() methods will try to convert text values to numbers.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>All values (including numbers) in CSV files are stored as text. By default, 
            any of <see cref="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,System.Char)"/> 
            overloads will try to parse text values as numbers and if successful
            cell will be filled with <see cref="T:System.Double"/> value. If
            you don't want such behavior (for example, you want IDs like "00935" to remain
            strings), set this property to <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelFile.IoWarning">
            <summary>
            Fired for unexpected situations when reading or writing XLS / CSV files.
            </summary>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelFile.LimitNear">
            <summary>
            Occurs when the size of XLS / CSV file in reading / writing is near <b>GemBox.Spreadsheet</b> free limit.
            </summary>
            <remarks>
            <para>This event is fired when 80% of maximum row count per worksheet is reached (150 * 0.8 = 120 rows) or when 5 worksheets are used.</para>
            <para>This event is not fired if <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached"/> event is fired.</para>
            <para>You can use this event to detect when your application is close to <b>GemBox.Spreadsheet</b> free limit. 
            For example, you can write number of used rows to a log file or send a notification e-mail.</para>
            </remarks>
            <seealso cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached"/>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelFile.LimitReached">
            <summary>
            Occurs when the size of XLS / CSV file in reading / writing is above <b>GemBox.Spreadsheet</b> free limit.
            </summary>
            <remarks>
            <para>This event is fired when maximum row count per worksheet is reached (150 rows) or when more than 5 worksheets are used.</para>
            <para>You can use this event to notify a user of your application that data is only partially read / written.</para>
            </remarks>
            <seealso cref="E:GemBox.Spreadsheet.ExcelFile.LimitNear"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DefaultFontName">
            <summary>
            Gets or sets name of the default font used in the workbook.
            </summary>
            <remarks>
            Default value for this property is "Calibri".
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DefaultFontSize">
            <summary>
            Gets or sets default font size.
            </summary>
            <remarks>
            <para>Unit is twip (1/20th of a point).</para>
            <para>Default value of this property is 220.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">
            <summary>
            Gets or sets the <see cref="T:GemBox.Spreadsheet.CellStyle"/> resolution method.
            </summary>
            <remarks>
            <para>
            Because of limitations of Microsoft Excel file format, every cell must be written to file with resolved <see cref="T:GemBox.Spreadsheet.CellStyle"/>.
            In the case where a cell doesn't have specific property set on its <see cref="P:GemBox.Spreadsheet.AbstractRange.Style"/> and 
            that property is set on both row and column that contain that cell, 
            a cell will inherit property value from row or column <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style"/>, depending on the resolution method.
            </para>
            <para>Default value for this property is <see cref="F:GemBox.Spreadsheet.RowColumnResolutionMethod.RowOverColumn"/>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.ClosePreservedXlsx">
            <summary>
            Closes preserved XLSX file handle if needed 
            (<see cref="F:GemBox.Spreadsheet.XlsxOptions.PreserveKeepOpen">XlsxOptions.PreserveKeepOpen</see> was
            used with <see cref="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.String,GemBox.Spreadsheet.XlsxOptions)">
            ExcelFile.LoadXlsx(string,XlsxOptions)</see> method). <b>(.NET 3.0 and greater only)</b>
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.Stream,GemBox.Spreadsheet.CsvType)">
            <overloads>Loads the existing CSV file or stream.</overloads>
            <summary>
            Loads the existing stream with specified CSV format.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="csvType">CSV type.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.Stream,System.Char)">
            <summary>
            Loads the existing stream, using specified character as a delimiter.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="separator">Separator used for delimiting data values.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.StreamReader,GemBox.Spreadsheet.CsvType)">
            <summary>
            Loads all data using specified StreamReader and CSV Type.
            </summary>
            <remarks>
            Use this overload if you want to use a StreamReader with non-default encoding. 
            </remarks>
            <param name="reader">Stream reader.</param>
            <param name="csvType">CSV type.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.StreamReader,System.Char)">
            <summary>
            Loads all data using specified StreamReader and character delimiter.
            </summary>
            <remarks>
            Use this overload if you want to use a StreamReader with non-default encoding. 
            </remarks>
            <param name="reader">Stream reader.</param>
            <param name="separator">Separator used for delimiting data values.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,GemBox.Spreadsheet.CsvType)">
            <summary>
            Loads the existing file with specified CSV format.
            </summary>
            <param name="path">Existing CSV file name (opened for reading).</param>
            <param name="csvType">CSV type.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,System.Char)">
            <summary>
            Loads the existing file, using specified character as a delimiter.
            </summary>
            <param name="path">File name.</param>
            <param name="separator">Separator used for delimiting data values.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOds(System.IO.Stream,GemBox.Spreadsheet.OdsOptions)">
            <summary>
            Loads the existing ODS file from the input stream.
            </summary>
            <param name="stream">Input stream (opened for reading).</param>
            <param name="odsOptions">ODS options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOds(System.String,GemBox.Spreadsheet.OdsOptions)">
            <overloads>Loads the existing ODS file.</overloads>
            <summary>
            Loads the existing ODS file.
            </summary>
            <param name="path">Existing ODS file name.</param>
            <param name="odsOptions">ODS options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOdsFromDirectory(System.String,GemBox.Spreadsheet.OdsOptions)">
            <summary>
            Loads all parts of ODS file as separate files from input directory.
            </summary>
            <param name="path">Path of input directory.</param>
            <param name="odsOptions">ODS options.</param>
            <remarks>
            You need to use external ZIP library to extract all parts from ODS file.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadFromDirectory(System.String,GemBox.Spreadsheet.OdsLoadOptions)">
            <summary>
            Loads all parts of ODS file as separate files from input directory.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <param name="options">The ODS loading options which can be used to define settings for load operation.</param>
            <returns>A loaded ODS spreadsheet.</returns>
            <remarks>
            You need to use external ZIP library to extract all parts from ODS file.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.IO.Stream)">
            <summary>
            Loads the existing XLS file from the input stream (preserving MS Excel records).
            </summary>
            <param name="stream">Input stream.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.IO.Stream,GemBox.Spreadsheet.XlsOptions)">
            <summary>
            Loads the existing XLS file from the input stream (optionally preserving MS Excel records).
            </summary>
            <remarks>
            <para>If the only purpose of loading the file is to read data values and formatting using 
            GemBox.Spreadsheet API, you should use <paramref name="xlsOptions"/> set to <see cref="F:GemBox.Spreadsheet.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</para>
            <para>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by GemBox.Spreadsheet API.</para>
            </remarks>
            <param name="stream">Input stream.</param>
            <param name="xlsOptions">XLS options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.String)">
            <overloads>Loads the existing XLS file or stream.</overloads>
            <summary>
            Loads the existing XLS file (preserving MS Excel records).
            </summary>
            <param name="path">Existing XLS file name (opened for reading).</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.String,GemBox.Spreadsheet.XlsOptions)">
            <summary>
            Loads the existing XLS file (optionally preserving MS Excel records).
            </summary>
            <remarks>
            <para>If the only purpose of loading the file is to read data values and formatting using 
            GemBox.Spreadsheet API, you should use <paramref name="xlsOptions"/> set to <see cref="F:GemBox.Spreadsheet.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</para>
            <para>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by GemBox.Spreadsheet API.</para>
            </remarks>
            <param name="path">Existing XLS file name (opened for reading).</param>
            <param name="xlsOptions">XLS options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.IO.Stream,GemBox.Spreadsheet.XlsxOptions)">
            <summary>
            Loads the existing XLSX file from the input stream. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="stream">Input stream.</param>
            <param name="xlsxOptions">XLSX options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.String,GemBox.Spreadsheet.XlsxOptions)">
            <overloads>Loads the existing XLSX file or stream. <b>(.NET 3.0 and greater only)</b></overloads>
            <summary>
            Loads the existing XLSX file. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="path">Existing XLSX file name (opened for reading).</param>
            <param name="xlsxOptions">XLSX options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsxFromDirectory(System.String,GemBox.Spreadsheet.XlsxOptions)">
            <summary>
            Loads all parts of XLSX file as separate files from input directory.
            </summary>
            <param name="path">Path of input directory.</param>
            <param name="xlsxOptions">XLS options.</param>
            <remarks>
            You need to use external ZIP library to extract all parts from XLSX file.
            XlsxOptions.PreserveMakeCopy option does not work with LoadXlsxFromDirectory method.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadFromDirectory(System.String,GemBox.Spreadsheet.XlsxLoadOptions)">
            <summary>
            Loads all parts of XLSX file as separate files from input directory.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <param name="options">The XLSX loading options which can be used to define settings for load operation.</param>
            <returns>A loaded XLSX spreadsheet.</returns>
            <remarks>
            You need to use external ZIP library to extract all parts from XLSX file.
            XlsxOptions.PreserveMakeCopy option does not work with this method.
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.Stream,GemBox.Spreadsheet.CsvType)">
            <overloads>Saves all data to a new file or stream in CSV format.</overloads>
            <summary>
            Saves all data to a stream in a specified CSV format.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="csvType">CSV type.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.Stream,System.Char)">
            <summary>
            Saves all data to a stream, using specified character as a delimiter.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="separator">Separator used for delimiting data values.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.TextWriter,GemBox.Spreadsheet.CsvType)">
            <summary>
            Saves all data using specified TextWriter and CSV Type.
            </summary>
            <remarks>
            Use this overload if you want to use a TextWriter with non-default encoding. 
            Note that .NET Framework adds byte order mark (BOM) to files with non-default 
            encoding. MS Excel and other programs may fail to recognize CSV files with 
            non-default encoding.
            </remarks>
            <param name="writer">Text writer.</param>
            <param name="csvType">CSV type.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.TextWriter,System.Char)">
            <summary>
            Saves all data using specified TextWriter and character delimiter.
            </summary>
            <remarks>
            Use this overload if you want to use a TextWriter with non-default encoding. 
            Note that .NET Framework adds byte order mark (BOM) to files with non-default 
            encoding. MS Excel and other programs may fail to recognize CSV files with 
            non-default encoding.
            </remarks>
            <param name="writer">Text writer.</param>
            <param name="separator">Separator used for delimiting data values.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,GemBox.Spreadsheet.CsvType)">
            <summary>
            Saves all data to a new file in a specified CSV format.
            </summary>
            <param name="path">File name.</param>
            <param name="csvType">CSV type.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,System.Char)">
            <summary>
            Saves all data to a new file, using specified character as a delimiter.
            </summary>
            <param name="path">File name.</param>
            <param name="separator">Separator used for delimiting data values.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOds(System.IO.Stream)">
            <summary>
            Saves all data to an output stream in ODF format.
            </summary>
            <param name="stream">Output stream.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOds(System.String)">
            <overloads>Saves all data to a new file in ODF format.</overloads>
            <summary>
            Saves all data to a new file in ODF format.
            </summary>
            <param name="path">File name.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOdsToDirectory(System.String)">
            <summary>
            Saves all parts of ODS file as separate files to output directory.
            </summary>
            <remarks>
            <para>You need to use external ZIP library to package all created files to ODS file.</para>
            <note type="note">
            When using external ZIP library to package all created files to ODS file, only the contents of the directory should be zipped and not the directory itself.
            </note>
            </remarks>
            <param name="path">Path of output directory.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToDirectory(System.String,GemBox.Spreadsheet.OdsSaveOptions)">
            <summary>
            Saves all parts of ODS file as separate files to output directory.
            </summary>
            <param name="path">Path of output directory.</param>
            <param name="options">Advanced save options.</param>
            <remarks>
            <para>You need to use external ZIP library to package all created files to ODS file.</para>
            <note type="note">
            When using external ZIP library to package all created files to ODS file, only the contents of the directory should be zipped and not the directory itself.
            </note>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToHttpResponse(System.Object,System.String,System.Object[])">
            <summary>
            Saves the <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to a System.Web.HttpResponse output stream and sets appropriate HTTP response headers. Use this method in ASP.NET application to send the document to a client browser. File format is resolved from <paramref name="options"/> parameter or <paramref name="fileName"/> parameter file extension as described in remarks. See remarks why <paramref name="httpResponse"/> parameter is of type <see cref="T:System.Object"/>.
            </summary>
            <param name="httpResponse">HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes.</param>
            <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <remarks>
            <para>This method accepts <see cref="T:System.Object"/> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> assembly and could not be used in applications which target <i>Client Profile .NET Framework</i>.</para>
            <para><see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.</para>
            <para>File format in which <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved depends on the type of the first item in <paramref name="options"/> array as follows:</para>
            <list type="bullet">
            <item><description>if <paramref name="options"/> array first item is of type <see cref="T:GemBox.Spreadsheet.XlsxSaveOptions"/>, <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved in Microsoft Excel 2007 format,</description></item>
            <item><description>otherwise if <paramref name="options"/> array first item is of type <see cref="T:GemBox.Spreadsheet.CsvType"/> or <see cref="T:System.Char"/>, <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved in Character separated value format,</description></item>
            <item><description>otherwise if <paramref name="options"/> array first item is of type <see cref="T:GemBox.Spreadsheet.HtmlSaveOptions"/>, <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved in HyperText Markup Language format,</description></item>
            <item><description>otherwise, file format in which <see cref="T:GemBox.Spreadsheet.ExcelFile"/> is saved is resolved based on <paramref name="fileName"/> parameter file extension.</description></item>
            </list>
            <para>Following file extensions are supported:</para>
            <list type="bullet">
            <item><description>Microsoft Excel 2007 formats: .xlsx, .xlsm, .xltm, .xltx</description></item>
            <item><description>Microsoft Excel 97-2003 formats: .xls, .xlt</description></item>
            <item><description>Character separated value formats: .csv, .tsv</description></item>
            <item><description>OpenDocument Spreadsheet formats: .ods, .ots</description></item>
            <item><description>HyperText Markup Language formats: .htm, .html</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.IO.Stream)">
            <summary>
            Saves all data to an output stream in XLS format.
            </summary>
            <param name="stream">Output stream.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            <overloads>Saves all data to a file or stream in XLS format.</overloads>
            <summary>
            Saves all data to a new file in XLS format.
            </summary>
            <param name="path">File name.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.IO.Stream)">
            <summary>
            Saves all data to an output stream in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="stream">Output stream.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.IO.Stream,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all data to an output stream in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="stream">Output stream.</param>
            <param name="options">Advanced save options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.String)">
            <overloads>Saves all data to a file or stream in XLSX format. <b>(.NET 3.0 and greater only)</b></overloads>
            <summary>
            Saves all data to a new file in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="path">File name.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all data to a new file in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            /// <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="path">File name.</param>
            <param name="options">Advanced save options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsxToDirectory(System.String)">
            <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
            <remarks>
            <para>You need to use external ZIP library to package all created files to XLSX file.</para>
            <note type="note">
            When using external ZIP library to package all created files to XLSX file, only the contents of the directory should be zipped and not the directory itself.
            </note>
            </remarks>
            <param name="path">Path of output directory.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsxToDirectory(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
            <remarks>
            <para>You need to use external ZIP library to package all created files to XLSX file.</para>
            <note type="note">
            When using external ZIP library to package all created files to XLSX file, only the contents of the directory should be zipped and not the directory itself.
            </note>
            </remarks>
            <param name="path">Path of output directory</param>
            <param name="options">Advanced save options.</param>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToDirectory(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
            <param name="path">Path of output directory.</param>
            <param name="options">Advanced save options.</param>
            <remarks>
            <para>You need to use external ZIP library to package all created files to XLSX file.</para>
            <note type="note">
            When using external ZIP library to package all created files to XLSX file, only the contents of the directory should be zipped and not the directory itself.
            </note>
            </remarks>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelFillPattern">
            <summary>
            Represents cell fill (background) formatting which can be either pattern or gradient.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle">
            <summary>
            <para>Gets or sets the pattern fill style.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None" />.</para>
            <para>Currently supported only in XLS and XLSX. For all other formats it defaults to either <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None" /> or <see cref="F:GemBox.Spreadsheet.FillPatternStyle.Solid" />.</para>
            <para>If set value is not <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None" />, then <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" /> and/or <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor" /> should also be set.</para>
            </summary>
            <value>
            The pattern fill style.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            <summary>
            <para>Gets or sets the pattern fill foreground color.</para>
            <para>Default value is color created from name <see cref="F:GemBox.Spreadsheet.ColorName.Empty" />.</para>
            </summary>
            <value>
            The pattern fill foreground color.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">
            <summary>
            <para>Gets or sets the pattern fill background color.</para>
            <para>Default value is color created from name <see cref="F:GemBox.Spreadsheet.ColorName.Empty" />.</para>
            </summary>
            <value>
            The pattern fill background color.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.GradientStyle">
            <summary>
            <para>Gets or sets the shading style of the gradient fill effect, if there is any gradient fill effect applied.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.GradientShadingStyle.None" />.</para>
            <para>Gradient fill is currently supported in XLSX and partially in rendering formats (PDF, XPS and image formats).</para>
            </summary>
            <value>
            The shading style of the gradient fill effect, if there is any gradient fill effect applied.
            </value>
            <exception cref="T:System.ArgumentException">Value cannot be set to <see cref="F:GemBox.Spreadsheet.GradientShadingStyle.Complex" />.</exception>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.GradientColor1">
            <summary>
            <para>Gets or sets the first color of the gradient fill effect.</para>
            <para>Default value is color created from name <see cref="F:GemBox.Spreadsheet.ColorName.Empty" />.</para>
            <para>Gradient fill is currently supported in XLSX and partially in rendering formats (PDF, XPS and image formats).</para>
            </summary>
            <value>
            The first color of the gradient fill effect.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.GradientColor2">
            <summary>
            <para>Gets or sets the second color of the gradient fill effect.</para>
            <para>Default value is color created from name <see cref="F:GemBox.Spreadsheet.ColorName.Empty" />.</para>
            <para>Gradient fill is currently supported in XLSX and partially in rendering formats (PDF, XPS and image formats).</para>
            </summary>
            <value>
            The second color of the gradient fill effect.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFillPattern.SetSolid(GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            <para>Sets the solid pattern fill with the specified fill color.</para>
            <para>Sets <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle" /> to <see cref="F:GemBox.Spreadsheet.FillPatternStyle.Solid" /> and <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" /> to <paramref name="fillColor" />.</para>
            </summary>
            <param name="fillColor">Foreground color of the solid pattern fill.</param>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFillPattern.SetPattern(GemBox.Spreadsheet.FillPatternStyle,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            Sets the pattern fill.
            </summary>
            <param name="patternStyle">The pattern style.</param>
            <param name="foregroundColor">Foreground color of the pattern fill.</param>
            <param name="backgroundColor">Background color of the pattern fill.</param>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFillPattern.SetGradient(GemBox.Spreadsheet.GradientShadingStyle,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            Sets the gradient fill effect.
            </summary>
            <param name="gradientStyle">The shading style of the gradient fill effect.</param>
            <param name="gradientColor1">The first color of the gradient fill effect.</param>
            <param name="gradientColor2">The second color of the gradient fill effect.</param>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFillPattern.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelFillPattern"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelFillPattern"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelFont">
            <summary>
            Represents a typeface (for example, <b>Calibri</b>), along with its attributes (size, font style, underlining, color, and effects).
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Font" />
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.MinWeight">
            <summary>
            Minimum font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.NormalWeight">
            <summary>
            Normal font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.BoldWeight">
            <summary>
            Default bold font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.MaxWeight">
            <summary>
            Maximum font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFont.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ExcelFont"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Name">
            <summary>
            <para>Gets or sets the face name of this font.</para>
            <para>Default value is <b>Calibri</b>.</para>
            </summary>
            <value>
            The face name of this font.
            </value>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Weight">
            <summary>
            <para>Gets or sets the font weight (font boldness).</para>
            <para>Value must be between <see cref="F:GemBox.Spreadsheet.ExcelFont.MinWeight" /> and <see cref="F:GemBox.Spreadsheet.ExcelFont.MaxWeight" />.</para>
            <para>For standard boldness, use <see cref="F:GemBox.Spreadsheet.ExcelFont.BoldWeight" />.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.ExcelFont.NormalWeight" />.</para>
            </summary>
            <value>
            The font weight (font boldness).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be between <see cref="F:GemBox.Spreadsheet.ExcelFont.MinWeight" /> and <see cref="F:GemBox.Spreadsheet.ExcelFont.MaxWeight" />.</exception>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Italic">
            <summary>
            <para>Gets or sets a value indicating whether to display characters in italic font style.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> to display characters in italic font style; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Size">
            <summary>
            <para>Gets or sets the size of the text in twips (1/20th of a point).</para>
            <para>Default value is 11 * 20 = 220.</para>
            </summary>
            <value>
            The size of the text.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be positive.</exception>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Color">
            <summary>
            <para>Gets or sets the color of the text.</para>
            <para>Default value is color created from name <see cref="F:GemBox.Spreadsheet.ColorName.Text1" />.</para>
            </summary>
            <value>
            The color of the text.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle">
            <summary>
            <para>Gets or sets the underline formatting of the text.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.UnderlineStyle.None" />.</para>
            </summary>
            <value>
            The underline formatting of the text.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Strikeout">
            <summary>
            <para>Gets or sets a value indicating whether to draw a strike-through line through the horizontal middle of the text.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> to draw a strike-through line through the horizontal middle of the text; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition">
            <summary>
            <para>Gets or sets the vertical position of the text relative to the text's default appearance.</para>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.ScriptPosition.Normal" />.</para>
            </summary>
            <value>
            The vertical position of the text relative to the text's default appearance.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFont.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelFont"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelFont"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelObjectSourceType">
            <summary>
            Represents an enumeration of possible sources of various objects (such as pictures, audio and other files) that can be either embedded, linked or both.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelObjectSourceType.Embed">
            <summary>
            Object is embedded in the file in which <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance is saved.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelObjectSourceType.Link">
            <summary>
            Object is linked to the file in which <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance is saved.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelObjectSourceType.EmbedAndLink">
            <summary>
            Object is embedded and linked to the file in which <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance is saved.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPicture">
            <summary>
            Represents a picture in the worksheet.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">ExcelWorksheet.Pictures</seealso>				
            <example>
      <para>Following code demonstrates how to use images:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Image" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Image" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.PictureStream">
            <summary>
            Gets the picture stream.
            </summary>
            <value>
            The picture stream.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.PictureFormat">
            <summary>
            Gets the picture format.
            </summary>
            <value>
            The picture format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPicture.Delete">
            <summary>
            Removes this <see cref="T:GemBox.Spreadsheet.ExcelPicture"/> instance from the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPicture.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelPicture"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ExcelPicture"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.BottomRightCell">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> property and its <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.To"/> property instead.</para>
            <para>Gets or sets the bottom right anchor cell for the picture.</para>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.BoundingRectangle">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> property and its <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetLeft(GemBox.Spreadsheet.LengthUnit)"/>, <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetTop(GemBox.Spreadsheet.LengthUnit)"/>, <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetWidth(GemBox.Spreadsheet.LengthUnit)"/> and <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetHeight(GemBox.Spreadsheet.LengthUnit)"/> methods instead.</para>
            <para>Gets the image bounding rectangle.</para>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.ImageStream">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelPicture.PictureStream"/> property instead.</para>
            <para>Gets the image stream.</para>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.Positioning">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> property and its <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> property instead.</para>
            <para>Gets or sets the positioning options of the picture.</para>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.TopLeftCell">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> property and its <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.From"/> property instead.</para>
            <para>Gets or sets the top left anchor cell for the picture.</para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPictureCollection">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.ExcelPicture">picture</see>s in the worksheet.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">ExcelWorksheet.Pictures</seealso>
            <example>
      <para>Following code demonstrates how to use images:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Image" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Image" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells.
            </summary>
            <param name="pictureStream">The picture's stream.</param>
            <param name="pictureFormat">The picture's format.</param>
            <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells. Picture size will be determined by using GDI+.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            <para>This method is not fully supported in .NET Standard and will set picture's width and height to zero.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells. Picture size will be determined by using GDI+.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
            <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            <para>This method is not fully supported in .NET Standard and will set picture's width and height to zero.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="pictureStream">The picture's stream.</param>
            <param name="pictureFormat">The picture's format.</param>
            <param name="positionFrom">The picture's position.</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="pictureStream">The picture's stream.</param>
            <param name="pictureFormat">The picture's format.</param>
            <param name="positionFromCell">The picture's position (for example, "A1").</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFrom">The picture's position.</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFrom">The picture's position.</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFromCell">The picture's position (for example, "A1").</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFromCell">The picture's position (for example, "A1").</param>
            <param name="width">The picture's width.</param>
            <param name="height">The picture's height.</param>
            <param name="unit">The length unit in which all length parameters are specified.</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells. Picture size will be determined by using GDI+.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFrom">The picture's position.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            <para>This method is not fully supported in .NET Standard and will set picture's width and height to zero.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells. Picture size will be determined by using GDI+.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFrom">The picture's position.</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            <para>This method is not fully supported in .NET Standard and will set picture's width and height to zero.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells. Picture size will be determined by using GDI+.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFromCell">The picture's position (for example, "A1").</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            <para>This method is not fully supported in .NET Standard and will set picture's width and height to zero.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells. Picture size will be determined by using GDI+.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFromCell">The picture's position (for example, "A1").</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            <para>This method is not fully supported in .NET Standard and will set picture's width and height to zero.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
            <param name="pictureStream">The picture's stream.</param>
            <param name="pictureFormat">The picture's format.</param>
            <param name="positionFrom">The picture's position (top-left corner).</param>
            <param name="positionTo">The picture's end position (bottom-right corner).</param>
            <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.String,System.String)">
            <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
            <param name="pictureStream">The picture's stream.</param>
            <param name="pictureFormat">The picture's format.</param>
            <param name="positionFromCell">The picture's position (top-left corner) (for example, "A1").</param>
            <param name="positionToCell">The picture's end position (bottom-right corner) (for example, "B2").</param>
            <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
            <remarks><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFrom">The picture's position (top-left corner).</param>
            <param name="positionTo">The picture's end position (bottom-right corner).</param>
            <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFrom">The picture's position (top-left corner).</param>
            <param name="positionTo">The picture's end position (bottom-right corner).</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFromCell">The picture's position (top-left corner) (for example, "A1").</param>
            <param name="positionToCell">The picture's end position (bottom-right corner) (for example, "B2").</param>
            <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String,System.String,GemBox.Spreadsheet.ExcelObjectSourceType)">
            <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
            <param name="picturePath">The picture's path.</param>
            <param name="positionFromCell">The picture's position (top-left corner) (for example, "A1").</param>
            <param name="positionToCell">The picture's end position (bottom-right corner) (for example, "B2").</param>
            <param name="sourceType">the picture's embedding or linking setting.</param>
            <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
            <remarks>
            <para><see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/>.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize"/>.</para>
            <para><paramref name="picturePath"/> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead.</para>
            <para>Adds the image with defined anchor properties.</para>
            </summary>
            <param name="pictureStream">Stream of the image to be added.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="positionFrom">Top left anchor cell.</param>
            <param name="positionTo">Bottom right anchor cell.</param>
            <param name="pictureFormat">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
            <remarks>If column or row offset is greater then that row height or that column width, excel will show image as that offset is set to 0.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead. Parameters <i>width</i> and <i>height</i> can, for example, be retrieved by using <see href="http://msdn.microsoft.com/en-us/library/93z9ee4x.aspx">Image.FromStream(Stream)</see> method and <see href="http://msdn.microsoft.com/en-us/library/system.drawing.image.size.aspx">Image.Size</see> property. Note that image instance must be disposed.</para>
            <para>Adds the image by using defined top left anchor property and default width/height.</para>
            </summary>
            <param name="pictureStream">Stream of the image to be added.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="positionFrom">Top left anchor cell.</param>
            <param name="pictureFormat">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,System.Int32,System.Int32,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead.</para>
            <para>Adds the image from specified fileName by using defined top left anchor property and defined width and height.</para>
            </summary>
            <param name="pictureStream">Stream of the image to be added.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="positionFrom">Top left anchor cell.</param>
            <param name="width">Image width (in pixels).</param>
            <param name="height">Image height (in pixels).</param>
            <param name="pictureFormat">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,System.Drawing.Rectangle,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead.</para>
            <para>Adds the image by using defined rectangle.</para>
            </summary>
            <param name="pictureStream">Stream of the image to be added.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="rectangle">The destination rectangle.</param>
            <param name="pictureFormat">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,System.Drawing.Rectangle,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)"/> method instead.</para>
            <para>Adds image from the image object by using defined rectangle.</para>
            </summary>
            <param name="pictureStream">Image stream.</param>
            <param name="rectangle">Destination rectangle.</param>
            <param name="pictureFormat">Picture format.</param>	
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead.</para>
            <para>Adds the image from specified fileName by using defined top left anchor property and default width/height.</para>
            </summary>
            <param name="picturePath">File name of the image to be added.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="positionFrom">Top left anchor cell.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead.</para>
            <para>Adds the image from specified fileName with defined anchor properties.</para>
            </summary>
            <param name="picturePath">File name of the image to be added.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="positionFrom">Top left anchor cell.</param>
            <param name="positionTo">Bottom right anchor cell.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
            <remarks>If column or row offset is greater then that row height or that column width, excel will show image as that offset is set to 0.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,System.Int32,System.Int32)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead.</para>
            <para>Adds the image from specified fileName by using defined top left anchor property and defined width and height.</para>
            </summary>
            <param name="picturePath">File name of the image to be added.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="positionFrom">Top left anchor cell.</param>
            <param name="width">Image width (in pixels).</param>
            <param name="height">Image height (in pixels).</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,System.Drawing.Rectangle)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)"/> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position"/> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode"/> properties instead.</para>
            <para>Adds the image from specified fileName by using defined rectangle.</para>
            </summary>
            <param name="picturePath">The fileName.</param>
            <param name="positioningMode">Positioning mode of the image.</param>
            <param name="rectangle">The destination rectangle.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Drawing.Rectangle)">
            <summary>
            <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)"/> method instead.</para>
            <para>Adds the image from specified fileName by using defined rectangle.</para>
            </summary>
            <param name="picturePath">The fileName.</param>
            <param name="rectangle">The destination rectangle.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPictureFormat">
            <summary>
            Picture formats.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Jpeg">
            <summary>
            Jpeg picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Png">
            <summary>
            Png picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Tiff">
            <summary>
            Tiff picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Gif">
            <summary>
            Gif picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Emf">
            <summary>
            Emf picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Wmf">
            <summary>
            Wmf picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Bmp">
            <summary>
            Bmp picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Exif">
            <summary>
            Exif picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Ico">
            <summary>
            Ico picture format.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPrintOptions">
            <summary>
            Stores MS Excel print and print related options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.VerticalCentered">
            <summary>
            <see langword="true"/> for printing sheet vertical centered, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.HorizontalCentered">
            <summary>
            <see langword="true"/> for printing sheet horizontal centered, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintHeadings">
            <summary>
            <see langword="true"/> for print headings, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>Except from printing and exporting to fixed document and rendering formats, such as PDF, XPS and image file formats, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintHeadings"/> is also supported when exporting to HTML file format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines">
            <summary>
            <see langword="true"/> for printing gridlines, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>Except from printing and exporting to fixed document and rendering formats, such as PDF, XPS and image file formats, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines"/> is also supported when exporting to HTML file format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintPagesInRows">
            <summary>
            <see langword="true"/> for printing pages in rows, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintBlackWhite">
            <summary>
            <see langword="true"/> for printing in black and white, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para> 
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.DraftQuality">
            <summary>
            <see langword="true"/> for printing in draft quality, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintCellNotes">
            <summary>
            <see langword="true"/> for printing cell notes, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.UseStartPageNumber">
            <summary>
            <see langword="true"/> for using start page number, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintNotesSheetEnd">
            <summary>
            <see langword="true"/> for printing notes at end of sheet, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.HeaderMargin">
            <summary>
            Header margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.3.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FooterMargin">
            <summary>
            Footer margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.3.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.TopMargin">
            <summary>
            Top margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.75.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.BottomMargin">
            <summary>
            Bottom margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.75.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.LeftMargin">
            <summary>
            Left margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.7.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.RightMargin">
            <summary>
            Right margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.7.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage">
            <summary>
            <see langword="true"/> for using 
            <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages"/>
            and <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages"/>, 
            <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>This property determines whether <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.AutomaticPageBreakScalingFactor"/>
            or <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages"/>
            and <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages"/>
            will be used in printing.</para>
            <para>Default value for this property is <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.AutomaticPageBreakScalingFactor">
            <summary>
            Scaling factor for automatic page breaks.
            </summary>
            <remarks>
            <para>Unit is one percent. Value must be between 10 and 400.</para>
            <para>Default value for this property is 100.</para>
            <para>MS Excel inserts automatic page breaks depending on this scaling factor. 
            Smaller it gets, bigger will be the distance between the two automatic page breaks.</para>
            <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage"/>
            will automatically be set to <see langword="false"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PageWidth">
            <summary>
            Gets the width of the page (in inches).
            </summary>
            <value>
            The width of the page.
            </value>
            <remarks>
            <para>If the <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType"/> is <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see>, this will return page width from printer settings.</para>
            <para>Accessing printer settings (if <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType"/> is <see cref="F:GemBox.Spreadsheet.PaperType.Custom"/>) doesn't work in Medium Trust.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PageHeight">
            <summary>
            Gets the height of the page (in inches).
            </summary>
            <value>
            The height of the page.
            </value>
            <remarks>
            <para>If the <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType"/> is <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see>, this will return page height from printer settings.</para>
            <para>Accessing printer settings (if <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType"/> is <see cref="F:GemBox.Spreadsheet.PaperType.Custom"/>) doesn't work in Medium Trust.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType">
            <summary>
            Gets or sets the type of the paper for the page. 
            </summary>
            <remarks>
            <para>Default value for this property is <see cref="F:GemBox.Spreadsheet.PaperType.A4"/>.</para>
            </remarks>
            <value>
            The type of the paper.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if type is set to
            <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see></exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.StartPageNumber">
            <summary>
            Start page number.
            </summary>
            <remarks>
            Default value for this property is 1.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages">
            <summary>
            Fit worksheet width to this number of pages (0 = use as many as needed).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage"/>
            will automatically be set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages">
            <summary>
            Fit worksheet height to this number of pages (0 = use as many as needed).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage"/>
            will automatically be set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.Portrait">
            <summary>
            <see langword="true"/> for portrait orientation, <see langword="false"/> for landscape orientation.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintResolution">
            <summary>
            Print resolution in DPI (dots per inch).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.VerticalPrintResolution">
            <summary>
            Vertical print resolution in DPI (dots per inch).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.NumberOfCopies">
            <summary>
            Number of copies to print.
            </summary>
            <remarks>
            <para>Default value for this property is 1.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPrintOptions.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPrintOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/>.
            </summary>
            <param name="obj">Object of <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> type.</param>
            <returns><see langword="true"/> if the specified <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperSize">
            <summary>
            MS Excel specific paper size / type index.
            </summary>
            <remarks>
            <para>
            Default value for this property is 0.
            </para>
            <para>
            Following table shows possible values:
            </para>
            <para>
            <font face="Arial" size="1">
            <table border="1" cellpadding="5" cellspacing="0">
            <tr>
            <th>Index</th>
            <th>Paper type</th>
            <th>Paper size</th>
            </tr>
            <tr>
            <td>0</td>
            <td>Undefined</td>
            <td>
            </td>
            </tr>
            <tr>
            <td>1</td>
            <td>Letter</td>
            <td>8.5in × 11in</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Letter small paper</td>
            <td>8.5in × 11in</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Tabloid paper</td>
            <td>11 in × 17in</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Ledger paper</td>
            <td>17 in × 11in</td>
            </tr>
            <tr>
            <td>5</td>
            <td>Legal paper</td>
            <td>8.5in × 14in</td>
            </tr>
            <tr>
            <td>6</td>
            <td>Statement paper</td>
            <td>5.5in × 8.5in</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Executive paper</td>
            <td>7.25in × 10.5in</td>
            </tr>
            <tr>
            <td>8</td>
            <td>A3</td>
            <td>297mm × 420mm</td>
            </tr>
            <tr>
            <td>9</td>
            <td>A4</td>
            <td>210mm × 297mm</td>
            </tr>
            <tr>
            <td>10</td>
            <td>A4 small paper</td>
            <td>210mm × 297mm</td>
            </tr>
            <tr>
            <td>11</td>
            <td>A5</td>
            <td>148mm × 210mm</td>
            </tr>
            <tr>
            <td>12</td>
            <td>B4</td>
            <td>250mm × 353mm</td>
            </tr>
            <tr>
            <td>13</td>
            <td>B5</td>
            <td>176mm × 250mm</td>
            </tr>
            <tr>
            <td>14</td>
            <td>Folio paper</td>
            <td>8.5in × 13in</td>
            </tr>
            <tr>
            <td>15</td>
            <td>Quarto paper</td>
            <td>215mm × 275mm</td>
            </tr>
            <tr>
            <td>16</td>
            <td>Standard paper</td>
            <td>10in × 14in</td>
            </tr>
            <tr>
            <td>17</td>
            <td>Standard paper</td>
            <td>11in × 17in</td>
            </tr>
            <tr>
            <td>18</td>
            <td>Note paper</td>
            <td>8.5in × 11in</td>
            </tr>
            <tr>
            <td>19</td>
            <td>#9 envelope</td>
            <td>3.875in × 8.875in</td>
            </tr>
            <tr>
            <td>20</td>
            <td>#10 envelope</td>
            <td>4.125in * 9.5in</td>
            </tr>
            <tr>
            <td>21</td>
            <td>#11 envelope</td>
            <td>4.5in * 10.375in</td>
            </tr>
            <tr>
            <td>22</td>
            <td>#12 envelope</td>
            <td>4.75in * 11in</td>
            </tr>
            <tr>
            <td>23</td>
            <td>#14 envelope</td>
            <td>5in * 11.5in</td>
            </tr>
            <tr>
            <td>24</td>
            <td>C paper</td>
            <td>17in * 22in</td>
            </tr>
            <tr>
            <td>25</td>
            <td>D paper</td>
            <td>22in * 34in</td>
            </tr>
            <tr>
            <td>26</td>
            <td>E paper</td>
            <td>34in * 44in</td>
            </tr>
            <tr>
            <td>27</td>
            <td>DL envelope</td>
            <td>110mm × 220mm</td>
            </tr>
            <tr>
            <td>28</td>
            <td>C5 envelope</td>
            <td>162mm × 229mm</td>
            </tr>
            <tr>
            <td>29</td>
            <td>C3 envelope</td>
            <td>324mm × 458mm</td>
            </tr>
            <tr>
            <td>31</td>
            <td>C6 envelope</td>
            <td>114mm × 162mm</td>
            </tr>
            <tr>
            <td>32</td>
            <td>C65 envelope</td>
            <td>114mm × 229mm</td>
            </tr>
            <tr>
            <td>33</td>
            <td>B4 envelope</td>
            <td>250mm × 353mm</td>
            </tr>
            <tr>
            <td>34</td>
            <td>B5 envelope</td>
            <td>176mm × 250mm</td>
            </tr>
            <tr>
            <td>35</td>
            <td>B6 envelope</td>
            <td>176mm × 125mm</td>
            </tr>
            <tr>
            <td>36</td>
            <td>Italy envelope</td>
            <td>110mm × 230mm</td>
            </tr>
            <tr>
            <td>37</td>
            <td>Monarch envelope</td>
            <td>3.875in × 7.5in</td>
            </tr>
            <tr>
            <td>38</td>
            <td>6 3/4 envelope</td>
            <td>3.625in * 6.5in</td>
            </tr>
            <tr>
            <td>39</td>
            <td>US standard fanfold</td>
            <td>14.875in × 11in</td>
            </tr>
            <tr>
            <td>40</td>
            <td>German standard fanfold</td>
            <td>8.5in × 12in</td>
            </tr>
            <tr>
            <td>41</td>
            <td>German legal fanfold</td>
            <td>8.5in * 13in</td>
            </tr>
            <tr>
            <td>42</td>
            <td>ISO B4</td>
            <td>250mm * 353mm</td>
            </tr>
            <tr>
            <td>43</td>
            <td>Japanese double postcard</td>
            <td>200mm * 148mm</td>
            </tr>
            <tr>
            <td>44</td>
            <td>Standard paper</td>
            <td>9in * 11in</td>
            </tr>
            <tr>
            <td>45</td>
            <td>Standard paper</td>
            <td>10in * 11in</td>
            </tr>
            <tr>
            <td>46</td>
            <td>Standard paper</td>
            <td>15in * 11in</td>
            </tr>
            <tr>
            <td>47</td>
            <td>Invite envelope</td>
            <td>220mm * 220mm</td>
            </tr>
            <tr>
            <td>50</td>
            <td>Letter extra paper</td>
            <td>9.275in * 12in</td>
            </tr>
            <tr>
            <td>51</td>
            <td>Legal extra paper</td>
            <td>9.275in * 15in</td>
            </tr>
            <tr>
            <td>52</td>
            <td>Tabloid extra paper</td>
            <td>11.69in * 18in</td>
            </tr>
            <tr>
            <td>53</td>
            <td>A4 extra paper</td>
            <td>236mm * 322mm</td>
            </tr>
            <tr>
            <td>54</td>
            <td>Letter transverse paper</td>
            <td>8.275in * 11in</td>
            </tr>
            <tr>
            <td>55</td>
            <td>A4 transverse paper</td>
            <td>210mm * 297mm</td>
            </tr>
            <tr>
            <td>56</td>
            <td>Letter extra transverse paper</td>
            <td>9.275in * 12in</td>
            </tr>
            <tr>
            <td>57</td>
            <td>SuperA/SuperA/A4 paper</td>
            <td>227mm * 356mm</td>
            </tr>
            <tr>
            <td>58</td>
            <td>SuperB/SuperB/A3 paper</td>
            <td>305mm * 487mm</td>
            </tr>
            <tr>
            <td>59</td>
            <td>Letter plus paper</td>
            <td>8.5in * 12.69in</td>
            </tr>
            <tr>
            <td>60</td>
            <td>A4 plus paper</td>
            <td>210mm * 330mm</td>
            </tr>
            <tr>
            <td>61</td>
            <td>A5 transverse paper</td>
            <td>148mm * 210mm</td>
            </tr>
            <tr>
            <td>62</td>
            <td>JIS B5 transverse paper</td>
            <td>182mm * 257mm</td>
            </tr>
            <tr>
            <td>63</td>
            <td>A3 extra paper</td>
            <td>322mm * 445mm</td>
            </tr>
            <tr>
            <td>64</td>
            <td>A5 extra paper</td>
            <td>174mm * 235mm</td>
            </tr>
            <tr>
            <td>65</td>
            <td>ISO B5 extra paper </td>
            <td>201mm * 276mm</td>
            </tr>
            <tr>
            <td>66</td>
            <td>A2 paper</td>
            <td>420mm * 594mm</td>
            </tr>
            <tr>
            <td>67</td>
            <td>A3 transverse paper</td>
            <td>297mm * 420mm</td>
            </tr>
            <tr>
            <td>68</td>
            <td>A3 extra transverse paper</td>
            <td>322mm * 445mm</td>
            </tr>
            </table>
            </font>
            </para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRow">
            <summary>
            Excel row contains row options and cell range with row cells.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelColumn"/>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">
            <summary>
            Gets only currently allocated cells for this row.
            </summary>
            <remarks>
            <para>Use this collection if you are reading entire Excel file (you don't know exact position of 
            cells with data). If writing values, using <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />
            property is recommended.</para>
            <para>This collection contains only allocated cells so it is faster as you avoid  
            checking every single cell in a row. You still need to check if a specific cell contains 
            any value (it can be empty).</para>
            </remarks>
            <example>
      <para>Following code reads entire XLSX file and displays all cells containing any data. Data types are also displayed.</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="ReadingFile" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="ReadingFile" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRow.Height">
            <summary>
            Gets or sets row height.
            </summary>
            <remarks>
            Unit is twip (1/20th of a point).
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRow.IsAutoFitted">
            <summary>
            Gets a value indicating whether this row height is automatically fitted.
            </summary>
            <value>
            <see langword="true"/> if this instance is automatically fitted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.CreateCells">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.GetHeight(GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Gets the height of row in arbitrary length unit.
            </summary>
            <param name="lengthUnit">The length unit in which to return row height.</param>
            <returns>The height of row in arbitrary length unit.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.SetHeight(System.Double,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Sets the height of row in arbitrary length unit.
            </summary>
            <param name="value">Row height value.</param>
            <param name="lengthUnit">The length unit in which <paramref name="value"/> is specified.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.AutoFit">
            <summary>
            Automatically fits row height to the minimum size required for all lines in the row cells to be visible.
            </summary>
            <remarks>
            <para>Auto-fit row height is a MS Excel feature and not a file format feature. When rows are
            auto-fit in MS Excel user interface, MS Excel will calculate current character heights and 
            set row height to the new numeric value.</para>
            <para>This method will set <see cref="P:GemBox.Spreadsheet.ExcelRow.Height"/> to the approximate 
            value (maxLinesCount * 255).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.Delete">
            <summary>
            Deletes this row from the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Inserts specified number of copied rows before the current row.
            </summary>
            <param name="rowCount">Number of rows to insert.</param>
            <param name="sourceRow">Source row to copy.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.InsertEmpty(System.Int32)">
            <summary>
            Inserts specified number of empty rows before the current row.
            </summary>
            <param name="rowCount">Number of rows to insert.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowCollection">
            <summary>
            Collection of excel rows (<see cref="T:GemBox.Spreadsheet.ExcelRow"/>).
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelRow"/>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowCollection.Item(System.Int32)">
            <summary>
            Gets the row with the specified index.
            </summary>
            <param name="index">The zero-based index of the row.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowCollection.GetEnumerableCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.Remove(System.Int32)">
            <summary>
            Removes the row with the specified index.
            </summary>
            <param name="rowIndex">The zero-based index of the row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes specified number of rows starting at the specified index.
            </summary>
            <param name="rowIndex">The zero-based index of the row.</param>
            <param name="rowCount">Number of rows to remove.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.InsertEmpty(System.Int32)">
            <summary>
            Inserts empty row at the specified index.
            </summary>
            <param name="rowIndex">The zero-based index of the row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.InsertEmpty(System.Int32,System.Int32)">
            <summary>
            Inserts specified number of empty rows at the specified index.
            </summary>
            <param name="rowIndex">The zero-based index of the row.</param>
            <param name="rowCount">Number of rows to insert.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Inserts copied row at the specified index.
            </summary>
            <param name="rowIndex">The zero-based index of the row.</param>
            <param name="sourceRow">Source row to copy.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.InsertCopy(System.Int32,System.Int32,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Inserts specified number of copied rows at the specified index.
            </summary>
            <param name="rowIndex">The zero-based index of the row.</param>
            <param name="rowCount">Number of rows to insert.</param>
            <param name="sourceRow">Source row to copy.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.AdjustArraySize(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.ParseName(System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixMergedRegionsIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixNamedRegionsIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixFormulaReferencesIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixPageBreaksIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixTableIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixDataValidationIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixConditionalFormatRuleIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RowNameToIndex(System.String)">
            <summary>
            Converts row name ("1", "2", ...) to row index (0, 1, ...).
            </summary>
            <param name="name">Row name.</param>
            <returns>Row index for the specified name.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RowIndexToName(System.Int32)">
            <summary>
            Converts row index (0, 1, ...) to row name ("1", "2", ...).
            </summary>
            <param name="rowIndex">Row index.</param>
            <returns>Row name for the specified index.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase">
            <summary>
            Base class for row, column and cell collections.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.Count">
            <summary>
            Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks).
            </summary>
            <remarks>
            The cells are internally allocated in rows and not in columns. In other words, when you load CSV/XLS/XLSX or 
            access some cells via worksheet.Cells property new rows and cells can be allocated but the column count 
            will stay the same. To find last used column in the worksheet, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange">ExcelWorksheet.GetUsedCellRange</see> method.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase"/>.
            </summary>
            <returns>
            An enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase"/>.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.GetEnumeratorCore">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowColumnCollectionBase">
            <summary>
            Base class for row and column collections.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase.SyncIndex">
            <summary>
            Used as part of cell synchronization mechanism.
            It is incremented by one each time the structure of worksheet is changed (row/column insert/delete).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase.DeleteInternalCore(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase.ClearCore">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1">
            <summary>
            Generic base class for row and column collections.
            </summary>
            <typeparam name="T">Type of the items in the collection, either <see cref="T:GemBox.Spreadsheet.ExcelRow"/> or <see cref="T:GemBox.Spreadsheet.ExcelColumn"/>.</typeparam>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Item(System.Int32)">
            <overloads>Gets the row / column with the specified index or name.</overloads>
            <summary>
            Gets the row / column with the specified index.
            </summary>
            <param name="index">The zero-based index of the row / column.</param>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellReferencing" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellReferencing" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Item(System.String)">
            <summary>
            Gets the row / column with the specified name.
            </summary>
            <param name="name">The name of the row / column.</param>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellReferencing" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellReferencing" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Count">
            <summary>
            Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks).
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.GetEnumerableCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.GetEnumeratorCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.AdjustArraySize(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ParseName(System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.DeleteInternalCore(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixAllIndexes(System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixAllIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixMergedRegionsIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixNamedRegionsIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixFormulaReferencesIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixPageBreaksIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixTableIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixDataValidationIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixConditionalFormatRuleIndexes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ClearCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelViewOptions">
            <summary>
            Stores MS Excel display and view related options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.FirstVisibleRow">
            <summary>
            Index of the first visible row in the worksheet.
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.FirstVisibleColumn">
            <summary>
            Index of the first visible column in the worksheet.
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ViewType">
            <summary>
            Gets and sets the view type. 
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="ViewType.Normal"/>.</para> 
            <para><see cref="P:GemBox.Spreadsheet.ExcelViewOptions.ViewType"/> is supported only for XLSX (Excel 2007+) files.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineRowButtonsBelow">
            <summary>
            Gets or sets whether outline row buttons are displayed below groups.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="GroupingAndOutline" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="GroupingAndOutline" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineColumnButtonsRight">ExcelWorksheet.OutlineColumnButtonsRight</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" />
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineColumnButtonsRight">
            <summary>
            Gets or sets whether outline column buttons are displayed on the right side of groups.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="GroupingAndOutline" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="GroupingAndOutline" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineRowButtonsBelow">ExcelWorksheet.OutlineRowButtonsBelow</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" />
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" />
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowFormulas">
            <summary>
            If true, MS Excel shows formulas. Otherwise, formula results are shown. 
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowGridLines">
            <summary>
            If true, MS Excel shows grid lines.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats. Use <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines"/> for printing gridlines.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowSheetHeaders">
            <summary>
            If true, MS Excel shows row and column headers.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowZeroValues">
            <summary>
            If true, MS Excel shows zero values. Otherwise, zero values are shown as empty cells.
            </summary>
            <remarks>
            Default value for this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowColumnsFromRightToLeft">
            <summary>
            If true, MS Excel shows columns from right to left.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowOutlineSymbols">
            <summary>
            If true, MS Excel shows outline symbols.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowInPageBreakPreview">
            <summary>
            If true, MS Excel shows worksheet in page break preview. Otherwise, normal view is used.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.Zoom">
            <summary>
            Magnification factor in normal view.
            </summary>
            <remarks>
            <para>Unit is one percent. Value must be between 10 and 400.</para>
            <para>Default value for this property is 100.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.PageBreakViewZoom">
            <summary>
            Magnification factor in page break view.
            </summary>
            <remarks>
            <para>Unit is one percent. Value must be between 10 and 400.</para>
            <para>Default value for this property is 60.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.SelectedCells">
            <summary>
            <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.SelectedRanges"/> property instead.</para>
            <para>Gets or sets the selected cells.</para>
            </summary>
            <value>
            The selected cells.
            </value>
            /* JK(2012-01-10): Added support for selected cells. Ticket: https://www.assembla.com/spaces/gemmeus/tickets/481 */
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelWorksheet">
            <summary>
            Excel worksheet is a table with additional properties, identified by a unique name.
            </summary>
            <remarks>
            <para>
            Worksheet in Microsoft Excel has limited size. 
            Number of rows (<see cref="T:GemBox.Spreadsheet.ExcelRow" />) is limited 
            to <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxRows">ExcelFile.MaxRows</see>. 
            Number of columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn" />) is limited 
            to <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxColumns">ExcelFile.MaxColumns</see>. 
            A specific cell (<see cref="T:GemBox.Spreadsheet.ExcelCell" />) can be accessed either trough 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells">ExcelRow.Cells</see>, 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells">ExcelColumn.Cells</see> or 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">ExcelWorksheet.Cells</see> property. 
            Whichever property used, there are two distinct methods of getting a cell reference; using <b>name</b>
            and using <b>index</b>. For example, full name of cell in top left corner of a worksheet is "A1". Translated
            to indexes, same cell would be 0,0 (zero row and zero column). If using 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells">ExcelRow.Cells</see> or 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells">ExcelColumn.Cells</see> to access a
            specific cell, only partial name or partial index must be used, providing unknown column or row information. 
            </para>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns" /> method.</para>
            </remarks>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellReferencing" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellReferencing" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
            <seealso cref="T:GemBox.Spreadsheet.ExcelRow" />
            <seealso cref="T:GemBox.Spreadsheet.ExcelColumn" />
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Type">
            <summary>
            Gets worksheet type.
            </summary>
            <value>
            The worksheet type.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.SyncIndex">
            <summary>
            Used as part of cell synchronization mechanism.
            It is incremented by one each time the structure of worksheet is changed (row/column insert/delete).
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Index">
            <summary>
            Gets worksheet zero-based index.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">
            <summary>
            Gets the worksheet pictures.
            </summary>
            <value>
            The worksheet pictures.
            </value>
            <remarks>
            Supported picture formats are listed in <see cref="T:GemBox.Spreadsheet.ExcelPictureFormat" />.
            </remarks>
            <seealso cref="T:GemBox.Spreadsheet.ExcelPicture" />
            <example>
      <para>Following code demonstrates how to use images:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Image" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Image" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Charts">
            <summary>
            Gets the worksheet charts. Not supported in XLS.
            </summary>
            <value>
            The worksheet charts.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.EmbeddedObjects">
            <summary>
            Gets the worksheet embedded objects. Supported only in XLSX.
            </summary>
            <value>
            The worksheet embedded objects.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasDataValidations">
            <summary>
            Gets a value indicating whether this sheet has any cells which have data validation features applied.
            </summary>
            <value>
            <see langword="true"/> if this sheet has any cells which have data validation features applied; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DataValidations">
            <summary>
            Gets the collection that expresses all data validation information for cells in a sheet which have data validation features applied.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.NamedRanges">
            <summary>
            Gets <see cref="T:GemBox.Spreadsheet.NamedRangeCollection" /> 
            containing descriptive names which are used to represent cells, ranges of cells, 
            formulas, or constant values.
            </summary>		
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges. At the end, code shows how to calculate worksheet formulas.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Formula" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Formula" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Hyperlinks">
            <summary>
            Gets hyperlinks in this sheet.
            </summary>
            <remarks>Supported only in xlsx.</remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Comments">
            <summary>
            Gets comments in this sheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Name">
            <summary>
            Gets or sets worksheet name. 
            </summary>
            <remarks>
            If not unique (worksheet with that name already exists in 
            <see cref="P:GemBox.Spreadsheet.ExcelFile.Worksheets">ExcelFile.Worksheets</see> collection) exception is thrown.
            </remarks>
            <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Rows">
            <summary>
            Gets collection of all rows (<see cref="T:GemBox.Spreadsheet.ExcelRow"/>) in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Columns">
            <summary>
            Gets collection of all columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn"/>) in the worksheet.
            </summary>
            <remarks>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns"/> method.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">
            <summary>
            Gets all the cells in the sheet.
            </summary>
            <value>
            All the cells in the sheet.
            </value>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellReferencing" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellReferencing" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-excel-range/204">Referencing ExcelCell and CellRange in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Sort">
            <summary>
            <para>Gets or sets the active <see cref="T:GemBox.Spreadsheet.SortState" />.
            Returns <see langword="null" /> if no <see cref="T:GemBox.Spreadsheet.SortState" /> is active.</para>
            <para><see cref="T:GemBox.Spreadsheet.SortState" /> is used to store sort settings and to apply sort on a range of cells.</para>
            <para>Active <see cref="T:GemBox.Spreadsheet.SortState" /> is loaded from and saved to XLSX file.</para>
            </summary>
            <value>
            The active <see cref="T:GemBox.Spreadsheet.SortState" /> or <see langword="null" /> if no <see cref="T:GemBox.Spreadsheet.SortState" /> is active.
            </value>
            <exception cref="T:System.ArgumentException">Sort range doesn't belong to this worksheet.</exception>
            <remarks>
            Use <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Boolean)" /> method to create or get a <see cref="T:GemBox.Spreadsheet.SortState" /> instance.
            </remarks>
            <example>
      <para>
        Following methods shows various ways to specify and apply a <see cref="T:GemBox.Spreadsheet.SortState" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Sort" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Sort" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-sort/113">Excel Sorting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Filter">
            <summary>
            <para>Gets or sets the active <see cref="T:GemBox.Spreadsheet.AutoFilter" />.
            Returns <see langword="null" /> if no <see cref="T:GemBox.Spreadsheet.AutoFilter" /> is active.</para>
            <para><see cref="T:GemBox.Spreadsheet.AutoFilter" /> is used to store filter settings and to apply filter on a range of cells.</para>
            <para>Active <see cref="T:GemBox.Spreadsheet.AutoFilter" /> is loaded from and saved to XLSX file.</para>
            </summary>
            <value>
            The active <see cref="T:GemBox.Spreadsheet.AutoFilter" /> or <see langword="null" /> if no <see cref="T:GemBox.Spreadsheet.AutoFilter" /> is active.
            </value>
            <exception cref="T:System.ArgumentException">Filter range doesn't belong to this worksheet.</exception>
            <remarks>
            Use <see cref="O:GemBox.Spreadsheet.CellRange.Filter" /> methods to create or get an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> instance.
            </remarks>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ConditionalFormatting">
            <summary>
            <para>Gets the conditional formatting rules applied on cell ranges of this sheet.</para>
            <para>Currently supported in XLSX only.</para>
            </summary>
            <value>
            The conditional formatting rules applied on cell ranges of this sheet.
            </value>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-conditional-formatting/105">Excel Conditional Formatting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.IgnoredErrors">
            <summary>
            <para>Gets the ignored errors applied on cell ranges of this sheet.</para>
            <para>Currently supported in XLS and XLSX.</para>
            </summary>
            <value>
            The ignored errors applied on cell ranges of this sheet.
            </value>
            <remarks>
      <para>
        A cell is considered to have an error condition when it meets one of the conditions specified in the <see cref="P:GemBox.Spreadsheet.IgnoredError.ErrorTypes" /> member.
        For example, if a cell is formatted as text but contains a numeric value, this is considered to be a potential error because the number won't be treated as a number, for example, in calculations.
      </para>
      <para>
        Note that this is simply a guess by the implementing application, and a recommendation to the user.
        Cells with the errors specified in <see cref="T:GemBox.Spreadsheet.IgnoredErrorTypes" /> may have perfectly valid reasons for being in such a state, for example a cell formatted as text which contains numeric Postal Codes or Order numbers.
        It is useful to format these cells as text so that leading zeros remain as part of the value instead of being removed.
      </para>
    </remarks><example>
      <para>
        Following example shows that cells A1 and B1 both contain numbers stored as text, and this error has been reviewed and specifically flagged to be no longer surfaced as an error to the user.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="IgnoredErrors" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="IgnoredErrors" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">
            <summary>
            Gets or sets the worksheet protection flag.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ProtectionSettings">
            <summary>
            Gets or sets worksheet protection properties. This settings will be used only if <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected"/> is set to <see langword="true"/>;
            Otherwise it will be ignored.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ProtectedRanges">
            <summary>
            Gets the protected ranges. Supported in XLSX only.
            </summary>
            <value>
            The protected ranges.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Visibility">
            <summary>
            Gets or sets the worksheet visible property.
            </summary>
            <remarks>
            <para>Workbook must contain at least one visible sheet.</para>
            <para>This property is available only in XLSX file format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width in 1/256th of the width of the zero character in default font.
            </summary>
            <value>
            The default column width in <see cref="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth256thPart">1/256th of the width of the zero character in default font</see>.
            </value>
            <remarks>
            This value is used as width for columns which don't have <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width"/> property explicitly set.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumn.Width"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height in twips (1/20th of a point). Not supported in XLS and ODS.
            </summary>
            <value>
            The default row height in <see cref="F:GemBox.Spreadsheet.LengthUnit.Twip">twips (1/20th of a point)</see>.
            </value>
            <remarks>
            This value is used as height for rows which don't have <see cref="P:GemBox.Spreadsheet.ExcelRow.Height"/> property explicitly set.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelRow.Height"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HorizontalPageBreaks">
            <summary>
            Gets collection of all horizontal page breaks 
            (<see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" />) in the worksheet.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.VerticalPageBreaks">
            <summary>
            Gets collection of all vertical page breaks 
            (<see cref="T:GemBox.Spreadsheet.VerticalPageBreak" />) in the worksheet.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Parent">
            <summary>
            Gets the parent <see cref="T:GemBox.Spreadsheet.ExcelFile"/> of this <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> instance.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasShape">
            <summary>
            Gets a value indicating whether this instance has shape.
            </summary>
            <value><see langword="true"/> if this instance has shape; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions">
            <summary>
            Contains MS Excel print and print related options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ViewOptions">
            <summary>
            Contains MS Excel display and view related options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HeadersFooters">
            <summary>
            Gets or sets headers/footers for the sheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasHeadersFooters">
            <summary>
            Returns true if worksheet has headers/footers.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Panes">
            <summary>
            Gets or sets the panes in the worksheet.
            </summary>
            <remarks>
            If there are no split or freeze panes in the worksheet, the value of this property is null.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasSplitOrFreezePanes">
            <summary>
            Returns true if worksheet has split or freeze panes.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.SelectedRanges">
            <summary>
            <para>Gets the selected ranges of cells in the worksheet.</para>
            <para>Supported only in XLSX.</para>
            </summary>
            <value>
            The selected ranges of cells in the worksheet.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.TabColor">
            <summary>
            <para>Gets or sets the worksheet tab color.</para>
            <para>Supported only in XLSX and HTML.</para>
            </summary>
            <value>
            The worksheet tab color.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.PivotTables">
            <summary>
            <para>Gets the collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s contained in this worksheet.</para>
            <para>Currently supported in XLSX only.</para>
            </summary>
            <value>
            The collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s contained in this worksheet.
            </value>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Tables">
            <summary>
            Gets the collection of all <see cref="T:GemBox.Spreadsheet.Tables.Table"/>s contained in this worksheet.
            </summary>
            <value>
            The collection of all <see cref="T:GemBox.Spreadsheet.Tables.Table"/>s contained in this worksheet.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.Clear">
            <summary>
            Clears this worksheet.
            </summary>
            <remarks>
            References to following members will become invalid after calling this method. If they are stored in external variables,
            you will need to get them again from worksheet.
            <example>
      <para>
        For example:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="ClearExcelWorksheet" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="ClearExcelWorksheet" />
    </example>
            Here is the list:
            <ul>
            <li><see cref="P:GemBox.Spreadsheet.ExcelWorksheet.DataValidations" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelRow" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Rows" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Columns" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelCell" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelPicture" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Charts" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.HorizontalPageBreaks" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.VerticalPageBreak" /> instance in <see cref="T:GemBox.Spreadsheet.VerticalPageBreak" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.NamedRange" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.NamedRanges" /></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Hyperlinks" /></li>
            </ul>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> into the current worksheet.
            </summary>
            <param name="dataTable">The <see cref="T:System.Data.DataTable"/> which will be inserted into the current worksheet.</param>
            <returns>Number of inserted rows.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-export-datatable-to-excel/501">Export DataTable into Excel sheet in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,GemBox.Spreadsheet.InsertDataTableOptions)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> into the current worksheet.
            </summary>
            <param name="dataTable">The <see cref="T:System.Data.DataTable"/> which will be inserted into the current worksheet.</param>
            <param name="options">The <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> which can be used to define settings for the insert operation.</param>
            <returns>Number of inserted rows.</returns>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-export-datatable-to-excel/501">Export DataTable into Excel sheet in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)">
            <summary>
            Extracts data to <see cref="T:System.Data.DataTable" /> with specified extract options, see <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions" />.
            </summary>
            <param name="dataTable">Destination <see cref="T:System.Data.DataTable" />.</param>
            <param name="options">Options that describe how data will be extracted, see <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions" />.</param>
            <example>
      <para>
        Following code demonstrates how to handle <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting" />.
        Code demonstrates how to make generic conversion from unsupported type to string.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="ExtractDataEvent" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="ExtractDataEvent" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-export-excel-to-datatable/502">Export Excel sheet into DataTable in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.Calculate">
            <summary>
            Calculates formula for every excel cell in this worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)">
            <summary>
            Creates a <see cref="T:System.Data.DataTable" /> and fills it with data from this <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> in a manner specified by
            create options, see <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions" />.
            </summary>
            <param name="options">Options that describe how <see cref="T:System.Data.DataTable" /> will be created and filled with data extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
            <returns><see cref="T:System.Data.DataTable" /> with data from specified cells.</returns>
            <example>
      <para>
        Following code demonstrates how to extract data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to <see cref="T:System.Data.DataTable" /> using <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)" /> method.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CreateDataTable" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CreateDataTable" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-create-datatable-from-excel/503">Create DataTable from Excel sheet in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange(System.Boolean)">
            <summary>
            Calculates cell range that is used in the worksheet.
            </summary>
            <param name="ignoreCellsWithoutValue">Specifies if allocated cells with <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> set to <see langword="null"/> are ignored.</param>
            <returns>Cell range that is used in the worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns">
            <summary>
            Iterates all rows and finds maximum number of used columns.
            </summary>
            <returns>Maximum number of occupied columns in this sheet.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.PasswordHash">
            <summary>
            Gets or sets the password hash for protected sheet.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            This property needs to be set to value of type ushort (property is of type int because ushort is not CLS compliant). 
            If you don't know which password hash corresponds to determinant password, make excel file using MS Excel, load it using GemBox.Spreadsheet, and read
            this property. Then reuse that value in your project.
            </remarks>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent">
            <summary>
            Event that fires when specific error occurs while extracting data to DataTable.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CellRange,GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean)">
            <summary>
            Extracts data from <see cref="T:GemBox.Spreadsheet.CellRange">specified range of cells</see> to a new <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="range">Cell range.</param>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="useFirstRowForColumnNames">If <see langword="true"/> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName"/> columns.</param>
            <returns>DataTable with data from specified cells.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution)">
            <summary>
            Extracts data from used cells of this worksheet to a new <see cref="T:System.Data.DataTable"/>. 
            <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see> is determined by the <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <returns>DataTable with data from used cells.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,GemBox.Spreadsheet.ExcelColumn[])">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean,GemBox.Spreadsheet.ExcelColumn[])">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="useFirstRowForColumnNames">If <see langword="true"/> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName"/> columns.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean,System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.ExcelColumn})">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="useFirstRowForColumnNames">If <see langword="true"/> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName"/> columns.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.ExcelColumn})">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.Delete">
            <summary>
            Deletes this worksheet from the workbook.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelColumn)">
            <overloads>Extracts data to <see cref="T:System.Data.DataTable"/>.</overloads>
            <summary>
            Extracts data to DataTable with the same column order as it is in ExcelWorksheet.
            </summary>
            <remarks>
            <para>DataTable has to have all the columns defined before calling this method. 
            Because DataColumnMapping objects are not used in this method, columns in DataTable have to have the same
            order as columns in ExcelWorksheet (starting from column defined in startColumn argument).</para>
            <para>You can customize error handling by using <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            <para>DataTable column type and corresponding cell value type need to be 'similar' data types. If that's not the case, then exception would be thrown.
            Note that numbers and string are not 'similar' data types. Numbers wouldn't be automatically converted to strings because of culture issues; someone would expect the number 12.4 is converted to "12.4" and someone else to "12,4".
            To make custom conversion, use <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            </remarks>
            <param name="dataTable">Destination DataTable.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="startColumn">Start ExcelColumn.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Data.Common.DataColumnMappingCollection,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Extracts data to DataTable with column mapping.
            </summary>
            <remarks>
            <para>DataTable has to have all the columns defined before calling this method. 
            How will data be extracted from ExcelColumn to DataTableColumn has to be defined
            in the dataColumnMappingCollection argument.</para>
            <para>You can customize error handling by using <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            <para>DataTable column type and corresponding cell value type need to be 'similar' data types. If that's not the case, then exception would be thrown.
            Note that numbers and string are not 'similar' data types. Numbers wouldn't be automatically converted to strings because of culture issues; someone would expect the number 12.4 is converted to "12.4" and someone else to "12,4".
            To make custom conversion, use <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            </remarks>
            <param name="dataTable">Destination DataTable.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="dataColumnMappingCollection">Column mapping.</param>
            <param name="startRow">Start ExcelRow.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractUsedRangeToDataTable(GemBox.Spreadsheet.ExtractDataOptions)">
            <summary>
            Extracts data from used cells of this worksheet to a new DataTable with columns of type object.
            </summary>
            <remarks>This method first calls <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange(System.Boolean)"/> method
            to find block of used cells in this worksheet. Then it creates a new <see cref="T:System.Data.DataTable"/> with the same
            number of columns as width of that range and with the column type of object. Finally, it extracts block of used cells to 
            <see cref="T:System.Data.DataTable"/> and returns filled <see cref="T:System.Data.DataTable"/>.
            </remarks>
            <param name="options">Options that describe how data will be extracted.</param>
            <returns>New DataTable.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange">
            <summary>
            Calculates cell range that is used in the worksheet (every allocated cell is considered used).
            </summary>
            <returns>Cell range that is used in the worksheet (every allocated cell is considered used).</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertCopy(System.String,GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Inserts a copy of an existing worksheet before the current worksheet.
            </summary>
            <param name="destinationWorksheetName">Name of the new worksheet.</param>
            <param name="sourceWorksheet">Source worksheet.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> at the specified row and column in 
            the current worksheet.
            </summary>
            <param name="dataTable">Source DataTable.</param>
            <param name="startRow">Index of the start row.</param>
            <param name="startColumn">Index of the start column.</param>
            <param name="columnHeaders">True to insert column names above data.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> at the specified position in 
            the current worksheet.
            </summary>
            <param name="dataTable">Source DataTable.</param>
            <param name="startCell">Name of start (top-left) cell.</param>
            <param name="columnHeaders">True to insert column names above data.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertEmpty(System.String)">
            <summary>
            Inserts an empty worksheet before the current worksheet.
            </summary>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ResolveCellStyle(System.Int32,System.Int32)">
            <summary>
            <para>Resolves the cell style.</para>
            <para>Use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style"/> property instead.</para>
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>The resolved cell style.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEventHandler">
            <summary>
            Delegate for handling the ExtractData events.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
            <summary>
            Collection of worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>).
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Item(System.Int32)">
            <overloads>Gets the worksheet with the specified index or name.</overloads>
            <summary>
            Gets the worksheet with the specified index.
            </summary>
            <param name="index">The zero-based index of the worksheet.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Item(System.String)">
            <summary>
            Gets the worksheet with the specified name.
            </summary>
            <param name="name">The name of the worksheet.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet">
            <summary>
            Gets or sets active worksheet.
            </summary>
            <remarks>
            <para>Active worksheet is the one selected when file is opened with Microsoft Excel. By default active worksheet 
            is the first one added with <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(GemBox.Spreadsheet.SheetType,System.String)"/> methods.</para>
            <para><b>GemBox.Spreadsheet Free</b> allows setting active worksheet to only one of the first 5 worksheets, otherwise active worksheet defaults to the first worksheet.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
            ExcelWorksheetCollection</see>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Remove(System.Int32)">
            <summary>
            Removes the worksheet with the specified index.
            </summary>
            <param name="worksheetIndex">The zero-based index of the worksheet.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Remove(System.String)">
            <summary>
            Removes the worksheet with the specified name.
            </summary>
            <param name="worksheetName">Worksheet name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.InsertEmpty(System.Int32,System.String)">
            <summary>
            Inserts empty worksheet at the specified index.
            </summary>
            <param name="worksheetIndex">The zero-based index of the worksheet.</param>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.InsertEmpty(System.Int32,GemBox.Spreadsheet.SheetType,System.String)">
            <summary>
            Inserts empty worksheet at the specified index.
            </summary>
            <param name="worksheetIndex">The zero-based index of the worksheet.</param>
            <param name="type">The sheet type.</param>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.InsertCopy(System.Int32,System.String,GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Inserts a copy of an existing worksheet at the specified index.
            </summary>
            <param name="worksheetIndex">The zero-based index of the worksheet.</param>
            <param name="worksheetName">Worksheet name.</param>
            <param name="sourceWorksheet">Source worksheet to copy.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)">
            <summary>
            Adds an empty worksheet to the end of the collection.
            </summary>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
            <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> is set to this worksheet.
            </remarks>
            <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(GemBox.Spreadsheet.SheetType,System.String)">
            <summary>
            Adds an empty worksheet to the end of the collection.
            </summary>
            <param name="type">The sheet type.</param>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
            <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> is set to this worksheet.
            </remarks>
            <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.AddCopy(System.String,GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Adds a copy of an existing worksheet to the end of the collection.
            </summary>
            <param name="destinationWorksheetName">Name of new worksheet.</param>
            <param name="sourceWorksheet">Source worksheet.</param>
            <returns>Newly created worksheet.</returns>
            <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> is set to this worksheet.
            </remarks>
            <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the worksheet at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the worksheet to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the worksheet.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
            ExcelWorksheetCollection</see>.
            </summary>
            <returns>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Contains(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Determines whether an <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> element is in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </summary>
            <param name="item">The <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> to locate in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.</param>
            <returns>
            True if <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> is found in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Contains(System.String)">
            <summary>
            Determines whether an <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> element with specified name is in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </summary>
            <param name="worksheetName">The name of the <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> to locate in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.</param>
            <returns>
            True if <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> with specified name is found in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>; otherwise, false.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataEventAction">
            <summary>
            Possible ways of proceeding after one of the events is fired while extracting to data table.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.ThrowException">
            <summary>
            Throw exception after event has been handled.
            </summary>
            <remarks>
            This value has been obsoleted and only affects obsoleted ExtractToDataTable() methods.
            It will have no effect when used with non-obsoleted <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)"/>
            overload.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.Continue">
            <summary>
            Continue extracting data to <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.StopReading">
            <summary>
            Stop extracting data to <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.SkipRow">
            <summary>
            Skip row.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataOptions">
            <summary>
            Options specified when extracting data to <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataOptions.None">
            <summary>
            None of the options is set. 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataOptions.StopAtFirstEmptyRow">
            <summary>
            Extracting data stops at the first empty row.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataOptions.SkipEmptyRows">
            <summary>
            When extracting data, skip all empty rows.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractToDataTableOptions">
            <summary>
            Represents options for extracting data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to <see cref="T:System.Data.DataTable" />.
            </summary>
            <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)" />
            <example>
      <para>
        Following code demonstrates how to handle <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting" />.
        Code demonstrates how to make generic conversion from unsupported type to string.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="ExtractDataEvent" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="ExtractDataEvent" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-export-excel-to-datatable/502">Export Excel sheet into DataTable in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn">
            <summary>
            Gets or sets the index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn"/> is ignored if <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.NumberOfRows">
            <summary>
            Gets or sets the number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection">
            <summary>
            Gets the collection used for mapping <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> columns to <see cref="T:System.Data.DataTable"/> columns.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn"/> is ignored if <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.ExtractDataOptions">
            <summary>
            Gets or sets <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.ExtractDataOptions"/>.
            </summary>
            <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ExtractDataOptions.None"/>.
            </remarks>
        </member>
        <member name="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting">
            <summary>
            Event that fires when converting <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value to <see cref="T:System.Data.DataTable"/> cell value.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExtractToDataTableOptions.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions"/> class.
            </summary>
            <param name="startRow">Index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="startColumn">Index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExtractToDataTableOptions.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions"/> class.
            </summary>
            <param name="startCell">Name of the first (top left) cell of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.FileFormatLimitations">
            <summary>
            Represents file format limitations when saving <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to some format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxRows">
            <summary>
            Get maximum number of rows. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxColumns">
            <summary>
            Get maximum number of columns. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxColors">
            <summary>
            Get maximum number of colors. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxCellStyles">
            <summary>
            Get maximum number of cell styles. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FileFormatLimitations.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes instance of <see cref="T:GemBox.Spreadsheet.FileFormatLimitations"/> class.
            </summary>
            <param name="maxRows">Maximum number of rows.</param>
            <param name="maxColumns">Maximum number of columns.</param>
            <param name="maxColors">Maximum number of colors.</param>
            <param name="maxCellStyles">Maximum number of cell styles.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.FillPatternStyle">
            <summary>
            <para>Represents the style of fill pattern being used for a cell format.</para>
            <para>Currently supported only in XLS and XLSX. For all other formats it defaults to either <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None" /> or <see cref="F:GemBox.Spreadsheet.FillPatternStyle.Solid" />.</para>
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle" />
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.None">
            <summary>
            <para>The fill style is <b>none</b> (no fill).</para>
            <para>When <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor"/> and/or <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor"/> are specified, a pattern of <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None"/> overrides them and means the cell has no fill.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Solid">
            <summary>
            <para>The fill style is <b>solid</b>.</para>
            <para>When solid is specified, the <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor"/> is the only color rendered, even when a <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor"/> is also specified.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray6">
            <summary>
            <b>6% Gray</b> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray12">
            <summary>
            <b>12% Gray</b> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray25">
            <summary>
            <b>25% Gray</b> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray50">
            <summary>
            <b>50% Gray</b> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray75">
            <summary>
            <b>75% Gray</b> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.HorizontalStripe">
            <summary>
            <b>Horizontal Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.VerticalStripe">
            <summary>
            <b>Vertical Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.DiagonalStripe">
            <summary>
            <b>Diagonal Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ReverseDiagonalStripe">
            <summary>
            <b>Reverse Diagonal Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.DiagonalCrosshatch">
            <summary>
            <b>Diagonal Crosshatch</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThickDiagonalCrosshatch">
            <summary>
            <b>Thick Diagonal Crosshatch</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinHorizontalStripe">
            <summary>
            <b>Thin Horizontal Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinVerticalStripe">
            <summary>
            <b>Thin Vertical Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinDiagonalStripe">
            <summary>
            <b>Thin Diagonal Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinReverseDiagonalStripe">
            <summary>
            <b>Thin Reverse Diagonal Stripe</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinHorizontalCrosshatch">
            <summary>
            <b>Thin Horizontal Crosshatch</b> pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinDiagonalCrosshatch">
            <summary>
            <b>Thin Diagonal Crosshatch</b> pattern.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Filter">
            <summary>
            Represents a base class for filters contained in <see cref="T:GemBox.Spreadsheet.AutoFilter"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Filter.FilterType">
            <summary>
            Gets the filter type.
            </summary>
            <value>
            The filter type.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Filter.Column">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Filter.Range">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.Filter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Filter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Filter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.FilterColumn">
            <summary>
            Represents filter and sort settings for a single filter column.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumn.Index">
            <summary>
            <para>Gets the column index relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> that this column filter applies to.</para>
            <para>Value is equal to or greater than zero and less than <see cref="P:GemBox.Spreadsheet.CellRange.Width" /> of the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" />.</para>
            </summary>
            <value>
            The column index relative to the <see cref="P:GemBox.Spreadsheet.AutoFilter.Range" /> that this filter column applies to.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumn.Filter">
            <summary>
            Gets the filter settings applied to this column or <see langword="null"/> if no filter settings are applied to this column.
            </summary>
            <value>
            The filter settings applied to this column or <see langword="null"/> if no filter settings are applied to this column.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumn.HiddenAutoButton">
            <summary>
            <para>Gets or sets a value indicating whether the <see cref="T:GemBox.Spreadsheet.AutoFilter"/> button for this column is hidden.</para>
            <para>Default value is <see langword="false"/>.</para>
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GemBox.Spreadsheet.AutoFilter"/> button for this column is hidden; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumn.ShowButton">
            <summary>
            <para>Gets or sets a value indicating whether the filter button is visible.</para>
            <para>For example, when the cell containing the filter button is merged with another cell, the filter button may be hidden, and not drawn.</para>
            <para>Default value is <see langword="true"/>.</para>
            </summary>
            <value>
            <see langword="true" /> if the filter button is visible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumn.Match">
            <summary>
            <para>Gets or sets the method that defines a set of criteria and determines whether the specified <see cref="T:GemBox.Spreadsheet.ExcelCell"/> meets those criteria.</para>
            <para>Default value is default method based on the settings of this filter.</para>
            </summary>
            <value>
            The method that defines a set of criteria and determines whether the specified <see cref="T:GemBox.Spreadsheet.ExcelCell"/> meets those criteria.
            </value>
            <remarks>
            <para>Use this property to override default method that is based on the settings of this filter.</para>
            <para>This member is not loaded from and saved to XLSX file since it is not supported by <b>Office Open XML</b> specification.
            It is used to customize <b>GemBox.Spreadsheet</b> functionality.</para>
            <para>If set to <see langword="null"/>, reverts to default method based on the settings of this filter.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumn.Sort">
            <summary>
            Gets the sort settings applied to this column or <see langword="null"/> if no sort settings are applied to this column.
            </summary>
            <value>
            The sort settings applied to this column or <see langword="null"/> if no sort settings are applied to this column.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.SetValuesFilter">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> to this column.</para>
            <para><see cref="T:GemBox.Spreadsheet.ValuesFilter"/> filters by a list of values.</para>
            <para>Use members of a returned <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> to specify filter settings.</para>
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.ValuesFilter"/>.</returns>
            <remarks>
            If this <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.SetTop10Filter">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.Top10Filter"/> to this column.</para>
            <para><see cref="T:GemBox.Spreadsheet.Top10Filter"/> filters by a top N (percent or number of items).</para>
            <para>Use members of a returned <see cref="T:GemBox.Spreadsheet.Top10Filter"/> to specify filter settings.</para>
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.Top10Filter"/>.</returns>
            <remarks>
            If this <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.SetCustomFilter">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.CustomFilter"/> to this column.</para>
            <para><see cref="T:GemBox.Spreadsheet.CustomFilter"/> filters by a one or two conditions (operators and values).</para>
            <para>Use members of a returned <see cref="T:GemBox.Spreadsheet.CustomFilter"/> to specify filter settings.</para>
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.CustomFilter"/>.</returns>
            <remarks>
            If this <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.SetDynamicFilter">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.DynamicFilter"/> to this column.</para>
            <para><see cref="T:GemBox.Spreadsheet.DynamicFilter"/> filters by a dynamic criteria that can change, either with the data itself (e.g., "above average") or with the current system date (e.g., show values for "today").</para>
            <para>Use members of a returned <see cref="T:GemBox.Spreadsheet.DynamicFilter"/> to specify filter settings.</para>
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.DynamicFilter"/>.</returns>
            <remarks>
            If this <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a filter (<see cref="P:GemBox.Spreadsheet.FilterColumn.Filter"/> is not equal to <see langword="null"/>), it will be overridden.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.SetSort">
            <summary>
            <para>Sets a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to this column.</para>
            <para>All other sort levels are cleared.</para>
            <para>Use members of a returned <see cref="T:GemBox.Spreadsheet.SortLevel"/> to specify sort settings.</para>
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.SortLevel"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.AddSort">
            <summary>
            <para>Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> to this column.</para>
            <para>Previous sort levels are maintained. If this <see cref="T:GemBox.Spreadsheet.FilterColumn"/> already specifies a sort level (<see cref="P:GemBox.Spreadsheet.FilterColumn.Sort"/> is not equal to <see langword="null"/>) it will be removed before a new one is added.</para>
            <para>Use members of a returned <see cref="T:GemBox.Spreadsheet.SortLevel"/> to specify sort settings.</para>
            </summary>
            <returns>A <see cref="T:GemBox.Spreadsheet.SortLevel"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.ClearFilter">
            <summary>
            Clears the filter from this <see cref="T:GemBox.Spreadsheet.FilterColumn"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.ClearSort">
            <summary>
            Clears the sort level from this <see cref="T:GemBox.Spreadsheet.FilterColumn"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.FilterColumn"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.FilterColumn"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.FilterColumnCollection">
            <summary>
            Represents a collection of filter columns.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumnCollection.Count">
            <summary>
            Gets the total number of filter columns in the <see cref="T:GemBox.Spreadsheet.FilterColumnCollection"/>.
            </summary>
            <value>
            The total number of filter columns in the <see cref="T:GemBox.Spreadsheet.FilterColumnCollection"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FilterColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.FilterColumn"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.FilterColumn"/> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.FilterColumn"/> to get.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.FilterColumn"/> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.FilterColumnCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the sort levels.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the sort levels.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FilterColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.FilterOperator">
            <summary>
            Operator enumerations for filtering.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterOperator.Equal">
            <summary>
            Show results which are equal to criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterOperator.LessThan">
            <summary>
            Show results which are less than criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterOperator.LessThanOrEqual">
            <summary>
            Show results which are less than or equal to criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterOperator.NotEqual">
            <summary>
            Show results which are not equal to criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterOperator.GreaterThanOrEqual">
            <summary>
            Show results which are greater than or equal to criteria.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterOperator.GreaterThan">
            <summary>
            Show results which are greater than criteria.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FilterType">
            <summary>
            Represents a filter type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterType.Values">
            <summary>
            A <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterType.Top10">
            <summary>
            A <see cref="T:GemBox.Spreadsheet.Top10Filter"/> type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterType.Custom">
            <summary>
            A <see cref="T:GemBox.Spreadsheet.CustomFilter"/> type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterType.Dynamic">
            <summary>
            A <see cref="T:GemBox.Spreadsheet.DynamicFilter"/> type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterType.Color">
            <summary>
            <para>A ColorFilter type.</para>
            <para>This filter is currently not supported by <b>GemBox.Spreadsheet</b>. It is preserved for XLSX round-trip.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FilterType.Icon">
            <summary>
            <para>An IconFilter type.</para>
            <para>This filter is currently not supported by <b>GemBox.Spreadsheet</b>. It is preserved for XLSX round-trip.</para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FixedWidthColumn">
            <summary>
            Class that represents column in Fixed-Width Text format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthColumn.LoadConverter">
            <summary>
            Gets or sets the converter for converting value from file to <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value when loading from Fixed-Width Text file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthColumn.SaveConverter">
            <summary>
            Gets or sets the converter for converting <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value to text when saving to Fixed-Width Text file.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthColumn.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthColumn"/> class.
            </summary>
            <param name="width">The column width.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthColumn.Width">
            <summary>
            Gets or sets a value that represents column width.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FixedWidthLoadOptions">
            <summary>
            Represents options for loading from Fixed-Width Text file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.ParseNumbers">
            <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double"/> value when loading Fixed-Width Text file. If <see langword="false"/>, numbers will be loaded as strings.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.NumberStyles">
            <summary>
            Gets or sets a value indicating number styles permitted in strings when parsing them to numeric types.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.FixedWidthColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.#ctor(GemBox.Spreadsheet.FixedWidthColumn[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.Columns">
            <summary>
            Gets the list of column definitions for Fixed-Width Text file. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being loaded from Fixed-Width Text file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.FormatProvider">
            <summary>
            Gets or sets the format provider for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.Encoding">
            <summary>
            Gets or sets the encoding for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.FixedWidthSaveOptions">
            <summary>
            Represents options for saving to Fixed-Width Text file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to Fixed-Width Text file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.ContentType">
            <summary>
            Gets the content-type for Fixed-Width Text file format: <b>"text/plain; charset=" + <see cref="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Encoding"/>.<see cref="P:System.Text.Encoding.WebName"/></b>.
            </summary>
            <value>
            The content-type for Fixed-Width Text file format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.FixedWidthColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.#ctor(GemBox.Spreadsheet.FixedWidthColumn[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Columns">
            <summary>
            Gets the List of column definitions for saving data. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being saved to Fixed-Width Text file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.FormatProvider">
            <summary>
            Gets or sets the format provider for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Encoding">
            <summary>
            Gets or sets the encoding for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.FontSettings">
            <summary>
            Contains font related settings which are used when printing a spreadsheet or exporting a spreadsheet to a file format that requires font information.
            </summary>
            <remarks>
            Setting the custom fonts location is usually used in medium trust environments to bypass file system operations restrictions imposed for file locations that are not under the application's jurisdiction.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.FontSettings.FontsBaseUri">
            <summary>
            Gets or sets base <see cref="T:System.Uri"/> where component looks for fonts. <see cref="T:System.Uri"/> path should end with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FontSettings.FontsBaseDirectory">
            <summary>
            Gets or sets base directory path where component looks for fonts. Directory path can be absolute or relative to <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FormattedCharacterRange">
            <summary>
            Represents a range of characters within the cell or comment text.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-inline-formatting/203">In-line Text Formatting example</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-comments/208">Comments example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.FormattedCharacterRange.StartIndex">
            <summary>
            Gets the zero-based starting character position.
            </summary>
            <value>
            The zero-based starting character position.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormattedCharacterRange.Length">
            <summary>
            Gets the number of characters.
            </summary>
            <value>
            The number of characters.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormattedCharacterRange.Text">
            <summary>
            Gets the text represented by this character range.
            </summary>
            <value>
            The text represented by this character range.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormattedCharacterRange.Font">
            <summary>
            Gets the font of the characters.
            </summary>
            <value>
            The font of the characters.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.FreeLimitEventArgs">
            <summary>
            Provides data for the <see cref="E:GemBox.Spreadsheet.SpreadsheetInfo.FreeLimitReached"/> event.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction">
            <summary>
            Gets or sets the choice for proceeding when free limit is reached.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FreeLimitEventArgs.File">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ExcelFile"/> on which limit was reached.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FreeLimitReachedAction">
            <summary>
            Type of action that can be chosen when free limit is reached.
            </summary>
            <example>
      <para>
        Following code demonstrates one way of testing performances of GemBox.Spreadsheet.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PerformanceCounter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PerformanceCounter" />
    </example>
        </member>
        <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.ThrowException">
            <summary>
            Throw <see cref="T:GemBox.Spreadsheet.FreeLimitReachedException"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.Stop">
            <summary>
            Stop reading/writing.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.ContinueAsTrial">
            <summary>
            Continue reading/writing using trial mode.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FreeLimitReachedException">
            <summary>
            Exception that occurs when free limit is reached.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.GradientShadingStyle">
            <summary>
            <para>Represents a shading style and variant of a gradient fill effect.</para>
            <para>Gradient fill is currently supported in XLSX and partially in rendering formats (PDF, XPS and image formats).</para>
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates fill formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Fill" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Fill" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.GradientStyle" />
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.None">
            <summary>
            Cell doesn't have any gradient fill effect.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.HorizontalHigh">
            <summary>
            Linear gradient where the first color starts at the top side of the cell and blends horizontally with the second color which starts at the bottom side of the cell [1 - 2].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.HorizontalLow">
            <summary>
            Linear gradient where the first color starts at the bottom side of the cell and blends horizontally with the second color which starts at the top side of the cell [2 - 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.Horizontal">
            <summary>
            Linear gradient where the first color starts at the top and bottom sides of the cell and blends horizontally with the second color which starts in the middle of the cell [1 - 2 - 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.VerticalLow">
            <summary>
            Linear gradient where the first color starts at the left side of the cell and blends vertically with the second color which starts at the right side of the cell [1 | 2].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.VerticalHigh">
            <summary>
            Linear gradient where the first color starts at the right side of the cell and blends vertically with the second color which starts at the left side of the cell [2 | 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.Vertical">
            <summary>
            Linear gradient where the first color starts at the left and right sides of the cell and blends vertically with the second color which starts in the middle of the cell [1 | 2 | 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.DiagonalUpHigh">
            <summary>
            Linear gradient where the first color starts at the top-left corner of the cell and blends diagonally with the second color which starts at the bottom-right corner of the cell [1 / 2].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.DiagonalUpLow">
            <summary>
            Linear gradient where the first color starts at the bottom-right corner of the cell and blends diagonally with the second color which starts at the top-left corner of the cell [2 / 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.DiagonalUp">
            <summary>
            Linear gradient where the first color starts at the top-left and bottom-right corners of the cell and blends diagonally with the second color which starts in the middle of the cell [1 / 2 / 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.DiagonalDownHigh">
            <summary>
            Linear gradient where the first color starts at the top-right corner of the cell and blends diagonally with the second color which starts at the bottom-left corner of the cell [2 \ 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.DiagonalDownLow">
            <summary>
            Linear gradient where the first color starts at the bottom-left corner of the cell and blends diagonally with the second color which starts at the top-right corner of the cell [1 \ 2].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.DiagonalDown">
            <summary>
            Linear gradient where the first color starts at the top-right and bottom-left corners of the cell and blends diagonally with the second color which starts in the middle of the cell [1 \ 2 \ 1].
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.FromTopLeftCorner">
            <summary>
            Path gradient where the first color starts at the top-left corner of the cell and blends with the second color which starts at the other corners of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.FromTopRightCorner">
            <summary>
            Path gradient where the first color starts at the top-right corner of the cell and blends with the second color which starts at the other corners of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.FromBottomLeftCorner">
            <summary>
            Path gradient where the first color starts at the bottom-left corner of the cell and blends with the second color which starts at the other corners of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.FromBottomRightCorner">
            <summary>
            Path gradient where the first color starts at the bottom-right corner of the cell and blends with the second color which starts at the other corners of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.FromCenter">
            <summary>
            Path gradient where the first color starts in the middle of the cell and blends with the second color which starts at the corners of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.GradientShadingStyle.Complex">
            <summary>
            Gradient fill effect is too complex to be described with this enumeration.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooter">
            <summary>
            Represents worksheet's header or footer.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooter.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.HeaderFooter"/> constructor.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooter.LeftSection">
            <summary>
            Gets or sets left section.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooter.CenterSection">
            <summary>
            Gets or sets center section.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooter.RightSection">
            <summary>
            Gets or sets right section.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooterFieldType">
            <summary>
            Represents types of <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> predefined fields.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.PageNumber">
            <summary>
            Page number.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.NumberOfPages">
            <summary>
            Total number of pages.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.Date">
            <summary>
            Current date.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.Time">
            <summary>
            Current time.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.SheetName">
            <summary>
            Sheet name.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.FileName">
            <summary>
            File name.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.FilePath">
            <summary>
            File path.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooterPage">
            <summary>
            Represents header/footer which should be shown on a specific worksheet page (first page, even pages and all other pages).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterPage.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.HeaderFooterPage"/> constructor.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooterPage.Header">
            <summary>
            Gets or sets header for this <see cref="T:GemBox.Spreadsheet.HeaderFooterPage"/> instance.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooterPage.Footer">
            <summary>
            Gets or sets footer for this <see cref="T:GemBox.Spreadsheet.HeaderFooterPage"/> instance.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooterSection">
            <summary>
            Represents <see cref="T:GemBox.Spreadsheet.HeaderFooter">header or footer</see> section.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> constructor.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooterSection.Content">
            <summary>
            Gets or sets <see cref="T:GemBox.Spreadsheet.HeaderFooter">header/footer</see> section content.
            </summary>
            <remarks>
            <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
            <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(System.String)">
            <summary>
            Appends text to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="text">Text to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(System.String,GemBox.Spreadsheet.ExcelFont)">
            <summary>
            Appends text to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="text">Text to append.</param>
            <param name="font">Desired <see cref="T:GemBox.Spreadsheet.ExcelFont"/> font.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
            <remarks>
            <para>Append method currently supports the following <see cref="T:GemBox.Spreadsheet.ExcelFont"/> properties:</para>
            <list type="bullet">
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Italic"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Strikeout"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Color"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle"/></description></item>
            </list>
            <para>For other formattings, set <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/> to some of special commands. 
            For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(GemBox.Spreadsheet.HeaderFooterFieldType)">
            <summary>
            Appends special header/footer field to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="fieldType">Special Header/Footer field.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(GemBox.Spreadsheet.HeaderFooterFieldType,GemBox.Spreadsheet.ExcelFont)">
            <summary>
            Appends special header/footer field to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="fieldType">Special Header/Footer field.</param>
            <param name="font">Desired <see cref="T:GemBox.Spreadsheet.ExcelFont"/> font.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
            <remarks>
            <para>Append method currently supports the following <see cref="T:GemBox.Spreadsheet.ExcelFont"/> properties:</para>
            <list type="bullet">
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Italic"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Strikeout"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Color"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle"/></description></item>
            </list>
            <para>For other formattings, set <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/> to some of special string commands. 
            For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.String)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="fileName">The fileName of the file that contains picture.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.String,System.Int32,System.Int32)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="fileName">The fileName of the file that contains picture.</param>
            <param name="width">Picture width (in pixels).</param>
            <param name="height">Picture height (in pixels).</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="pictureStream">Stream of the picture to be added.</param>
            <param name="imageFormat">Picture format.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Int32,System.Int32)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="pictureStream">Stream of the picture to be added.</param>
            <param name="imageFormat">Picture format.</param>
            <param name="width">Picture width (in pixels).</param>
            <param name="height">Picture height (in pixels).</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.GetPicture(GemBox.Spreadsheet.ExcelPictureFormat@,System.Int32@,System.Int32@)">
            <summary>
            Gets picture from <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="pictureFormat">Picture format.</param>
            <param name="width">Picture width (in pixels).</param>
            <param name="height">Picture height (in pixels).</param>
            <returns>If header/footer section contains picture, returns picture stream; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.HorizontalAlignmentStyle">
            <summary>
            Represents available horizontal alignment options used in <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" /> member. 
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General">
            <summary>
            <para>The horizontal alignment is general-aligned.</para>
            <para>Text data is left-aligned.</para>
            <para>Numbers, dates, and times are right-aligned.</para>
            <para>Boolean types are centered.</para>
            <para>Changing the alignment does not change the type of data.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Left">
            <summary>
            <para>The horizontal alignment is left-aligned.</para>
            <para>Aligns contents at the left edge of the cell.</para>
            <para>If an <see cref="P:GemBox.Spreadsheet.CellStyle.Indent"/> amount is specified, the contents of the cell is indented from the left by the specified number of character spaces.</para> 
            <para>The character spaces are based on the default font and font size for the workbook (<b><see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal"/></b> style).</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Center">
            <summary>
            The horizontal alignment is centered, meaning the text is centered across the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Right">
            <summary>
            The horizontal alignment is right-aligned, meaning that cell contents are aligned at the right edge of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Fill">
            <summary>
            <para>Indicates that the value of the cell should be filled across the entire width of the cell.</para>
            <para>This option is currently not supported in PDF, XPS and image file formats and defaults to <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General"/>.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Justify">
            <summary>
            <para>The horizontal alignment is justified (flush left and right).</para>
            <para>For each line of text, aligns each line of the wrapped text in a cell to the right and left (except the last line).</para>
            <para>If no single line of text wraps in the cell, then the text is not justified.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.CenterAcross">
            <summary>
            <para>The horizontal alignment is centered across multiple cells.</para>
            <para>This option is currently not supported in PDF, XPS and image file formats and defaults to <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Center"/>.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Distributed">
            <summary>
            <para>Indicates that each 'word' in each line of text inside the cell is evenly distributed across the width of the cell, with flush right and left margins.</para>
            <para>When there is also an <see cref="P:GemBox.Spreadsheet.CellStyle.Indent"/> value to apply, both the left and right side of the cell are padded by the indent value.</para>
            <para>A 'word' is a set of characters with no space character in them.</para>
            <para>Two lines inside a cell are separated by a carriage return.</para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HorizontalPageBreak">
            <summary>
            Specifies a horizontal position where the new page begins when the worksheet is printed.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.Row">
            <summary>
            Index of the first row of the new page.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.FirstColumn">
            <summary>
            Index of the first column of the new page.
            </summary>
            <remarks>
            Use 0 (first column) if you don't care.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.LastColumn">
            <summary>
            Index of the last column of the new page.
            </summary>
            <remarks>
            Use 255 (last column) if you don't care.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreak.CheckBreakIndex(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreak.CheckLimit(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.HorizontalPageBreakCollection">
            <summary>
            Collection of horizontal page breaks (<see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" />).
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.CreateItem(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreakCollection.MaxLastLimit">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.Add(System.Int32)">
            <overloads>Ads a new horizontal page break.</overloads>
            <summary>
            Ads a new horizontal page break above the specified row.
            </summary>
            <param name="row">The zero-based index of the row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ads a new horizontal page break above the specified row and within specified columns.
            </summary>
            <param name="row">The zero-based index of the row.</param>
            <param name="firstColumn">The zero-based index of the first column.</param>
            <param name="lastColumn">The zero-based index of the last column.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the horizontal page break at the specified index.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlLoadOptions">
            <summary>
            Represents options for loading from HyperText Markup Language File (HTML) format.
            </summary>
            <remarks>
            When importing, each paragraph will be translated to spreadsheet row.
            Text values will be merged in spreadsheet cell.
            Table rows and cells will be translated to spreadsheet rows and cells.
            All content inside table cell will be merged in spreadsheet cell, even nested tables and paragraphs.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.ParseNumbers">
            <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double"/> value when loading HTML file. If <see langword="false"/>, numbers will be loaded as strings.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.NumberStyles">
            <summary>
            Gets or sets a value indicating number styles permitted in strings when parsing them to numeric types.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.HtmlLoadOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.ParseFormatProvider">
            <summary>
            Gets or sets the format provider for the HTML file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.Encoding">
            <summary>
            Gets or sets the encoding for the HTML file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlSaveOptions">
            <summary>
            Represents options for saving to HyperText Markup Language File (HTML) format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectorySrcPath">
            <summary>
            Gets or sets the relative directory that will be used when referencing <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files in the HTML.
            </summary>
            <value>
            The relative directory that will be used when referencing <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files in the HTML.
            </value>
            <remarks>
            If value is <see langword="null" /> or <see cref="F:System.String.Empty" /> and HTML export is called with <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> overload, 
            value will be automatically set to <i>htmlFileNameWithoutExtension</i> + "_files". 
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="HtmlExportImages" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="HtmlExportImages" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath">
            <summary>
            Gets or sets the physical directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files will be saved.
            </summary>
            <value>
            The physical directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files will be saved.
            </value>
            <remarks>
            If value is <see langword="null" /> or <see cref="F:System.String.Empty" /> and HTML export is called with <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> overload, 
            value will be automatically set to <i>htmlFileNameWithoutExtension</i> + "_files". 
            This directory will be created in the same location as HTML file.
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="HtmlExportImages" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="HtmlExportImages" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType">
            <summary>
            Gets or sets the type of export.
            </summary>
            <value>
            The <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType"/> value for type of export.
            </value>
            <remarks>
            <para>For <see cref="F:GemBox.Spreadsheet.HtmlType.Html"/> and <see cref="F:GemBox.Spreadsheet.HtmlType.HtmlTable"/> values, pictures will be exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath"/> is specified or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.EmbedImages"/> is set to <see langword="true"/>.</para>
            <para>For <see cref="F:GemBox.Spreadsheet.HtmlType.Mhtml"/> value, pictures are always exported.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.WriteCellAddress">
            <summary>
            Gets or sets a value indicating whether each td HTML element should contain data-cell attribute with cell address for this cell.
            </summary>
            <remarks>
            If the value of this property is <see langword="true"/> then each td HTML element will contain data-cell attribute with cell address for this cell (for example data-cell="A1").
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.EmbedImages">
            <summary>
            Gets or sets a value indicating whether images are embedded directly within the HTML file in form of Base64 encoding.
            </summary>
            <remarks>
            If the value of this property is <see langword="true"/> then each image element will contain raw image data in its source attribute.
            This value doesn't change the pictures export behavior when using <see cref="F:GemBox.Spreadsheet.HtmlType.Mhtml"/>. 
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.HtmlSaveOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.ContentType">
            <summary>
            Gets the content-type for HTML file format:
            <list type="bullet">
            <item><description><b>message/rfc822</b> if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType"/> is <see cref="F:GemBox.Spreadsheet.HtmlType.Mhtml"/>, otherwise</description></item>
            <item><description><b>"text/html; charset=" + <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.Encoding"/>.<see cref="P:System.Text.Encoding.WebName"/></b>.</description></item>
            </list>
            </summary>
            <value>
            The content-type for HTML file format.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.Encoding">
            <summary>
            Gets or sets the encoding for the Html file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to HTML file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.PicturesDirectoryImgSrcPath">
            <summary>
            Gets or sets the pictures directory that will be used when referencing images in the HTML and Javascript.
            </summary>
            <value>
            The pictures directory that will be used when referencing images in the HTML.
            </value>
            <remarks>
            If value is <see langword="null" /> or empty string and HTML export is called with filePath parameter overload, 
            value will be automatically set to htmlFileNameWithoutExtension + "-Images". 
            This directory will be created in the same location as HTML file.        
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="HtmlExportImages" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="HtmlExportImages" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.PicturesDirectoryPath">
            <summary>
            Gets or sets the directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s will be physically saved.
            </summary>
            <value>
            The directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s will be physically saved.
            </value>
            <remarks>
            If value is <see langword="null" /> or empty string and HTML export is called with filePath parameter overload, 
            value will be automatically set to htmlFileNameWithoutExtension + "-Images".
            This directory will be created in the same location as HTML file.
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="HtmlExportImages" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="HtmlExportImages" />
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlExportPosition">
            <summary>
            Data that describes the current position in the exporter methods.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlExportPosition.#ctor(GemBox.Spreadsheet.CellRange,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelColumn,System.Int32,System.Int32)">
            <summary>
            Creates new HTML export position.
            </summary>
            <param name="range">Cell range.</param>
            <param name="sheetRow">Current sheet row.</param>
            <param name="sheetColumn">Current sheet column.</param>
            <param name="htmlRowIndex">Current HTML row index.</param>
            <param name="htmlColumnIndex">Current HTML column index.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.Range">
            <summary>
            Gets the cell range that is exporting to HTML.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.SheetRow">
            <summary>
            Gets the current sheet row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.SheetColumn">
            <summary>
            Gets the current sheet column.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.HtmlRowIndex">
            <summary>
            Gets row index for the current row in HTML table.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.HtmlColumnIndex">
            <summary>
            Gets column index for the current column in HTML table.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlType">
            <summary>
            Defines type of HTML export.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HtmlType.Html">
            <summary>
            Export entire HTML document. Pictures are exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath"/> is specified.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HtmlType.HtmlTable">
            <summary>
            Export HTML table and its content. Pictures are exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath"/> is specified.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HtmlType.Mhtml">
            <summary>
            Export entire HTML document and images to MIME HTML (MHTML) format. Pictures are always exported.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.IgnoredError">
            <summary>
            Represents a single ignored error for a range of cells.
            </summary>
            <remarks>
      <para>
        A cell is considered to have an error condition when it meets one of the conditions specified in the <see cref="P:GemBox.Spreadsheet.IgnoredError.ErrorTypes" /> member.
        For example, if a cell is formatted as text but contains a numeric value, this is considered to be a potential error because the number won't be treated as a number, for example, in calculations.
      </para>
      <para>
        Note that this is simply a guess by the implementing application, and a recommendation to the user.
        Cells with the errors specified in <see cref="T:GemBox.Spreadsheet.IgnoredErrorTypes" /> may have perfectly valid reasons for being in such a state, for example a cell formatted as text which contains numeric Postal Codes or Order numbers.
        It is useful to format these cells as text so that leading zeros remain as part of the value instead of being removed.
      </para>
    </remarks><example>
      <para>
        Following example shows that cells A1 and B1 both contain numbers stored as text, and this error has been reviewed and specifically flagged to be no longer surfaced as an error to the user.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="IgnoredErrors" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="IgnoredErrors" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.IgnoredError.AppliesTo">
            <summary>
            Gets or sets the sequence of references to cell ranges over which this ignored error is applied.
            </summary>
            <value>
            The sequence of references to cell ranges over which this ignored error is applied.
            </value>
            <exception cref="T:System.ArgumentException">Parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.IgnoredError.ErrorTypes">
            <summary>
            Gets or sets the ignored error types.
            </summary>
            <value>
            The ignored error types.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.IgnoredError.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.IgnoredError"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.IgnoredError"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.IgnoredErrorCollection">
            <summary>
            Represents a collection of an ignored errors in the worksheet.
            </summary>
            <remarks>
      <para>
        A cell is considered to have an error condition when it meets one of the conditions specified in the <see cref="P:GemBox.Spreadsheet.IgnoredError.ErrorTypes" /> member.
        For example, if a cell is formatted as text but contains a numeric value, this is considered to be a potential error because the number won't be treated as a number, for example, in calculations.
      </para>
      <para>
        Note that this is simply a guess by the implementing application, and a recommendation to the user.
        Cells with the errors specified in <see cref="T:GemBox.Spreadsheet.IgnoredErrorTypes" /> may have perfectly valid reasons for being in such a state, for example a cell formatted as text which contains numeric Postal Codes or Order numbers.
        It is useful to format these cells as text so that leading zeros remain as part of the value instead of being removed.
      </para>
    </remarks><example>
      <para>
        Following example shows that cells A1 and B1 both contain numbers stored as text, and this error has been reviewed and specifically flagged to be no longer surfaced as an error to the user.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="IgnoredErrors" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="IgnoredErrors" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.IgnoredErrorCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.IgnoredError"/>s contained in the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.IgnoredError"/>s contained in the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.IgnoredErrorCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.IgnoredError"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.IgnoredError"/> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.IgnoredError"/> to get.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.IgnoredError"/> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.IgnoredErrorCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.IgnoredErrorCollection.Add(System.String,GemBox.Spreadsheet.IgnoredErrorTypes)">
            <summary>
            Adds a new instance of an <see cref="T:GemBox.Spreadsheet.IgnoredError"/> which instructs application to ignore all errors specified in the <paramref name="errorTypes"/> parameter on the sequence of references to cell ranges specified in the <paramref name="appliesTo"/> parameter.
            </summary>
            <param name="appliesTo">The sequence of references to cell ranges over which the newly added ignored error is applied.</param>
            <param name="errorTypes">The errors which should be ignored.</param>
            <returns>A newly created and added <see cref="T:GemBox.Spreadsheet.IgnoredError"/>.</returns>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="appliesTo"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.IgnoredErrorCollection.Remove(GemBox.Spreadsheet.IgnoredError)">
            <summary>
            Removes the specified <see cref="T:GemBox.Spreadsheet.IgnoredError"/> from the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.
            </summary>
            <param name="ignoredError">The <see cref="T:GemBox.Spreadsheet.IgnoredError"/> to remove from the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.</param>
            <returns>
            <see langword="true"/> if <see cref="T:GemBox.Spreadsheet.IgnoredError"/> is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if <see cref="T:GemBox.Spreadsheet.IgnoredError"/> was not found in the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.IgnoredErrorCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:GemBox.Spreadsheet.IgnoredError"/> at the specified index of the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.IgnoredError"/> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.IgnoredErrorCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.IgnoredErrorCollection.Clear">
            <summary>
            Removes all <see cref="T:GemBox.Spreadsheet.IgnoredError"/>s from the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.IgnoredErrorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.IgnoredErrorCollection"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.IgnoredErrorCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.IgnoredErrorTypes">
            <summary>
            Represents an ignored error conditions.
            </summary>
            <remarks>
      <para>
        A cell is considered to have an error condition when it meets one of the conditions specified in the <see cref="P:GemBox.Spreadsheet.IgnoredError.ErrorTypes" /> member.
        For example, if a cell is formatted as text but contains a numeric value, this is considered to be a potential error because the number won't be treated as a number, for example, in calculations.
      </para>
      <para>
        Note that this is simply a guess by the implementing application, and a recommendation to the user.
        Cells with the errors specified in <see cref="T:GemBox.Spreadsheet.IgnoredErrorTypes" /> may have perfectly valid reasons for being in such a state, for example a cell formatted as text which contains numeric Postal Codes or Order numbers.
        It is useful to format these cells as text so that leading zeros remain as part of the value instead of being removed.
      </para>
    </remarks><example>
      <para>
        Following example shows that cells A1 and B1 both contain numbers stored as text, and this error has been reviewed and specifically flagged to be no longer surfaced as an error to the user.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="IgnoredErrors" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="IgnoredErrors" />
    </example>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.None">
            <summary>
            Do not ignore any error.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.EvaluationError">
            <summary>
            Ignore errors when cells contain formulas that result in an error such as '<b>#VALUE!</b>' or '<b>#DIV/0!</b>'.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.CalculatedColumn">
            <summary>
            <para>Ignore errors when cells contain a value different from a calculated column formula for tables.</para>
            <para>In other words, for a calculated column, a cell in that column is considered to have an error 
            if its formula is different from the calculated column formula, or doesn't contain a formula at all.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.TwoDigitTextYear">
            <summary>
            Ignore errors when cells contain dates in text form with years represented as 2 digits.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.NumberStoredAsText">
            <summary>
            Ignore errors when numbers are formatted as text or are preceded by an apostrophe.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.Formula">
            <summary>
            <para>Ignore errors when a formula in a region of your worksheet differs from other formulas in the same region.</para>
            <para>For example, if the formula in cell A1 is "=B1", and the formula in cell A3 is "=B3", but the formula in cell 
            A2 is not "=B2" but instead "=C2", then A1 and A3 both refer to the cell one column to their right, but A2 does not and so 
            is inconsistent with them.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.FormulaRange">
            <summary>
            <para>Ignore errors when formulas omit certain cells in a region.</para>
            <para>For example, if there is data in cells A1:A100 and formula contains the reference "=SUM(A1:A98)".</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.UnlockedFormula">
            <summary>
            Ignore errors when unlocked (editable) cells in the locked sheet contain formulas.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.EmptyCellReference">
            <summary>
            Ignore errors when formulas refer to empty cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.ListDataValidation">
            <summary>
            <para>Ignore errors when a cell's value in a Table does not comply with the Data Validation rules specified.</para>
            <para>For example, when a cell's value is inconsistent with the column data type for Tables connected to SharePoint data.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IgnoredErrorTypes.All">
            <summary>
            Ignore all errors.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ImageSaveFormat">
            <summary>
            An enumeration of supported image file formats when saving the <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to an image using a <see cref="T:GemBox.Spreadsheet.ImageSaveOptions"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Bmp">
            <summary>
            Bitmap (BMP) format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Gif">
            <summary>
            Graphics Interchange Format (GIF).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Jpeg">
            <summary>
            Joint Photographics Experts Group (JPEG) format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Png">
            <summary>
            Portable Network Graphics (PNG) format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Tiff">
            <summary>
            Tagged Image File Format (TIFF).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Wmp">
            <summary>
            Windows Media Photo format.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ImageSaveOptions">
            <summary>
            Represents a class which stores saving options for image files.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to image.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveAsImage" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveAsImage" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Format">
            <summary>
            Gets or sets the image format.
            </summary>
            <value>
            The image format.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.PageNumber">
            <summary>
            Gets or sets the zero-based page number of the document's page which should be saved to an image.
            </summary>
            <value>
            The zero-based page number of the document's page which should be saved to an image.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.PageCount">
            <summary>
            <para>Gets or sets the number of pages which should be saved to a multi-frame image.</para>
            <para>If image format doesn't support multiple frames, this property is ignored.</para>
            <para>Default value is 1.</para>
            <para>To save all pages, set value to <see cref="F:System.Int32.MaxValue"/>.</para>
            <para>Only Tagged Image File Format (TIFF) and Graphics Interchange Format (GIF) format images support multiple frames.</para>
            </summary>
            <value>
            The number of pages which should be saved to a multi-frame image.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Width">
            <summary>
            Gets or sets the image width in pixels.
            </summary>
            <value>
            The image width in pixels.
            </value>
            <remarks>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are not specified, then image size will be equal to the page size.</para>
            <para>If only one of the <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> or <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> is specified, then the specified dimension will be respected and other dimension will be calculated so that original aspect ratio is maintained.</para>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are specified, then both specified dimensions will be respected (which may result in non-uniformly scaled image, if aspect ratio is not equal to the original one.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Height">
            <summary>
            Gets or sets the image height in pixels.
            </summary>
            <value>
            The image height in pixels.
            </value>
            <remarks>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are not specified, then image size will be equal to the page size.</para>
            <para>If only one of the <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> or <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> is specified, then the specified dimension will be respected and other dimension will be calculated so that original aspect ratio is maintained.</para>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are specified, then both specified dimensions will be respected (which may result in non-uniformly scaled image, if aspect ratio is not equal to the original one.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save a page from the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
            <remarks>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.SelectionType.ActiveSheet"/> to optimize export since only active worksheet will be paginated.</para>
            <para>If you want to render a specific page from an un-active worksheet, set that worksheet as <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> or change this property to <see cref="F:GemBox.Spreadsheet.SelectionType.EntireFile"/>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ImageSaveOptions" /> class.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to image.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveAsImage" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveAsImage" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageSaveOptions.#ctor(GemBox.Spreadsheet.ImageSaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ImageSaveOptions" /> class for a specific image format.
            </summary>
            <param name="imageFormat">The image format.</param>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to image.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveAsImage" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveAsImage" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.DpiX">
            <summary>
            <para>Gets or sets the horizontal dots per inch (dpi) of the image.</para>
            <para>Default value is <see cref="F:System.Double.NaN"/>, which means that component specific default value will be used (currently 300).</para>
            </summary>
            <value>
            The horizontal dots per inch (dpi) of the image; that is, the dots per inch (dpi) along the x-axis.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is not greater than 0.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.DpiY">
            <summary>
            <para>Gets or sets the vertical dots per inch (dpi) of the image.</para>
            <para>Default value is <see cref="F:System.Double.NaN"/>, which means that component specific default value will be used (currently 300).</para>
            </summary>
            <value>
            The vertical dots per inch (dpi) of the image; that is, the dots per inch (dpi) along the y-axis.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is not greater than 0.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> is 1.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to image file formats.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.ContentType">
            <summary>
            Gets the content-type for image file format:
            <list type="bullet">
            <item><description><b>image/png</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format"/> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Png"/>,</description></item>
            <item><description><b>image/jpeg</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format"/> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Jpeg"/>,</description></item>
            <item><description><b>image/gif</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format"/> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Gif"/>,</description></item>
            <item><description><b>image/bmp</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format"/> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Bmp"/>,</description></item>
            <item><description><b>image/tiff</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format"/> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Tiff"/>,</description></item>
            <item><description><b>image/vnd.ms-photo</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format"/> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Wmp"/>.</description></item>
            </list>
            </summary>
            <value>
            The content-type for image file format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.IndividualBorder">
            <summary>
            Represents single border type of a cell.
            </summary>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
            <seealso cref="T:GemBox.Spreadsheet.CellBorders" />
            <seealso cref="T:GemBox.Spreadsheet.MultipleBorders" />
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.InlineStyles.CharacterRangeFormatHandler">
            <summary>
            Represents a handler for font formatting which is used to decouple <see cref="T:GemBox.Spreadsheet.ExcelFont"/> type from the font format data in the underlying storage.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.InlineStyles.RichTextRun">
            <summary>
            A rich text run is a region of text that share a common set of properties, such as formatting properties.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.InlineStyles.RichTextRun.Text">
            <summary>
            Gets the text content shown as part of a string.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.InlineStyles.RichTextRun.Font">
            <summary>
            <para>Gets the font.</para>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.InlineStyles.RichTextRun.HasFont">
            <summary>
            Gets a value indicating whether the run has applied font.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.InlineStyles.RichTextString">
            <summary>
            Some strings in the workbook may have formatting applied at a level that is more granular than the cell level.
            For instance, specific characters within the string may be bolded, have coloring, italicizing, etc. In these cases,
            the formatting is stored along with the text in instances of this class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InlineStyles.RichTextString.GetRichTextFormat``1(System.Int32,System.Int32,GemBox.Spreadsheet.Styles.FontData,System.Converter{GemBox.Spreadsheet.Styles.FontData,``0})">
            <summary>
            Gets the resolved formatting from a single range (rich text run) matching start index and length.
            If matching range is not found, resolves the formatting from cell style.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InlineStyles.RichTextString.SetRichTextFormat(System.Int32,System.Int32,GemBox.Spreadsheet.Styles.FontData,System.Action{GemBox.Spreadsheet.Styles.FontData})">
            <summary>
            Sets the formatting to all ranges (rich text runs) located inside start index and length.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InlineStyles.RichTextString.ApplyDirectCellFormat(System.Action{GemBox.Spreadsheet.Styles.FontData})">
            <summary>
            Sets the formatting to entire rich text string.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InlineStyles.RichTextString.Clone">
            <summary>
            Clones this instance of rich text string.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InlineStyles.RichTextString.Clone(GemBox.Spreadsheet.ExcelFile)">
            <summary>
            Clones this instance of rich text string in specified workbook.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.InsertDataTableOptions">
            <summary>
            Represents options for inserting data from <see cref="T:System.Data.DataTable"/> to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,GemBox.Spreadsheet.InsertDataTableOptions)"/>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-export-datatable-to-excel/501">Export DataTable into Excel sheet in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.StartColumn">
            <summary>
            Gets or sets the index of the first column of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.ColumnHeaders">
            <summary>
            Gets or sets a value indicating whether to insert column headers.
            </summary>
        </member>
        <member name="E:GemBox.Spreadsheet.InsertDataTableOptions.DataTableCellToExcelCellConverting">
            <summary>
            Event that fires when converting <see cref="T:System.Data.DataTable"/> cell value to <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> class.
            </summary>
            <param name="startRow">Index of the first row of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="startColumn">Index of the first column of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> class.
            </summary>
            <param name="startCell">Name of the first (top left) cell of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.InsertShiftDirection">
            <summary>
            Represents the possible cell insert shift directions.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.InsertShiftDirection.Right">
            <summary>
            Shift cells right.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.InsertShiftDirection.Down">
            <summary>
            Shift cells down.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LengthUnit">
            <summary>
            Represents the measurement unit for measuring length or distance.
            </summary>
            <remarks>
            <para>To convert values between various <see cref="T:GemBox.Spreadsheet.LengthUnit"/>s, use <see cref="T:GemBox.Spreadsheet.LengthUnitConverter"/>.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Pixel">
            <summary>
            Pixel (1 inch is equal as 96 pixels). 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Point">
            <summary>
            Point (1 inch is equal as 72 points).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Inch">
            <summary>
            Inch.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Millimeter">
            <summary>
            Millimeter (10 millimeters are equal as 1 centimeter).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Centimeter">
            <summary>
            Centimeter (1 inch is around 2.54 centimeters).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Twip">
            <summary>
            Twip (twentieth of a point, 1 point is equal as 20 twips).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Emu">
            <summary>
            English Metric Unit (1 point is equal as 12,700 EMUs)
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth256thPart">
            <summary>
            Unit is 1/256th of the width of the zero character in default font (width of zero character is fixed to 7 pixel).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth">
            <summary>
            Unit is the width of the zero character in default font (width of zero character is fixed to 7 pixel).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LengthUnitConverter">
            <summary>
            Utility class used for converting values between various <see cref="T:GemBox.Spreadsheet.LengthUnit"/> measurement units.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.LengthUnitConverter.Convert(System.Double,GemBox.Spreadsheet.LengthUnit,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Converts the specified <paramref name="length"/> from <paramref name="sourceUnit"/> measurement unit to <paramref name="destinationUnit"/> measurement unit.
            </summary>
            <param name="length">The length that will be converted.</param>
            <param name="sourceUnit">The source measurement unit.</param>
            <param name="destinationUnit">The destination measurement unit.</param>
            <returns>The <paramref name="length"/> expressed in <paramref name="destinationUnit"/> measurement unit.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.LineStyle">
            <summary>
            Represents the line style of a border in a cell.
            </summary>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellBorder.LineStyle" />
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.None">
            <summary>
            The line style of a border is none (no border visible).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Thin">
            <summary>
            The line style of a border is thin.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Medium">
            <summary>
            The line style of a border is medium.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Dashed">
            <summary>
            The line style of a border is dashed.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Dotted">
            <summary>
            The line style of a border is dotted.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Thick">
            <summary>
            The line style of a border is thick.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.DoubleLine">
            <summary>
            Obsolete. Use <see cref="F:GemBox.Spreadsheet.LineStyle.Double"/> instead.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Double">
            <summary>
            The line style of a border is double line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Hair">
            <summary>
            The line style of a border is hairline.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashed">
            <summary>
            The line style of a border is medium dashed.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.DashDot">
            <summary>
            The line style of a border is dash-dot.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashDot">
            <summary>
            The line style of a border is medium dash-dot.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.DashDotDot">
            <summary>
            The line style of a border is dash-dot-dot.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashDotDot">
            <summary>
            The line style of a border is medium dash-dot-dot.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.SlantDashDot">
            <summary>
            <para>The line style of a border is slant-dash-dot.</para>
            <para>This option is currently not supported in PDF, XPS and image file formats and defaults to <see cref="F:GemBox.Spreadsheet.LineStyle.MediumDashDot"/>.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.SlantedDashDot">
            <summary>
            Obsolete. Use <see cref="F:GemBox.Spreadsheet.LineStyle.SlantDashDot"/> instead.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LoadOptions">
            <summary>
            Represents a base class for loading options of various file formats.
            </summary>
            <remarks>
            Following classes inherit from this base class:
            <list type="bullet">
            <item><description><see cref="T:GemBox.Spreadsheet.XlsxLoadOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.XlsLoadOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.OdsLoadOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.CsvLoadOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.HtmlLoadOptions" /></description></item>
            </list>
            </remarks>
            <seealso cref="O:GemBox.Spreadsheet.ExcelFile.Load" />
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Load" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Load" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.XlsxDefault">
            <summary>
            Gets the default options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.XlsDefault">
            <summary>
            Gets the default options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.OdsDefault">
            <summary>
            Gets the default options for loading from OpenDocument Spreadsheet file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.CsvDefault">
            <summary>
            Gets the default options for loading from Character Separated Values file format.
            </summary>
            <remarks>
            <b>MS Excel</b> uses ';' as default if current culture uses ',' for decimal separator. <b>GemBox.Spreadsheet</b> always uses ','.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.HtmlDefault">
            <summary>
            Gets the default options for loading from HyperText Markup Language File (HTML) format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.LoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.LoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.MergedCellRange.Comment">
            <summary>
            Gets or sets cell comment.
            </summary>
            <remarks>
            <para>
            You can set comment text, set whether comment will be visible during loading xls file or not.
            Additionally you can get column or row of the excel cell to which this comment is assigned.
            </para>
            </remarks>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Comment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Comment" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.MergedCellRange.Hyperlink">
            <summary>
            Gets or sets cell hyperlink.
            </summary>
            <remarks>
            <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.MergedCellRange.Formula">MergedCellRange.Formula</see>.</para>
            <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
            </remarks> 
        </member>
        <member name="P:GemBox.Spreadsheet.MergedCellRange.Formula">
            <summary>
            Gets or sets merged range formula string.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.MultipleBorders">
            <summary>
            Represents multiple border types of a cell.
            </summary>
            <remarks>
      <para>
        Diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp" />) and diagonal-down (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown" /> / <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown" />)
        always share the same color and line style.
      </para>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates border formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Border" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Border" />
    </example>
            <seealso cref="T:GemBox.Spreadsheet.CellBorders" />
            <seealso cref="T:GemBox.Spreadsheet.IndividualBorder" />
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.InsideHorizontal">
            <summary>
            Inside horizontal borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.InsideVertical">
            <summary>
            Inside vertical borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Horizontal">
            <summary>
            Horizontal borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Vertical">
            <summary>
            Vertical borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Diagonal">
            <summary>
            Diagonal borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Outside">
            <summary>
            Outside borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Inside">
            <summary>
            Inside borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.All">
            <summary>
            All borders except diagonal.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.NamedRange">
            <summary>
            Represents a named range in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRange.Name">
            <summary>
            Gets the named range name.
            </summary>
            <value>The named range name.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRange.GlobalName">
            <summary>
            gets global flag
            </summary>
            <value>if this name is global</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRange.Range">
            <summary>
            Gets or sets the named cell range.
            </summary>
            <value>The named cell range.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.Delete">
            <summary>
            Deletes this named range from the named ranges collection.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.NamedRange"/> and is equal to this <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.op_Equality(GemBox.Spreadsheet.NamedRange,GemBox.Spreadsheet.NamedRange)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.NamedRange"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.NamedRange"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.NamedRange"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.NamedRange"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.op_Inequality(GemBox.Spreadsheet.NamedRange,GemBox.Spreadsheet.NamedRange)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.NamedRange"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.NamedRange"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.NamedRange"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.NamedRange"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.NamedRangeCollection">
            <summary>
            Collection of the descriptive names which are used 
            to represent cells, ranges of cells, formulas, or constant values.
            </summary>		
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges. At the end, code shows how to calculate worksheet formulas.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Formula" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Formula" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Count">
            <summary>
            Gets the number of named ranges contained in the collection.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Item(System.Int32)">
            <overloads>Gets the <see cref="T:GemBox.Spreadsheet.NamedRange"/> with 
            the specified index or name.</overloads>
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.NamedRange"/> at the specified index.
            </summary>
            <param name="index">Range index.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.NamedRange"/> with the specified name.
            </summary>
            <param name="name">Range name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange)">
            <overloads>Adds a new global or local named range.</overloads>
            <summary>
            Adds a new named range. Named ranges are used to represent cells, ranges of cells,
            formulas or constant values.
            </summary>		
            <param name="name">The user-defined name.</param>
            <param name="range">The range to be referred by name.</param>
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells,
            formulas, or constant values. Labels can be used in formulas that refer to data on the same
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges. At the end, code shows how to calculate worksheet formulas.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Formula" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Formula" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
            <summary>
            Adds a new named range. Named ranges are used to represent cells, ranges of cells,
            formulas or constant values.
            </summary>		
            <param name="name">The user-defined name.</param>
            <param name="range">The range to be referred by name.</param>
            <param name="globalName">sets the range as global if set to true</param>
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells,
            formulas, or constant values. Labels can be used in formulas that refer to data on the same
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges. At the end, code shows how to calculate worksheet formulas.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Formula" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Formula" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintArea(GemBox.Spreadsheet.CellRange)">
            <summary>
            Sets print area.
            </summary>
            <param name="range">Range of cells that we want set as print area.</param>
            <remarks>
            If specified, print area is used when exporting to HTML, PDF, XPS and image file formats as cell range which will be exported in the output file format.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintArea(GemBox.Spreadsheet.CellRange[])">
            <summary>
            <para>Sets multi-range print area.</para>
            <para>Multi-range print area is currently supported in XLSX only.</para>
            </summary>
            <param name="ranges">Ranges of cells that we want set as print area.</param>
            <remarks>
            If specified, print area is used when exporting to HTML, PDF, XPS and image file formats as cell range which will be exported in the output file format.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintArea(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.CellRange})">
            <summary>
            <para>Sets multi-range print area.</para>
            <para>Multi-range print area is currently supported in XLSX only.</para>
            </summary>
            <param name="ranges">Ranges of cells that we want set as print area.</param>
            <remarks>
            If specified, print area is used when exporting to HTML, PDF, XPS and image file formats as cell range which will be exported in the output file format.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelRow,System.Int32)">
            <summary>
            Sets print titles (rows to repeat at top).
            </summary>
            <param name="startRow">First row.</param>
            <param name="numberOfRows">Number of rows that repeat.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelColumn,System.Int32)">
            <summary>
            Sets print titles (columns to repeat at left).
            </summary>
            <param name="startColumn">First column.</param>
            <param name="numberOfColumns">Number of columns that repeat.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelColumnRowBase,System.Int32,GemBox.Spreadsheet.ExcelColumnRowBase,System.Int32)">
            <summary>
            Sets print titles.
            </summary>
            <param name="startRow">First row.</param>
            <param name="numberOfRows">Number of rows that repeat.</param>
            <param name="startColumn">First column.</param>
            <param name="numberOfColumns">Number of columns that repeat.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/>
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataDelegateEventArgs">
            <summary>
            Arguments of ExtractDataDelegate.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.ExcelValue">
            <summary>
            Value of the <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.DataTableValue">
            <summary>
            Value of the <see cref="T:System.Data.DataTable"/> cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.ErrorID">
            <summary>
            Description of error that occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.Mapping">
            <summary>
            Mapping of column which contains a cell where error occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.WorksheetRow">
            <summary>
            <see cref="T:GemBox.Spreadsheet.ExcelRow"/> which contains a cell where error occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.DestinationTable">
            <summary>
            Destination <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.DataTableRow">
            <summary>
            Index of <see cref="T:System.Data.DataTable"/> row where an error has occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.Action">
            <summary>
            Defines how the error will be handled.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataError">
            <summary>
            Possible errors that can occur while extracting to DataTable.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataError.WrongType">
            <summary>
            Error that indicates that data in ExcelWorksheet can't convert to <see cref="T:System.Data.DataTable"/> type.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.IoOperation">
            <summary>
            Possible operations that can fire notification events.
            </summary>
            <remarks>
            This enumeration is used as event argument in notification events.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsReading">
            <summary>
            XLS reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.CsvReading">
            <summary>
            CSV reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsWriting">
            <summary>
            XLS writing methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.CsvWriting">
            <summary>
            CSV writing methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsxReading">
            <summary>
            XLSX reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsxWriting">
            <summary>
            XLSX writing methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.OdsReading">
            <summary>
            ODS reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.OdsWriting">
            <summary>
            ODS writing methods.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.IoWarningEventArgs">
            <summary>
            Warning event arguments class used by the event which is raised on warning happens in the excel lite library
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.IoWarningEventArgs.FileName">
            <summary>
            Gets the file name passed to the XLS / CSV file reading / writing method.
            </summary>
            <remarks>
            You can use this property to handle different files in a different way inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.IoWarningEventArgs.Operation">
            <summary>
            Indicates which operation caused this event to fire.
            </summary>
            <remarks>
            You can use this property to handle XLS / CSV or reading / writing operations differently 
            inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.IoWarningEventArgs.WarningMsg">
            <summary>
            Gets the message explaining the specific warning.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.IoWarningEventHandler">
            <summary>
            Delegate for handling the notification events.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LimitEventArgs">
            <summary>
            Event parameters used for the <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitNear">ExcelFile.LimitNear</see> and <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached">ExcelFile.LimitReached</see> events.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.FileName">
            <summary>
            Gets the file name passed to the XLS / CSV file reading / writing method.
            </summary>
            <remarks>
            You can use this property to handle different files in a different way inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.Operation">
            <summary>
            Indicates which operation caused this event to fire.
            </summary>
            <remarks>
            You can use this property to handle XLS / CSV or reading / writing operations differently 
            inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.MaxRowCount">
            <summary>
            Gets the maximum number of rows used.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.WorksheetCount">
            <summary>
            Gets the number of worksheets used.
            </summary>
            <remarks>
            <para>For CSV files, this is always 1 (as only 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> is used).</para>
            <para>When writing XLS files, warning worksheet is not counted.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.WriteWarningWorksheet">
            <summary>
            Gets or sets whether the warning worksheet should be created when writing XLS file.
            </summary>
            <remarks>
            This property is ignored for CSV files and when reading XLS files.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.LimitEventHandler">
            <summary>
            Delegate for handling the <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitNear">ExcelFile.LimitNear</see> and <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached">ExcelFile.LimitReached</see> events.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.OdsOptions">
            <summary>
            Options specified when loading ODS files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.None">
            <summary>
            Do not preserve ODS parts and ignore display values (display strings). Only parts recognized 
            by GemBox.Spreadsheet API will be loaded.
            Use this if you are just loading ODS file or you don't want to preserve unrecognized 
            ODS parts for next save.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.PreserveKeepOpen">
            <summary>
            Preserves unrecognized ODS parts in a way it keeps loaded file open. Use if locking of input file
            for reading is not a problem and you want to save RAM/CPU when working with large files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.PreserveMakeCopy">
            <summary>
            Preserves unrecognized ODS parts in a way it makes a copy of input file in memory. Use if 
            locking of input file presents a problem or you are not working with large files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.ReadDisplayValues">
            <summary>
            Reads display values instead of stored values. Values in ODS are stored as value - display string pairs.
            Normally stored value is read but that looses number formatting. If you want to read value as
            formatted display string (for example, date as "Wednesday, May 5th, 2009" string), set this flag.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.RowColumnResolutionMethod">
            <summary>
            Defines different methods of <see cref="T:GemBox.Spreadsheet.CellStyle"/> resolution.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.RowColumnResolutionMethod.RowOverColumn">
            <summary>
            Row has precedence over column.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.RowColumnResolutionMethod.ColumnOverRow">
            <summary>
            Column has precedence over row.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="T:GemBox.Spreadsheet.SheetHeaderFooter">
            <summary>
            Represents sheet header/footer.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DifferentFirst">
            <summary>
            Gets or sets if header/footer is different on the first page. 
            If <see langword="true"/>, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader"/> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter"/> are on the first page.
            If <see langword="false"/>, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader"/> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter"/> are ignored.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DifferentOddEven">
            <summary>
            Gets or sets if there are different headers/footers on the even and odd pages.
            If <see langword="true"/>, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Header"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer"/> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter"/> specify page header and footer values for odd
            and even pages. 
            If <see langword="false"/> then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Header"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer"/> is used, even when <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter"/> are present.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter">
            <summary>
            Gets or sets even footer.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader">
            <summary>
            Gets or sets even header.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter">
            <summary>
            Gets or sets first footer.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader">
            <summary>
            Gets or sets first header.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer">
            <summary>
            Gets or sets default footer.
            </summary>
            <remarks>
            <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
            <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd905956.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.Header">
            <summary>
            Gets or sets default header.
            </summary>
            <remarks>
            <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
            <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.AlignWithMargins">
            <summary>
            Gets or sets if header/footer margin will align with page margins.
            Supported in XLSX only.
            </summary>
            <remarks>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.ScaleWithDoc">
            <summary>
            Gets or sets if headers/footers will be scaled with document scaling.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SheetHeaderFooter.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.SheetHeaderFooter"/> constructor.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage">
            <summary>
            Gets or sets default header/footer.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstPage">
            <summary>
            Gets or sets first page header/footer.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on first page.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenPage">
            <summary>
            Gets or sets header/footer for even pages.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on even pages.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage">
            <summary>
            Returns <see langword="true"/> if <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstPage"/> header/footer is specified.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on first page.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage">
            <summary>
            Returns <see langword="true"/> if <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenPage"/> header/footer is specified.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on even pages.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.SortDescription">
            <summary>
            <para>This type is obsolete. Use <see cref="T:GemBox.Spreadsheet.SortLevel"/> type with <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Boolean)"/>, <see cref="P:GemBox.Spreadsheet.SortState.Levels"/> and <see cref="M:GemBox.Spreadsheet.SortLevelCollection.Add(System.Int32)"/> members instead.</para>
            <para>Specifies the column, sorting order and optional custom comparison used in <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method.</para>
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SortDescription.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SortDescription"/> class with specified sorting column index.
            Valid column indexes are between 0 and <see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex"/> - <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>, inclusive.
            </summary>
            <param name="columnRangeIndex">The column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SortDescription.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SortDescription"/> class with specified sorting column index and sort direction.
            Valid column indexes are between 0 and <see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex"/> - <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>, inclusive.
            </summary>
            <param name="columnRangeIndex">The column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.</param>
            <param name="isAscending">A value indicating whether sort direction is ascending or descending.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.SortDescription.ColumnRangeIndex">
            <summary>
            Gets the column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.
            </summary>
            <value>
            The column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortDescription.IsAscending">
            <summary>
            Gets a value indicating whether sort direction is ascending or descending.
            </summary>
            <value>
            <see langword="true"/> if sort direction is ascending; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortDescription.Comparison">
            <summary>
            Gets or sets the comparison that can be used to override default comparison.
            </summary>
            <value>
            The comparison that can be used to override default comparison.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxOptions">
            <summary>
            Options specified when reading XLSX files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxOptions.None">
            <summary>
            Do not preserve XLSX parts. Only parts recognized by GemBox.Spreadsheet API will be loaded.
            Use this if you are just loading XLSX file or you don't want to preserve unrecognized 
            XLSX parts for next save.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxOptions.PreserveKeepOpen">
            <summary>
            Preserves unrecognized XLSX parts in a way it keeps loaded file open. Use if locking of input file
            for reading is not a problem and you want to save RAM/CPU when working with large files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxOptions.PreserveMakeCopy">
            <summary>
            Preserves unrecognized XLSX parts in a way it makes a copy of input file in memory. Use if 
            locking of input file presents a problem or you are not working with large files.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.OdsLoadOptions">
            <summary>
            Represents options for loading from OpenDocument Spreadsheet file format.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.OdsLoadOptions.PreserveUnsupportedFeatures">
            <summary>
            Gets or sets a value indicating whether to preserve ODS file format features that are not directly supported through GemBox.Spreadsheet object model.
            </summary>
            <value>
            <see langword="true"/> to preserve ODS file format features that are not directly supported through GemBox.Spreadsheet object model; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.OdsLoadOptions.ReadDisplayValues">
            <summary>
            Read display values instead of stored values. 
            </summary>
            <value>
            <see langword="true"/> to read display values; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>Values in ODS are stored as value - display string pairs.
            Normally stored value is read but that looses number formatting. 
            If you want to read value as formatted display string (for example, date as "Wednesday, May 5th, 2009" string), set this property to <see langword="true"/>.</para>
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.OdsLoadOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsLoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.OdsSaveOptions">
            <summary>
            Represents options for saving to OpenDocument Spreadsheet file format.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.OdsSaveOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.OdsSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to ODS file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: 1048576</description></item>
            <item><description>MaxColumns: 16384</description></item>
            <item><description>MaxColors: 16000000</description></item>
            <item><description>MaxCellStyles: 64000</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.OdsSaveOptions.ContentType">
            <summary>
            Gets the content-type for ODS file format:
            <list type="bullet">
            <item><description><b>application/vnd.oasis.opendocument.spreadsheet-template</b> if workbook is template (file extension is .odt), otherwise</description></item>
            <item><description><b>application/vnd.oasis.opendocument.spreadsheet</b>.</description></item>
            </list>
            </summary>
            <value>
            The content-type for ODS file format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsSaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxType">
            <summary>
            OpenXML file type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xlsx">
            <summary>
            Excel 2007 XML Workbook.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xlsm">
            <summary>
            Excel 2007 XML Macro-Enabled Workbook.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xltx">
            <summary>
            Excel 2007 XML Template.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xltm">
            <summary>
            Excel 2007 XML Macro-Enabled Template.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PageBreak">
            <summary>
            Base class for all page breaks.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreak.CheckBreakIndex(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreak.CheckLimit(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.PageBreakCollection">
            <summary>
            Base class for page break collections.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection.Count">
            <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection.Clear">
            <summary>
            Removes all page breaks. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page break at the specified index.
            </summary>
            <param name="index">The zero-based index of the page break to remove.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.PageBreakCollection`1">
            <summary>
            Generic base class for page break collections.
            </summary>
            <typeparam name="T">Type of the items in the collection, either <see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" /> or <see cref="T:GemBox.Spreadsheet.VerticalPageBreak" />.</typeparam>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.ItemsCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.CreateItem(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.MaxLastLimit">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.Add(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.Add(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.Item(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.PanePosition">
            <summary>
            Represents the position of the pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.BottomRight">
            <summary>
            Bottom right pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.TopRight">
            <summary>
            Top right pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.BottomLeft">
            <summary>
            Bottom left pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.TopLeft">
            <summary>
            Top left pane.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PanesState">
            <summary>
            Represents the state of the pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanesState.Frozen">
            <summary>
            Panes are frozen, but were not split being frozen. In this state, when the panes are unfrozen again, a single pane results, with no split. In this state, the split bars are not adjustable.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanesState.FrozenSplit">
            <summary>
            Panes are frozen and were split before being frozen. In this state, when the panes are unfrozen again, the split remains, but is adjustable.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanesState.Split">
            <summary>
            Panes are split, but not frozen. In this state, the split bars are adjustable by the user.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PaperType">
            <summary>
            Specifies the paper type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Custom">
            <summary>
            Custom paper type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Letter">
            <summary>
            Letter (8.5 inch X 11 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Legal">
            <summary>
            Legal (8.5 inch X 14 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Executive">
            <summary>
            Executive (7.25 inch X 10.5 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A3">
            <summary>
            A3 (11.69 inch X 16.54 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A4">
            <summary>
            A4 (8.27 inch X 11.69 inch). 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A5">
            <summary>
            A5 (5.83 inch X 8.27 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.B4">
            <summary>
            B4 (JIS, 10.12 inch X 14.33 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Paper11x17">
            <summary>
            11x17 (11 inch X 17 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.EnvelopeDL">
            <summary>
            Envelope DL (4.33 inch X 8.66 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.EnvelopeC5">
            <summary>
            Envelope C5 (6.38 inch X 9.02 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.B5">
            <summary>
            B5 (ISO, 6.93 inch X 9.84 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A2">
            <summary>
            A2 (16.54 inch X 23.39 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A6">
            <summary>
            A6 (4.13 inch X 5.83 inch).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions">
            <summary>
            Represents a class that stores details for signing a workbook saved to a Portable Document Format (PDF) with a digital signature.
            </summary>
            <remarks>
            Workbook will be digitally signed when saved to a PDF only if <see cref="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.Certificate" />, <see cref="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.CertificateBytes" /> or <see cref="P:GemBox.Spreadsheet.DigitalSignatureSaveOptions.CertificatePath" /> is specified or if <c>Sign(Stream)</c> method is overridden,
            otherwise it will be saved but not digitally signed.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions.EstimatedSignatureLength">
            <summary>
            Gets the estimated signature length.
            </summary>
            <value>
            The estimated signature length.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions.Sign(System.IO.Stream)">
            <summary>
            Returns the digital signature for the PDF file stream.
            </summary>
            <param name="pdfFile">The PDF file stream that will be digitally signed.</param>
            <returns>
            The digital signature for the PDF file stream.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.PdfSaveOptions">
            <summary>
            Represents options for saving to Portable Document Format (PDF) file.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to PDF file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SavePdf" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SavePdf" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions">
            <summary>
            Gets or sets the operations that are allowed to a user on an encrypted PDF document.
            </summary>
            <remarks>
      <para>
        Generated PDF document will be encrypted if any of the following conditions are satisfied:
      </para>
      <list type="bullet">
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> is different than <see cref="F:GemBox.Spreadsheet.PdfPermissions.All" />.
          </description>
        </item>
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is not <see langword="null" /> or <see cref="F:System.String.Empty" />.
          </description>
        </item>
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is not <see langword="null" /> or <see cref="F:System.String.Empty" />.
          </description>
        </item>
      </list>
      <para>
        Both <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> are optional but with the following consequences:
      </para>
      <list type="bullet">
        <item>
          <description>
            If <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> is different than <see cref="F:GemBox.Spreadsheet.PdfPermissions.All" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is not specified, component will generate random <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />.
          </description>
        </item>
        <item>
          <description>
            Using <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />, also known as <i>owner password</i>, without <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is not secure. It relies on PDF viewer software to respect specified restrictions, but it may choose not to do so.
          </description>
        </item>
        <item>
          <description>
            Using <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" />, also known as <i>user password</i>, is potentially very secure. It or <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is required for decrypting and viewing the document.
          </description>
        </item>
        <item>
          <description>
            When <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is specified, PDF viewer application will prompt for password to decrypt and present the document. If entered password is <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" />, document will be decrypted and presented with specified <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> enforced. Otherwise, if entered password is <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />, document will be decrypted and presented without any restrictions.
          </description>
        </item>
      </list>
      <para>
        <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> cannot be equal, otherwise exception is thrown.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword">
            <summary>
            Specifies the password required for opening the encrypted PDF document.
            </summary>
            <remarks>
      <para>
        Generated PDF document will be encrypted if any of the following conditions are satisfied:
      </para>
      <list type="bullet">
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> is different than <see cref="F:GemBox.Spreadsheet.PdfPermissions.All" />.
          </description>
        </item>
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is not <see langword="null" /> or <see cref="F:System.String.Empty" />.
          </description>
        </item>
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is not <see langword="null" /> or <see cref="F:System.String.Empty" />.
          </description>
        </item>
      </list>
      <para>
        Both <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> are optional but with the following consequences:
      </para>
      <list type="bullet">
        <item>
          <description>
            If <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> is different than <see cref="F:GemBox.Spreadsheet.PdfPermissions.All" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is not specified, component will generate random <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />.
          </description>
        </item>
        <item>
          <description>
            Using <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />, also known as <i>owner password</i>, without <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is not secure. It relies on PDF viewer software to respect specified restrictions, but it may choose not to do so.
          </description>
        </item>
        <item>
          <description>
            Using <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" />, also known as <i>user password</i>, is potentially very secure. It or <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is required for decrypting and viewing the document.
          </description>
        </item>
        <item>
          <description>
            When <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is specified, PDF viewer application will prompt for password to decrypt and present the document. If entered password is <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" />, document will be decrypted and presented with specified <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> enforced. Otherwise, if entered password is <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />, document will be decrypted and presented without any restrictions.
          </description>
        </item>
      </list>
      <para>
        <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> cannot be equal, otherwise exception is thrown.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword">
            <summary>
            Specifies the password for opening the encrypted PDF document without any access restrictions.
            </summary>
            <remarks>
      <para>
        Generated PDF document will be encrypted if any of the following conditions are satisfied:
      </para>
      <list type="bullet">
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> is different than <see cref="F:GemBox.Spreadsheet.PdfPermissions.All" />.
          </description>
        </item>
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is not <see langword="null" /> or <see cref="F:System.String.Empty" />.
          </description>
        </item>
        <item>
          <description>
            <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is not <see langword="null" /> or <see cref="F:System.String.Empty" />.
          </description>
        </item>
      </list>
      <para>
        Both <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> are optional but with the following consequences:
      </para>
      <list type="bullet">
        <item>
          <description>
            If <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> is different than <see cref="F:GemBox.Spreadsheet.PdfPermissions.All" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is not specified, component will generate random <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />.
          </description>
        </item>
        <item>
          <description>
            Using <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />, also known as <i>owner password</i>, without <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is not secure. It relies on PDF viewer software to respect specified restrictions, but it may choose not to do so.
          </description>
        </item>
        <item>
          <description>
            Using <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" />, also known as <i>user password</i>, is potentially very secure. It or <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> is required for decrypting and viewing the document.
          </description>
        </item>
        <item>
          <description>
            When <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> is specified, PDF viewer application will prompt for password to decrypt and present the document. If entered password is <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" />, document will be decrypted and presented with specified <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions" /> enforced. Otherwise, if entered password is <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" />, document will be decrypted and presented without any restrictions.
          </description>
        </item>
      </list>
      <para>
        <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.DocumentOpenPassword" /> and <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.PermissionsPassword" /> cannot be equal, otherwise exception is thrown.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to PDF file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SavePdf" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SavePdf" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.DigitalSignature">
            <summary>
            Gets or sets the digital signature options.
            </summary>
            <value>
            The digital signature options.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.ImageDpi">
            <summary>
      Gets or sets the saved images DPI.
    </summary><value>
      The saved images DPI.
    </value><remarks>
      This property controls the image quality for all images in the file. Larger value results in better-quality images but increases the file size. Setting this property to 0 will disable image optimization. Standard DPI values are:
      <list type="bullet">
        <item>
          <description>330 - Good quality for HD displays</description>
        </item>
        <item>
          <description>220 - Good quality for most printers and displays</description>
        </item>
        <item>
          <description>150 - Good quality for web pages and projectors</description>
        </item>
        <item>
          <description>96 - Good quality for smaller file sizes</description>
        </item>
      </list>
    </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.PdfSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PdfSaveOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> is 1.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to PDF file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>        
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.ContentType">
            <summary>
            Gets the content-type for PDF file format: <b>application/pdf</b>.
            </summary>
            <value>
            The content-type for PDF file format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.PdfSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> built-in styles.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.None">
            <summary>
            No built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight1">
            <summary>
            '<b>PivotStyleLight1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight2">
            <summary>
            '<b>PivotStyleLight2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight3">
            <summary>
            '<b>PivotStyleLight3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight4">
            <summary>
            '<b>PivotStyleLight4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight5">
            <summary>
            '<b>PivotStyleLight5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight6">
            <summary>
            '<b>PivotStyleLight6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight7">
            <summary>
            '<b>PivotStyleLight7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight8">
            <summary>
            '<b>PivotStyleLight8</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight9">
            <summary>
            '<b>PivotStyleLight9</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight10">
            <summary>
            '<b>PivotStyleLight10</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight11">
            <summary>
            '<b>PivotStyleLight11</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight12">
            <summary>
            '<b>PivotStyleLight12</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight13">
            <summary>
            '<b>PivotStyleLight13</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight14">
            <summary>
            '<b>PivotStyleLight14</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight15">
            <summary>
            '<b>PivotStyleLight15</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight16">
            <summary>
            '<b>PivotStyleLight16</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight17">
            <summary>
            '<b>PivotStyleLight17</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight18">
            <summary>
            '<b>PivotStyleLight18</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight19">
            <summary>
            '<b>PivotStyleLight19</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight20">
            <summary>
            '<b>PivotStyleLight20</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight21">
            <summary>
            '<b>PivotStyleLight21</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight22">
            <summary>
            '<b>PivotStyleLight22</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight23">
            <summary>
            '<b>PivotStyleLight23</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight24">
            <summary>
            '<b>PivotStyleLight24</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight25">
            <summary>
            '<b>PivotStyleLight25</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight26">
            <summary>
            '<b>PivotStyleLight26</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight27">
            <summary>
            '<b>PivotStyleLight27</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleLight28">
            <summary>
            '<b>PivotStyleLight28</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium1">
            <summary>
            '<b>PivotStyleMedium1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium2">
            <summary>
            '<b>PivotStyleMedium2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium3">
            <summary>
            '<b>PivotStyleMedium3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium4">
            <summary>
            '<b>PivotStyleMedium4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium5">
            <summary>
            '<b>PivotStyleMedium5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium6">
            <summary>
            '<b>PivotStyleMedium6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium7">
            <summary>
            '<b>PivotStyleMedium7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium8">
            <summary>
            '<b>PivotStyleMedium8</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium9">
            <summary>
            '<b>PivotStyleMedium9</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium10">
            <summary>
            '<b>PivotStyleMedium10</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium11">
            <summary>
            '<b>PivotStyleMedium11</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium12">
            <summary>
            '<b>PivotStyleMedium12</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium13">
            <summary>
            '<b>PivotStyleMedium13</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium14">
            <summary>
            '<b>PivotStyleMedium14</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium15">
            <summary>
            '<b>PivotStyleMedium15</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium16">
            <summary>
            '<b>PivotStyleMedium16</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium17">
            <summary>
            '<b>PivotStyleMedium17</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium18">
            <summary>
            '<b>PivotStyleMedium18</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium19">
            <summary>
            '<b>PivotStyleMedium19</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium20">
            <summary>
            '<b>PivotStyleMedium20</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium21">
            <summary>
            '<b>PivotStyleMedium21</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium22">
            <summary>
            '<b>PivotStyleMedium22</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium23">
            <summary>
            '<b>PivotStyleMedium23</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium24">
            <summary>
            '<b>PivotStyleMedium24</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium25">
            <summary>
            '<b>PivotStyleMedium25</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium26">
            <summary>
            '<b>PivotStyleMedium26</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium27">
            <summary>
            '<b>PivotStyleMedium27</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleMedium28">
            <summary>
            '<b>PivotStyleMedium28</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark1">
            <summary>
            '<b>PivotStyleDark1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark2">
            <summary>
            '<b>PivotStyleDark2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark3">
            <summary>
            '<b>PivotStyleDark3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark4">
            <summary>
            '<b>PivotStyleDark4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark5">
            <summary>
            '<b>PivotStyleDark5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark6">
            <summary>
            '<b>PivotStyleDark6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark7">
            <summary>
            '<b>PivotStyleDark7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark8">
            <summary>
            '<b>PivotStyleDark8</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark9">
            <summary>
            '<b>PivotStyleDark9</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark10">
            <summary>
            '<b>PivotStyleDark10</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark11">
            <summary>
            '<b>PivotStyleDark11</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark12">
            <summary>
            '<b>PivotStyleDark12</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark13">
            <summary>
            '<b>PivotStyleDark13</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark14">
            <summary>
            '<b>PivotStyleDark14</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark15">
            <summary>
            '<b>PivotStyleDark15</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark16">
            <summary>
            '<b>PivotStyleDark16</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark17">
            <summary>
            '<b>PivotStyleDark17</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark18">
            <summary>
            '<b>PivotStyleDark18</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark19">
            <summary>
            '<b>PivotStyleDark19</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark20">
            <summary>
            '<b>PivotStyleDark20</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark21">
            <summary>
            '<b>PivotStyleDark21</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark22">
            <summary>
            '<b>PivotStyleDark22</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark23">
            <summary>
            '<b>PivotStyleDark23</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark24">
            <summary>
            '<b>PivotStyleDark24</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark25">
            <summary>
            '<b>PivotStyleDark25</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark26">
            <summary>
            '<b>PivotStyleDark26</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark27">
            <summary>
            '<b>PivotStyleDark27</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.PivotStyleDark28">
            <summary>
            '<b>PivotStyleDark28</b>' built-in style.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection">
            <summary>
            Represents a collection of visible (row, column, page or data) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add(System.Int32)">
            <summary>
            Adds the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> to this area collection.
            </summary>
            <param name="fieldIndex">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> index in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields"/> collection.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> added to this area collection.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fieldIndex"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields"/> count.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add(System.String)">
            <summary>
            Adds the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> to this area collection.
            </summary>
            <param name="fieldName">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> name in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields"/> collection.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> added to this area collection.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Field with specified name doesn't exist.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add(GemBox.Spreadsheet.PivotTables.PivotField)">
            <summary>
            Adds the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> to this area collection.
            </summary>
            <param name="pivotField">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields"/>, <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields"/>,
            <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields"/>, <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields"/> or <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields"/> collection.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> added to this area collection.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pivotField"/> can't be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Field is not part of the parent <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Remove(System.Int32)">
            <summary>
            Removes <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> at the specified index from this area collection.
            </summary>
            <param name="fieldIndex">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> index in this area collection.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fieldIndex"/> is less than 0 or is equal to or greater than field count.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Remove(System.String)">
            <summary>
            Removes <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> with the specified name from this area collection.
            </summary>
            <param name="fieldName">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> name.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Field with specified name doesn't exist.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Remove(GemBox.Spreadsheet.PivotTables.PivotField)">
            <summary>
            Removes <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> from this area collection.
            </summary>
            <param name="pivotField">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> in this area collection.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pivotField"/> can't be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Field is not part of this pivot area.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> is less than 0 or is equal to or greater than field count.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newIndex"/> is less than 0 or is equal to or greater than field count.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Clear">
            <summary>
            Removes all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>s from this area collection.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotCache">
            <summary>
            Represents a memory cache for a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource">
            <summary>
            Gets the source of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />.
            </summary>
            <value>
            The source of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />.
            </value>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotCache.ChangeWorksheetSource(System.String)">
            <summary>
            Changes the worksheet source of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />.
            </summary>
            <param name="reference">The worksheet data source reference which must refer either to a cell range or a named range.</param>
            <exception cref="T:System.ArgumentException">Reference must refer either to a cell range or a named range.</exception>
            <exception cref="T:System.InvalidOperationException">The source data has been changed substantially. Consider creating a new PivotTable.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotCacheCollection">
            <summary>
            Represents a collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> objects in the workbook.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotCacheCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> at the specified index.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotCacheCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />s contained in the collection.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />s contained in the collection.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotCacheCollection.AddWorksheetSource(System.String)">
            <summary>
            Adds a new <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache"/> from the worksheet data source.
            </summary>
            <param name="reference">The worksheet data source reference which must refer either to a cell range or a named range.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="reference"/> must refer either to a cell range or a named range.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotCacheCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotCacheCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource">
            <summary>
            Represents an abstract source of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> data.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotCacheSource.SourceType">
            <summary>
            Gets the type of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> source.
            </summary>
            <value>
            The type of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> source.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotCacheSourceType">
            <summary>
            Specifies the type of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> source.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.Worksheet">
            <summary>
            Indicates that the cache contains worksheet data.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.Consolidation">
            <summary>
            Indicates that the cache contains data that consolidates ranges.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.External">
            <summary>
            Indicates that the cache contains data from an external data source.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.Scenario">
            <summary>
            Indicates that the cache contains a scenario summary report.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotField">
            <summary>
            Represents a field within a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.PivotTable" />.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.PivotTable">
            <summary>
            Gets the parent <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.PivotTable" />.
            </summary>
            <value>
            The parent <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.PivotTable" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.DragToHide">
            <summary>
            Gets or sets a value indicating whether this field can be dragged to the hide position.
            </summary>
            <value>
            <see langword="true" /> if this field can be dragged to the hide position; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.DragToRow">
            <summary>
            Gets or sets a value indicating whether this field can be dragged to the row position.
            </summary>
            <value>
            <see langword="true" /> if this field can be dragged to the row position; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.DragToColumn">
            <summary>
            Gets or sets a value indicating whether this field can be dragged to the column position.
            </summary>
            <value>
            <see langword="true" /> if this field can be dragged to the column position; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.DragToPage">
            <summary>
            Gets or sets a value indicating whether this field can be dragged to the page position.
            </summary>
            <value>
            <see langword="true" /> if this field can be dragged to the page position; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.DragToData">
            <summary>
            Gets or sets a value indicating whether this field can be dragged to the data position.
            </summary>
            <value>
            <see langword="true" /> if this field can be dragged to the data position; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.EnableMultiplePageItems">
            <summary>
            Gets or sets a value indicating whether this field can have multiple items selected in the page field.
            </summary>
            <value>
            <see langword="true" /> if this field can have multiple items selected in the page field; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.InsertBlankRow">
            <summary>
            Gets or sets a value indicating whether to insert a blank row after each item.
            </summary>
            <value>
            <see langword="true" /> if a blank row will be inserted after each item; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.LayoutForm">
            <summary>
            Gets or sets the layout form for this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </summary>
            <value>
            The layout form for this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.ShowAll">
            <summary>
            Gets or sets a value indicating whether to show all items for this field.
            </summary>
            <value>
            <see langword="true" /> to show all items for this field; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.PivotItems">
            <summary>
            Gets the collection of all (visible and hidden) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s in this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </summary>
            <value>
            The collection of all (visible and hidden) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s in this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.SourceName">
            <summary>
            Gets the source name (cache field name) of this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </summary>
            <value>
            The source name (cache field name) of this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.Name">
            <summary>
            Gets or sets the custom name (label text) of this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </summary>
            <value>
            The custom name (label text) of this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </value>
            <exception cref="T:System.ArgumentException">Value cannot be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.Formula">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />'s formula in A1-style notation.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />'s formula in A1-style notation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated">
            <summary>
            Gets a value indicating whether this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is a calculated field.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is a calculated field; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.Subtotals">
            <summary>
            <para>Gets or sets the subtotals displayed with this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.</para>
            <para>This property is applicable only for non-data fields.</para>
            </summary>
            <value>
            The subtotals displayed with this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.Function">
            <summary>
            <para>Gets or sets the function used to summarize/aggregate this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.</para>
            <para>This property is applicable only for data fields.</para>
            </summary>
            <value>
            The function used to summarize/aggregate this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.ShowDataAs">
            <summary>
            <para>Gets or sets the display format for this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.</para>
            <para>This property is applicable only for data fields.</para>
            </summary>
            <value>
            The display format for this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField">
            <summary>
            <para>Gets or sets the base field used for a custom calculation.</para>
            <para>This property is applicable only for data fields.</para>
            </summary>
            <value>
            The base field used for a custom calculation.
            </value>
            <exception cref="T:System.ArgumentNullException">Value can't be <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">Base field is not part of the parent <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.PivotTable" />.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseItem">
            <summary>
            <para>Gets or sets the item in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField"/> used for a custom calculation.</para>
            <para>This property is applicable only for data fields.</para>
            <para>Use <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseItemPosition"/> property to specify <see cref="F:GemBox.Spreadsheet.PivotTables.PivotItemPosition.Previous"/> or <see cref="F:GemBox.Spreadsheet.PivotTables.PivotItemPosition.Next"/> item, otherwise use this property.</para>
            </summary>
            <value>
            The item in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField"/> used for a custom calculation.
            </value>
            <exception cref="T:System.ArgumentNullException">Value can't be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Base item is not part of the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseItemPosition">
            <summary>
            <para>Gets or sets the item position in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField"/> used for a custom calculation.</para>
            <para>This property is applicable only for data fields.</para>
            <para>Use this property to specify <see cref="F:GemBox.Spreadsheet.PivotTables.PivotItemPosition.Previous"/> or <see cref="F:GemBox.Spreadsheet.PivotTables.PivotItemPosition.Next"/> item, otherwise use <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseItem"/> property.</para>
            </summary>
            <value>
            The item position in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField"/> used for a custom calculation.
            </value>
            <exception cref="T:System.ArgumentException"><see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.BaseField"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.CurrentPageItem">
            <summary>
            <para>Gets or sets the current page item showing for the page field.</para>
            <para>This property is applicable only for page fields.</para>
            <para>If set to <see langword="null"/>, no current page item will be defined.</para>
            </summary>
            <value>
            The current page item showing for the page field.
            </value>
            <exception cref="T:System.ArgumentException">Page item is not part of this page field.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotField.NumberFormat">
            <summary>
            <para>Gets or sets the number format which indicates how to format the numeric value of this field.</para>
            <para>Default value is <b>General</b>.</para>
            <para>If set to <see langword="null" />, number format will be set to default.</para>
            </summary>
            <value>
            The number format which indicates how to format the numeric value of this field.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection">
            <summary>
            Represents a base collection of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>s.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> at the specified index.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> with the specified name.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> with the specified name.
            </value>
            <param name="fieldName">The name of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> with the specified name.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s contained in the collection.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s contained in the collection.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.IndexOf(GemBox.Spreadsheet.PivotTables.PivotField)">
            <summary>
            Searches for the specified <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.Contains(GemBox.Spreadsheet.PivotTables.PivotField)">
            <summary>
            Determines whether the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> is contained in the collection.
            </summary>
            <param name="item">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> to locate in the collection.</param>
            <returns><see langword="true"/> if <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> is contained in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType">
            <summary>
            Represents a data <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> subtotal function.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Sum">
            <summary>
            The sum of the values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Count">
            <summary>
            The number of data values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Average">
            <summary>
            The average of the values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Max">
            <summary>
            The largest value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Min">
            <summary>
            The smallest value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Product">
            <summary>
            The product of the values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.CountNums">
            <summary>
            The number of data values that are numbers.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.StdDev">
            <summary>
            An estimate of the standard deviation of a population, where the sample is a subset of the entire population.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.StdDevp">
            <summary>
            The standard deviation of a population, where the population is all of the data to be summarized.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Var">
            <summary>
            An estimate of the variance of a population, where the sample is a subset of the entire population.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.Varp">
            <summary>
            The variance of a population, where the population is all of the data to be summarized.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotFieldCollection">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>s.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)">
            <summary>
            Adds a calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> to the end of the collection of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> fields.
            </summary>
            <param name="fieldName">The name of the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>.</param>
            <param name="formula">The formula of the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="formula"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> must be unique.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)">
            <summary>
            Removes the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> from the collection of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> fields.
            </summary>
            <param name="fieldName">The name of the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Field with specified name doesn't exist.</exception>
            <exception cref="T:System.ArgumentException">Field with specified name is not a calculated field.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat">
            <summary>
            Represents a data <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> display format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.Normal">
            <summary>
            No calculation.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.Difference">
            <summary>
            The difference from the value of the Base item in the Base field.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.Index">
            <summary>
            Data calculated as ((value in cell) x (Grand Total of Grand Totals)) / ((Grand Row Total) x (Grand Column Total)).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.Percent">
            <summary>
            Percentage of the value of the Base item in the Base field.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfDifference">
            <summary>
            Percentage difference from the value of the Base item in the Base field.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfColumn">
            <summary>
            Percentage of the total for the column or series.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfRow">
            <summary>
            Percentage of the total for the row or category.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfTotal">
            <summary>
            Percentage of the grand total of all the data or data points in the report.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfParent">
            <summary>
            Percentage of the total of the specified parent Base field.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfParentColumn">
            <summary>
            Percentage of the total of the parent column.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfParentRow">
            <summary>
            Percentage of the total of the parent row.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.PercentageOfRunningTotal">
            <summary>
            Rank largest to smallest.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.RunTotal">
            <summary>
            Data for successive items in the Base field as a running total.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.RankAscending">
            <summary>
            Rank smallest to largest.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.RankDecending">
            <summary>
            Rank largest to smallest.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotFieldLayoutForm">
            <summary>
            Represents the way the specified <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> appear.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldLayoutForm.Compact">
            <summary>
            Show in Compact Form.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldLayoutForm.Outline">
            <summary>
            Show in Outline Form.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldLayoutForm.Tabular">
            <summary>
            Show in Tabular Form.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes">
            <summary>
            Represents a data <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/> displayed subtotals.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.None">
            <summary>
            No subtotals.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Automatic">
            <summary>
            Represents Automatic subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Sum">
            <summary>
            Represents Sum subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Count">
            <summary>
            Represents Count subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Average">
            <summary>
            Represents Average subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Max">
            <summary>
            Represents Max subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Min">
            <summary>
            Represents Min subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Product">
            <summary>
            Represents Product subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.CountNums">
            <summary>
            Represents CountNums subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.StdDev">
            <summary>
            Represents StdDev subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.StdDevp">
            <summary>
            Represents StdDevp subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Var">
            <summary>
            Represents Var subtotal type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.Varp">
            <summary>
            Represents Varp subtotal type.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotItem">
            <summary>
            Represents an item in a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.PivotField" />.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItem.PivotField">
            <summary>
            Gets the parent <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.PivotField" />.
            </summary>
            <value>
            The parent <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.PivotField" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItem.Hidden">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> is hidden.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> is hidden; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItem.Name">
            <summary>
            Gets the name of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />.
            </summary>
            <value>
            The name of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItem.Value">
            <summary>
            Gets the value of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />.
            </summary>
            <value>
            The value of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItem.Formula">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />'s formula in A1-style notation.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />'s formula in A1-style notation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated">
            <summary>
            Gets a value indicating whether the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> is a calculated item.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> is a calculated item; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotItemCollection">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> at the specified index.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> with the specified name.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> with the specified name.
            </value>
            <param name="itemName">The name of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> with the specified name.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s contained in the collection.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s contained in the collection.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.IndexOf(GemBox.Spreadsheet.PivotTables.PivotItem)">
            <summary>
            Searches for the specified <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Contains(GemBox.Spreadsheet.PivotTables.PivotItem)">
            <summary>
            Determines whether an <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> element is in the collection.
            </summary>
            <param name="item">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> to locate in the collection.</param>
            <returns><see langword="true"/> if <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> is found in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)">
            <summary>
            Adds a calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> at the end of the collection.
            </summary>
            <param name="itemName">The name of the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/>.</param>
            <param name="formula">The formula of the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/>.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="itemName"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="formula"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Item with the specified name already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)">
            <summary>
            Removes the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> from the collection.
            </summary>
            <param name="itemName">The name of the calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/>.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> created from non-worksheet data source cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="itemName"/> can't be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Item with the specified name doesn't exist.</exception>
            <exception cref="T:System.ArgumentException">Item with the specified name is not a calculated item.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/> to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> is less than 0 or is equal to or greater than item count.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newIndex"/> is less than 0 or is equal to or greater than item count.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotItemPosition">
            <summary>
            Represents base item Next/Previous/All position in the base field.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotItemPosition.None">
            <summary>
            No base item position.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotItemPosition.Previous">
            <summary>
            Represents Previous pivot field base item.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotItemPosition.Next">
            <summary>
            Represents Next pivot field base item.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotTable">
            <summary>
            Represents a pivot table.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache">
            <summary>
            Gets the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" /> associated with this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
            </summary>
            <value>
            The <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" /> associated with this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataPivotField">
            <summary>
            <para>Gets a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> object that represents all the data fields in this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.</para>
            <para>It contains non-<see langword="null" /> value only if there are two or more data fields in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" />.</para>
            <para>It is only used to add <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataPivotField" /> to the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> row/column area.</para>
            <para>By default, it is added in the row area (automatically, when there are two or more data fields in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" />).</para>
            </summary>
            <value>
            A <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> object that represents all the data fields in this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> if there are two or more data fields in the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> or <see langword="null"/> otherwise.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnGrandTotals">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> shows grand totals for columns.
            </summary>
            <value>
            <see langword="true" /> to show grand totals for columns; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnHeaderCaption">
            <summary>
            Gets or sets the <see cref="T:System.String"/> to be displayed in column header in compact mode.
            </summary>
            <value>
            The <see cref="T:System.String"/> to be displayed in column header in compact mode.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.FieldListSortAscending">
            <summary>
            Gets or sets a value indicating whether fields in the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> are sorted in non-default order in the field list.
            </summary>
            <value>
            <see langword="true" /> if fields in the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> are sorted in non-default order in the field list; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageOverThenDown">
            <summary>
            Gets or sets a value indicating how the page fields are laid out when there are multiple <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s in the page area.
            </summary>
            <value>
            <see langword="true" /> to lay out page fields over then down; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowGrandTotals">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> shows grand totals for rows.
            </summary>
            <value>
            <see langword="true" /> to show grand totals for rows; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowHeaderCaption">
            <summary>
            Gets or sets the <see cref="T:System.String"/> to be displayed in row header in compact mode.
            </summary>
            <value>
            The <see cref="T:System.String"/> to be displayed in row header in compact mode.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ShowDataTips">
            <summary>
            Gets or sets a value indicating whether tool-tips should be displayed for <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data cells.
            </summary>
            <value>
            <see langword="true" /> to display tool-tips for <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data cells; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ShowDrill">
            <summary>
            Gets or sets a value indicating whether drill indicators should be shown.
            </summary>
            <value>
            <see langword="true" /> to show drill indicators; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ShowDropZones">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> should display large drop zones when there are no fields in the data region.
            </summary>
            <value>
            <see langword="true" /> to display large drop zones when there are no fields in the data region; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ShowEmptyColumn">
            <summary>
            Gets or sets a value indicating whether to include empty columns in the table.
            </summary>
            <value>
            <see langword="true" /> to include empty columns in the table; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ShowEmptyRow">
            <summary>
            Gets or sets a value indicating whether to include empty rows in the table.
            </summary>
            <value>
            <see langword="true" /> to include empty rows in the table; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ShowError">
            <summary>
            Gets or sets a value indicating whether to show error messages in cells.
            </summary>
            <value>
            <see langword="true" /> to show error messages in cells; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.BuiltInStyle">
            <summary>
            Gets or sets the built-in style used in the body of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
            </summary>
            <value>
            The built-in style used in the body of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.StyleOptions">
            <summary>
            Gets or sets the options to be applied to the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> style.
            </summary>
            <value>
            The options to be applied to the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> style.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.Name">
            <summary>
            Gets the name of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
            </summary>
            <value>
            The name of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
            </value>
            <exception cref="T:System.ArgumentException">Value cannot be <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.TopLeftCell">
            <summary>
            Gets the location of this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> in the worksheet.
            </summary>
            <value>
            The location of this <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> in the worksheet.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields">
            <summary>
            Gets the collection of all (visible and hidden) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
            </summary>
            <value>
            The collection of all (visible and hidden) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields">
            <summary>
            Gets the collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s that are currently showing as row fields.
            </summary>
            <value>
            The collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s that are currently showing as row fields.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields">
            <summary>
            Gets the collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s that are currently shown as column fields.
            </summary>
            <value>
            The collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s that are currently shown as column fields.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields">
            <summary>
            Gets the collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s that are currently showing as page fields.
            </summary>
            <value>
            the collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s that are currently showing as page fields.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields">
            <summary>
            Gets the collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s that are currently shown as data fields.
            </summary>
            <value>
            The collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField"/>s that are currently shown as data fields.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotTableCollection">
            <summary>
            Represents a collection of all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> objects in the worksheet.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> at the specified index.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s contained in the collection.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s contained in the collection.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add(GemBox.Spreadsheet.PivotTables.PivotCache,System.String,System.String)">
            <summary>
            Adds a new <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> to the collection.
            </summary>
            <param name="pivotCache">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> on which the new <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is based.</param>
            <param name="tableName">The name of the new <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.</param>
            <param name="cellReference">The location where <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> will be placed in the sheet.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pivotCache" /> can't be <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pivotCache" /> must belong to the parent workbook.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tableName" /> can't be <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="cellReference" /> can't be <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add(GemBox.Spreadsheet.PivotTables.PivotCache,System.String,GemBox.Spreadsheet.ExcelCell)">
            <summary>
            Adds a new <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> to the collection.
            </summary>
            <param name="pivotCache">The <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> on which the new <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is based.</param>
            <param name="tableName">The name of the new <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.</param>
            <param name="topLeftCell">The location where <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> will be placed in the sheet.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pivotCache" /> can't be <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pivotCache" /> must belong to the parent workbook.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tableName" /> can't be null or <see cref="F:System.String.Empty" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="topLeftCell" /> can't be <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="topLeftCell" /> must belong to the parent sheet.</exception>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="T:GemBox.Spreadsheet.CellRange">cell range</see>, <see cref="T:GemBox.Spreadsheet.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotTableCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Clear">
            <summary>
            Removes all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/>s from the collection.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotTableCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.PivotTables.PivotTableCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions">
            <summary>
            Specifies which options are applied to a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable"/> style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions.None">
            <summary>
            Do not apply any option.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions.RowHeaders">
            <summary>
            Show row headers for the table.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions.ColumnHeaders">
            <summary>
            Show column headers for the table.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions.BandedRows">
            <summary>
            Show row stripe formatting for the table.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions.BandedColumns">
            <summary>
            Show column stripe formatting for the table.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions.LastColumn">
            <summary>
            Show the last column.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">
            <summary>
            Represents a worksheet source of <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> data.
            </summary>
            <remarks>
      <para>
        <b>Pivot Tables</b> are used to arrange and aggregate complicated data and drill down on details.
      </para>
      <para>Source of data for Pivot Table can be:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">Worksheet</see> - <see cref="P:GemBox.Spreadsheet.PivotTables.WorksheetSource.CellRange">cell range</see>, <see cref="P:GemBox.Spreadsheet.PivotTables.WorksheetSource.NamedRange">named range</see>, table, etc.
          </description>
        </item>
        <item>
          <description>External - database, OLAP cube, textual file, web query, etc.</description>
        </item>
        <item>
          <description>Other - multiple consolidation ranges in the workbook, another Pivot Table, etc.</description>
        </item>
      </list>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently supports creating only <see cref="T:GemBox.Spreadsheet.PivotTables.WorksheetSource">worksheet source</see>.
        </para>
        <para>All other sources are supported through preservation (to correctly round-trip to XLSX format).</para>
      </note>
      <para>Source of the data for Pivot Table contains following information:</para>
      <list type="bullet">
        <item>
          <description>Scheme - data source fields/columns, its data types, etc.</description>
        </item>
        <item>
          <description>Data - actual data source records.</description>
        </item>
      </list>
      <para>
        Pivot Table does not directly reference its data source, but instead it references a <i>cache of a data source</i>.
        Cache of a data source contains an in-memory copy of data source scheme and, optionally, data and is stored in a workbook which may contain multiple caches of various sources of data.
      </para>
      <para>
        Cache can be updated/refreshed from a data source automatically (for example, when opening a workbook) or on request.
        Cache is used to provide better performance of Pivot Table functionality which requires frequent access to data records and their values and to enable sharing the same data source between multiple Pivot Tables.
      </para>
      <para>
        <b>GemBox.Spreadsheet</b> represents cache with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> type.
        Cache source is represented with a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCacheSource" /> type (and its sub-types) and can be accessed from a <see cref="P:GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" /> property.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> instances are stored in a <see cref="P:GemBox.Spreadsheet.ExcelFile.PivotCaches" /> collection.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> currently doesn't store the actual cached records (it stores only scheme - fields and their properties), but instead Microsoft Excel is instructed to update the record cache from the data source when opening a workbook.
      </para>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> is created from a <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> with the specified name and the specified cell in the worksheet where it is placed using the <see cref="O:GemBox.Spreadsheet.PivotTables.PivotTableCollection.Add" /> method.
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> contains the <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotFields" /> collection which <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> elements can be <see cref="O:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Add">moved</see> into the following Pivot Table areas:
      </para>
      <list type="bullet">
        <item>
          <description>
            <b>Report Filter Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PageFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Row Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.RowFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Column Axis</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.ColumnFields" /> collection.
          </description>
        </item>
        <item>
          <description>
            <b>Values Area</b> represented by <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection.
          </description>
        </item>
      </list>
      <para>
        Each (non-calculated) <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can contain zero or more <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which are used for filtering and grouping by a specific value.
      </para>
      <para>
        Except using fields defined in Pivot Table data source (more precisely, in <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />) which cannot be removed, Pivot Table can also define <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s and <i>calculated</i> <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s which use a formula to specify their values.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotFieldCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotField.IsCalculated" /> tells if a field is calculated or is a field from the data source.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is automatically moved to a <b>Values Area</b> (<see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" /> collection) and only <b>Values Area</b> can contain calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s.
        Calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" /> can be added using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.AddCalculated(System.String,System.String)" /> method and removed using a <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.RemoveCalculated(System.String)" /> method. Property <see cref="P:GemBox.Spreadsheet.PivotTables.PivotItem.IsCalculated" /> tells if an item is calculated.
      </para>
      <note type="note">
        <para>
          If calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" /> is added/removed in one <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />, then it is also added/removed from all other <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which reference the same <see cref="P:GemBox.Spreadsheet.PivotTables.PivotTable.PivotCache" />.
        </para>
        <para>
          Since adding/removing calculated <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s means changing the data scheme, which is defined in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" />, actual modification is made in <see cref="T:GemBox.Spreadsheet.PivotTables.PivotCache" /> and propagated to all <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />s which are referencing it.
        </para>
      </note>
      <para>
        <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s can be re-ordered in a specific area using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.Move(System.Int32,System.Int32)" /> method. <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s can be re-ordered using the <see cref="M:GemBox.Spreadsheet.PivotTables.PivotItemCollection.Move(System.Int32,System.Int32)" /> method.
      </para>
      <note type="note">
        <para>
          <b>GemBox.Spreadsheet</b> currently does not provide functionality to read/calculate the actual data from the <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" />.
        </para>
        <para>
          It provides the functionality to arrange and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotField" />s, <see cref="T:GemBox.Spreadsheet.PivotTables.PivotItem" />s and <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> appearance.
        </para>
        <para>
          Because of that <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> data is not rendered/written to other output formats like PDF, HTML, etc. When output XLSX file with Pivot Table is opened in <b>Microsoft Excel</b> application, its data is automatically retrieved and calculated from the data source by <b>Microsoft Excel</b>.
        </para>
      </note>
    </remarks><example>
      <para>
        Following code demonstrates how to create and customize <see cref="T:GemBox.Spreadsheet.PivotTables.PivotTable" /> using <b>GemBox.Spreadsheet</b> component to get the following information out of the sample records:
      </para>
      <list type="bullet">
        <item>
          <description>
            Relative difference of <b>average</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
        <item>
          <description>
            Relative difference of <b>max</b> salary between GemBox and other companies grouped over departments (and genders).
          </description>
        </item>
      </list>
      <para>This information might help you decide if working for GemBox is worth it if you are a man or a woman and in which department would it be the best to work (considering department salaries of other companies).</para>
      <para>
        Input workbook can be downloaded from <see href="https://www.gemboxsoftware.com/spreadsheet/samples/PivotTableData.xlsx">PivotTableData.xlsx</see>.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PivotTables" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PivotTables" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-create-excel-pivot-tables/114">Create Excel Pivot Tables in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.WorksheetSource.SourceType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.Worksheet"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.Worksheet"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.WorksheetSource.CellRange">
            <summary>
            Gets the cell range that is the source of the data.
            </summary>
            <value>
            The cell range that is the source of the data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.PivotTables.WorksheetSource.NamedRange">
            <summary>
            Gets the named range that is the source of the data.
            </summary>
            <value>
            The named range that is the source of the data.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.PositioningMode">
            <summary>
            Option that specify the moving and sizing behavior of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) in the worksheet. 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PositioningMode.FreeFloating">
            <summary>
            <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) will not move nor size with cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PositioningMode.Move">
            <summary>
            <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) will move but not size with cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize">
            <summary>
            <see cref="T:GemBox.Spreadsheet.ExcelDrawing"/> (picture, chart, etc.) will move and size with cells.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PrintOptions">
            <summary>
            Specifies information about how a spreadsheet is printed.
            </summary>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Print" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Print" />
    </example><seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-print-excel/451">Print Excel in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-print-excel/451">Print Excel in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PrintOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PrintOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.CopyCount">
            <summary>
            Gets or sets the number of copies of the document to print.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.PagesPerSheet">
            <summary>
            Gets or sets the number of pages that print on each printed side of a sheet of paper.
            </summary>
            <remarks>
            Only a limited range of 1, 2, 4, 6, 8 or 16 pages per sheet side are supported.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.FromPage">
            <summary>
            Gets or sets the page index of the first page to print.
            </summary>
            <remarks>
            Spreadsheet pages are zero-indexed meaning that first page in the spreadsheet has index 0 (zero).
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.ToPage">
            <summary>
            Gets or sets the index of the last page to print.
            </summary>
            <remarks>
            Use <see cref="F:System.Int32.MaxValue"/> value to print to the last page. 
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> is 1.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.DocumentName">
            <summary>
            <para>Gets or sets the name of the printed document in the print queue.</para>
            <para>Default value is '<b>Spreadsheet</b>'.</para>
            </summary>
            <value>
            The name of the printed document in the print queue.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.ProtectedRange">
            <summary>
            Represents a range of cells to be protected.
            </summary>
            <remarks>
            <para>Ranges listed here are protected only when the sheet protection is ON and
            the cell is flagged as being locked.If no password is specified here, then read/write permissions are
            automatically given to all users, regardless of additional security descriptor information. In other words, the
            security descriptor information (specific types of access) at the user level is only applied if a password for this
            range is specified.</para>
            <para>When a password is specified, then users not listed specifically as having access should be prompted with a
            password.If that user supplies the correct password, then they can edit the range or cell in question.This
            protection is optional and can be ignored by applications that choose not to support this functionality.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ProtectedRange.Title">
            <summary>
            Gets or sets the <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> title.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> title.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ProtectedRange.RefersToCells">
            <summary>
            Gets or sets the range to be protected.
            </summary>
            <value>
            The range to be protected.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRange.SetPassword(System.String)">
            <summary>
            Sets the <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> password.
            </summary>
            <param name="password">The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> password.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> instance.
            </returns>
            <remarks>
            This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ProtectedRangeCollection">
            <summary>
            Represents a collection of all protected ranges on the <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ProtectedRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.ProtectedRange" />s actually contained in the <see cref="T:GemBox.Spreadsheet.ProtectedRangeCollection" />.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.ProtectedRange" />s actually contained in the <see cref="T:GemBox.Spreadsheet.ProtectedRangeCollection" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ProtectedRangeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> to get.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ProtectedRangeCollection.Count" />.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ProtectedRangeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> with the specified title or <see langword="null" />.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> with the specified title or <see langword="null" />.
            </value>
            <param name="title">The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> title.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> with the specified title or <see langword="null" />.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRangeCollection.AddNew(System.String,System.String,System.String)">
            <summary>
            Adds the new <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> to the current <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
            <param name="title">The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> title.</param>
            <param name="refersToCells">A reference to a range of cells that should be protected.</param>
            <param name="password">The optional password.</param>
            <returns>
            A new <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> added to the current <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="title" /> or <paramref name="refersToCells" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRangeCollection.AddNew(System.String,System.String)">
            <summary>
            Adds the new <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> to the current <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
            <param name="title">The <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> title.</param>
            <param name="refersToCells">A reference to a range of cells that should be protected.</param>
            <returns>
            A new <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> added to the current <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="title" /> or <paramref name="refersToCells" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> at the specified index of the <see cref="T:GemBox.Spreadsheet.ProtectedRangeCollection" />.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.ProtectedRange" /> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ProtectedRangeCollection.Count" />.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:GemBox.Spreadsheet.ProtectedRange" />s from the current <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.ProtectedRangeCollection" />.
            </summary>
            <returns>
            An enumerator for the <see cref="T:GemBox.Spreadsheet.ProtectedRangeCollection" />.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.ProtectedRangeCollection" />.
            </summary>
            <returns>
            An enumerator for the <see cref="T:GemBox.Spreadsheet.ProtectedRangeCollection" />.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.RangeIndexingMode">
            <summary>
            Indexing modes used by <see cref="T:GemBox.Spreadsheet.CellRange" />.
            </summary>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellRange" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellRange" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />
        </member>
        <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">
            <summary>
            Rectangular indexing mode. Rectangular cell range is higher than one row and wider than one column.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">
            <summary>
            Horizontal indexing mode. Horizontal cell range has 
            <see cref="P:GemBox.Spreadsheet.CellRange.Height">CellRange.Height</see> equal to 1.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">
            <summary>
            Vertical indexing mode. Vertical cell range has 
            <see cref="P:GemBox.Spreadsheet.CellRange.Width">CellRange.Width</see> equal to 1.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.RemoveShiftDirection">
            <summary>
            Represents the possible cell remove shift directions.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RemoveShiftDirection.Left">
            <summary>
            Shift cells left.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RemoveShiftDirection.Up">
            <summary>
            Shift cells up.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PdfPermissions">
            <summary>
            Defines operations that are allowed to a user on an encrypted PDF document.
            </summary>
            <remarks>
            For more information about PDF encryption, see <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.Permissions"/> remarks.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.None">
            <summary>
            Disallows all operations.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.Printing">
            <summary>
            Allows printing.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.HighResolutionPrinting">
            <summary>
            Allows high resolution printing.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.ChangingTheDocument">
            <summary>
            Allows changing the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.ContentCopying">
            <summary>
            Allows copying the content.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.ContentAccessibilityEnabled">
            <summary>
            Allow accessibility software to use the document contents.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.DocumentAssembly">
            <summary>
            If this is disabled, inserting, deleting or rotating pages, or creating bookmarks and thumbnails is prohibited.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PdfPermissions.All">
            <summary>
            Allows all operations.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SaveOptions">
            <summary>
            Represents a base class for saving options of various file formats.
            </summary>
            <remarks>
            Following classes inherit from this base class:
            <list type="bullet">
            <item><description><see cref="T:GemBox.Spreadsheet.XlsxSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.XlsSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.OdsSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.CsvSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.HtmlSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.PdfSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.XpsSaveOptions" /></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.ImageSaveOptions" /></description></item>
            </list>
            </remarks>
            <seealso cref="O:GemBox.Spreadsheet.ExcelFile.Save" />
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Save" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Save" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.XlsxDefault">
            <summary>
            Gets the default options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.XlsDefault">
            <summary>
            Gets the default options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.OdsDefault">
            <summary>
            Gets the default options for saving to OpenDocument Spreadsheet file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.CsvDefault">
            <summary>
            Gets the default options for saving to Character Separated Values file format.
            </summary>
            <remarks>
            <b>MS Excel</b> uses ';' as default if current culture uses ',' for decimal separator. <b>GemBox.Spreadsheet</b> always uses ','.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.HtmlDefault">
            <summary>
            Gets the default options for saving to HyperText Markup Language File format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.PdfDefault">
            <summary>
            Gets the default options for saving to Portable Document Format file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.XpsDefault">
            <summary>
            Gets the default options for saving to XML Paper Specification file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.ImageDefault">
            <summary>
            Gets the default options for saving to image formats.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.Limitations">
            <summary>
            Gets limitations for saving to a file formats.
            </summary>
            <remarks>
            This is the table for all limitations of each format:
            <para>
            <font face="Arial" size="1">
            <table border="1" cellpadding="5" cellspacing="0">
            <tr>
            <td></td>
            <th>Rows</th>
            <th>Columns</th>
            <th>Colors</th>
            <th>CellStyles</th>
            </tr>
            <tr>
            <th>XLSX</th>
            <td>1048576</td>
            <td>16384</td>
            <td>16000000</td>
            <td>64000</td>
            </tr>
            <tr>
            <th>XLS</th>
            <td>65536</td>
            <td>256</td>
            <td>56</td>
            <td>3979</td>
            </tr>
            <tr>
            <th>ODS</th>
            <td>1048576</td>
            <td>16384</td>
            <td>16000000</td>
            <td>64000</td>
            </tr>
            <tr>
            <th>CSV</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>TXT</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>HTML</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>PDF</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>XPS</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>IMAGE</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            </table>
            </font>
            </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.ContentType">
            <summary>
            Gets the content-type for this specific file format as defined in the RFC 2616.
            </summary>
            <value>
            The content-type for this specific file format.
            </value>
            <seealso href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.SaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.SaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ScriptPosition">
            <summary>
            Defines the possible settings for vertical alignment of a text and is used in <see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition" /> member to get superscript or subscript text without altering the font size.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition" />
        </member>
        <member name="F:GemBox.Spreadsheet.ScriptPosition.Normal">
            <summary>
            Returns the text to the baseline, default, alignment, and returns it to the original font size.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ScriptPosition.Superscript">
            <summary>
            <para>Specifies that text should be superscript.</para>
            <para>Raises the text above the baseline and changes it to a smaller size.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ScriptPosition.Subscript">
            <summary>
            <para>Specifies that text should be subscript.</para>
            <para>Lowers the text below the baseline and changes it to a smaller size.</para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SelectionType">
            <summary>
            Defines the selection which will be saved or printed.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SelectionType.ActiveSheet">
            <summary>
            Select <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SelectionType.EntireFile">
            <summary>
            Select all sheets in <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SheetType">
            <summary>
            Specifies the sheet type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetType.Worksheet">
            <summary>
            The most common type of sheet is the worksheet, which is represented as a grid of cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetType.Chart">
            <summary>
            Represents a chart that is stored in its own sheet.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SheetVisibility">
            <summary>
            Script positions used in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Visibility">ExcelWorksheet.Visibility</see>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetVisibility.Visible">
            <summary>
            Sheet is visible.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetVisibility.Hidden">
            <summary>
            Sheet is hidden, but is displayed in unhide dialog.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetVisibility.VeryHidden">
            <summary>
            Sheet is very hidden and can be made visible only programmatically.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ColorFilter">
            <summary>
            Represents a filter that specifies the style (with fill or font color) to filter by and whether to use the cell's fill or font color in the filter criteria.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ColorFilter.Font">
            <summary>
            <para>Gets or sets a value indicating whether or not to filter by the cell's font color. 
            <see langword="true" /> indicates to filter by cell's font color. <see langword="false" /> indicates to filter by the cell's fill color.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> if font; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ColorFilter.FilterType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.FilterType.Color"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.FilterType.Color"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ColorFilter.Style">
            <summary>
            Gets the style used to specify font color or cell color (pattern or gradient fill) to filter by.
            </summary>
            <value>
            The style used to specify font color or cell color (pattern or gradient fill) to filter by.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ColorFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ColorFilter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ColorFilter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.IconFilter">
            <summary>
            Represents a filter that specifies the icon to filter by.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.IconFilter.Icon">
            <summary>
            Gets or sets the icon to filter by.
            </summary>
            <value>
            The icon to filter by.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.IconFilter.FilterType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.FilterType.Icon"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.FilterType.Icon"/> value.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.IconFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.IconFilter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.IconFilter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.SortOn">
            <summary>
            Represents a criteria by which to sort cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SortOn.Values">
            <summary>
            Sort by values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SortOn.CellColor">
            <summary>
            Sort by cell color (pattern or gradient fill).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SortOn.FontColor">
            <summary>
            Sort by font color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SortOn.CellIcon">
            <summary>
            Sort by cell icon.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SortLevel">
            <summary>
            Represents sort settings for a single sort level.
            </summary>
            <example>
      <para>
        Following methods shows various ways to specify and apply a <see cref="T:GemBox.Spreadsheet.SortState" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Sort" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Sort" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-sort/113">Excel Sorting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevel.Descending">
            <summary>
            <para>Gets or sets a value indicating whether to sort the values in the descending order.</para>
            <para>Default value is <see langword="false"/>.</para>
            </summary>
            <value>
            <see langword="true" /> to sort the values in the descending order; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="F:GemBox.Spreadsheet.SortLevel.sortOn">
            <summary>
            <para>Gets or sets the criteria by which to sort cells.</para>
            </summary>
            <value>
            The criteria by which to sort cells.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevel.Icon">
            <summary>
            Gets or sets the icon by which to sort cells.
            </summary>
            <value>
            The icon by which to sort cells.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevel.ColumnRowIndex">
            <summary>
            <para>Gets or sets the column (or the row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) index relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range" /> that this sort level applies to.</para>
            <para>Value is equal to or greater than zero and less than <see cref="P:GemBox.Spreadsheet.CellRange.Width" /> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height" />, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</para>
            </summary>
            <value>
            The column (or the row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) index relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range" /> that this sort level applies to.
            </value>
            <exception cref="T:System.InvalidOperationException">Sort level is removed from the sort state.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Value is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevel.CustomList">
            <summary>
            <para>Gets the custom list by which order of items to sort by.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.SortLevel.Descending"/> is set to <see langword="true"/>, then sorting will be performed based on the reverse order of items.</para>
            </summary>
            <value>
            The custom list by which order of items to sort by.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevel.Comparison">
            <summary>
            <para>Gets or sets the comparison method that compares two <see cref="T:GemBox.Spreadsheet.ExcelCell"/>s.</para>
            <para>Default value is default comparison method based on the settings of this sort level.</para>
            </summary>
            <value>
            The comparison method that compares two <see cref="T:GemBox.Spreadsheet.ExcelCell"/>s.
            </value>
            <remarks>
            <para>Use this property to override default comparison method based on the settings of this sort level.</para>
            <para>This member is not loaded from and saved to XLSX file since it is not supported by <b>Office Open XML</b> specification.
            It is used to customize <b>GemBox.Spreadsheet</b> functionality.</para>
            <para>If set to <see langword="null"/>, reverts to default comparison method based on the settings of this sort level.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevel.Style">
            <summary>
            Gets the style used to specify font color or cell color (pattern or gradient fill) if sorting on font color or cell color.
            </summary>
            <value>
            The style used to specify font color or cell color (pattern or gradient fill) if sorting on font color or cell color.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevel.SetCustomList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Sets the custom list by which order of items to sort by.</para>
            </summary>
            <param name="items">The custom list by which order of items to sort by.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevel.SetCustomList(System.String[])">
            <summary>
            <para>Sets the custom list by which order of items to sort by.</para>
            </summary>
            <param name="items">The custom list by which order of items to sort by.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevel.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SortLevel"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SortLevel"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.SortLevelCollection">
            <summary>
            Represents a collection of sort levels.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevelCollection.Count">
            <summary>
            Gets the number of sort levels actually contained in the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </summary>
            <value>
            The number of sort levels actually contained in the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortLevelCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.SortLevel"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.SortLevel"/> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.SortLevel"/> to get.</param>
            <returns>The <see cref="T:GemBox.Spreadsheet.SortLevel"/> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.SortLevelCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.Get(System.Int32)">
            <summary>
            Gets the sort level applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) or <see langword="null"/> if such sort level doesn't exist.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that a returned <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <returns>The sort level applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) or <see langword="null"/> if such sort level doesn't exist.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a new <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) with the specified index into the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which new <see cref="T:GemBox.Spreadsheet.SortLevel"/> should be inserted.</param>
            <param name="columnRowIndex">Index of the column (or the row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range" /> that an inserted <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <returns>A new <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) with the specified index relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.SortLevelCollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.Add(System.Int32)">
            <summary>
            Adds a new <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) with the specified index into the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </summary>
            <param name="columnRowIndex">Index of the column (or the row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range" /> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <returns>A new <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) with the specified index relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.Remove(GemBox.Spreadsheet.SortLevel)">
            <summary>
            Removes the specific <see cref="T:GemBox.Spreadsheet.SortLevel"/> from the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </summary>
            <param name="sortLevel">The <see cref="T:GemBox.Spreadsheet.SortLevel"/> to remove from the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.</param>
            <returns><see langword="true"/> if <see cref="T:GemBox.Spreadsheet.SortLevel"/> is successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <see cref="T:GemBox.Spreadsheet.SortLevel"/> was <see langword="null"/> or was not found in the original <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.Remove(System.Int32)">
            <summary>
            Removes a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) with the specified index from the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </summary>
            <param name="columnRowIndex">Index of the column (or the row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range" /> that a removed <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <returns><see langword="true"/> if <see cref="T:GemBox.Spreadsheet.SortLevel"/> is successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if <see cref="T:GemBox.Spreadsheet.SortLevel"/> with the specified column/row index was not found in the original <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:GemBox.Spreadsheet.SortLevel"/> at the specified index of the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.SortLevel"/> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.SortLevelCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the <see cref="T:GemBox.Spreadsheet.SortLevel"/> at the specified index to a new location in the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the <see cref="T:GemBox.Spreadsheet.SortLevel"/> to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the <see cref="T:GemBox.Spreadsheet.SortLevel"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.SortLevelCollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.SortLevelCollection.Count"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.Clear">
            <summary>
            Removes all <see cref="T:GemBox.Spreadsheet.SortLevel"/>s from the <see cref="T:GemBox.Spreadsheet.SortLevelCollection"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the sort levels.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the sort levels.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SortLevelCollection.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.SortState">
            <summary>
            Represents sort settings and provides sort functionality.
            </summary>
            <remarks>
            <para>Use <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Boolean)" /> method to create or get a <see cref="T:GemBox.Spreadsheet.SortState" /> instance.</para>
            <para>Active <see cref="T:GemBox.Spreadsheet.SortState" /> is stored in the parent worksheet (<see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Sort" />) and is loaded from and saved to XLSX file.</para>
            </remarks>
            <example>
      <para>
        Following methods shows various ways to specify and apply a <see cref="T:GemBox.Spreadsheet.SortState" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Sort" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Sort" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/excel-sort/113">Excel Sorting example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.SortState.Range">
            <summary>
            Gets the range to sort.
            </summary>
            <value>
            The range to sort.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortState.Levels">
            <summary>
            Gets the sort levels.
            </summary>
            <value>
            The sort levels.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortState.CaseSensitive">
            <summary>
            <para>Gets or sets a value indicating whether the sort is case-sensitive.</para>
            <para>Default value is <see langword="false"/>.</para>
            </summary>
            <value>
            <see langword="true" /> if the sort is case-sensitive; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortState.LeftToRight">
            <summary>
            <para>Gets or sets a value indicating whether to sort from left to right (whether to sort columns instead of rows).</para>
            <para>Default value is <see langword="false"/>.</para>
            </summary>
            <value>
            <see langword="true" /> to sort from left to right (to sort columns); otherwise, <see langword="false" /> to sort from top to bottom (to sort rows).
            </value>
            <exception cref="T:System.InvalidOperationException">Sorting columns is not supported for the current sort state.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>).
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified custom list by which order of items to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,System.String[])">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified custom list by which order of items to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified order to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="descending"><see langword="true" /> to sort the values in the descending order; otherwise, <see langword="false" />.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified order and custom list by which order of items to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="descending"><see langword="true" /> to sort the values in the descending order; otherwise, <see langword="false" />.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified order and custom list by which order of items to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="descending"><see langword="true" /> to sort the values in the descending order; otherwise, <see langword="false" />.</param>
            <param name="customList">The custom list by which order of items to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,System.Comparison{GemBox.Spreadsheet.ExcelCell})">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified comparison method to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="comparison">The comparison method to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified font color to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fontColor">The font color to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,GemBox.Spreadsheet.SpreadsheetColor,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified font color and order to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fontColor">The font color to sort by.</param>
            <param name="descending"><see langword="true" /> to sort cells with the specified font color at the end of a range; otherwise, <see langword="false" /> to sort cells with the specified font color at the beginning of a range.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,GemBox.Spreadsheet.ExcelFillPattern)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified fill pattern to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fillPattern">The fill pattern to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,GemBox.Spreadsheet.ExcelFillPattern,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified fill pattern and order to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="fillPattern">The fill pattern to sort by.</param>
            <param name="descending"><see langword="true" /> to sort cells with the specified fill pattern at the end of a range; otherwise, <see langword="false" /> to sort cells with the specified fill pattern at the beginning of a range.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,GemBox.Spreadsheet.SpreadsheetIcon)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified icon to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="icon">The icon to sort by.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.By(System.Int32,GemBox.Spreadsheet.SpreadsheetIcon,System.Boolean)">
            <summary>
            Adds a <see cref="T:GemBox.Spreadsheet.SortLevel"/> applied to a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) with the specified index (relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/>) and with the specified icon and order to sort by.
            </summary>
            <param name="columnRowIndex">The index of a column (or a row, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight"/> is <see langword="true"/>) relative to the <see cref="P:GemBox.Spreadsheet.SortState.Range"/> that an added <see cref="T:GemBox.Spreadsheet.SortLevel"/> applies to.</param>
            <param name="icon">The icon to sort by.</param>
            <param name="descending"><see langword="true" /> to sort cells with the specified icon at the end of a range; otherwise, <see langword="false" /> to sort cells with the specified icon at the beginning of a range.</param>
            <returns>This <see cref="T:GemBox.Spreadsheet.SortState"/> to specify additional sort levels or to apply sort.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnRowIndex"/> is less than zero or is equal to or greater than <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> (or <see cref="P:GemBox.Spreadsheet.CellRange.Height"/>, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) of the <see cref="P:GemBox.Spreadsheet.SortState.Range" />.</exception>
            <exception cref="T:System.ArgumentException">Sort level with the specified column/row index already exists.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.Apply">
            <summary>
            Performs the sorting of this <see cref="P:GemBox.Spreadsheet.SortState.Range" /> based on this <see cref="T:GemBox.Spreadsheet.SortState" /> settings.
            </summary>
            <exception cref="T:System.InvalidOperationException">Sort range contains merged cells.</exception>
            <remarks>
            Hidden (<see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" /> is <see langword="true" />) rows (or columns, if <see cref="P:GemBox.Spreadsheet.SortState.LeftToRight" /> is <see langword="true" />) won't be sorted.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.SortState.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SortState"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SortState"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetColor">
            <summary>
            Represents a spreadsheet color.
            </summary>
            <remarks>
            <para>Spreadsheet color can either be empty / none, automatic, theme, standard or custom.</para>
            <para>Empty, automatic, theme and standard colors can be created using the factory method <see cref="M:GemBox.Spreadsheet.SpreadsheetColor.FromName(GemBox.Spreadsheet.ColorName)"/> which accepts <see cref="T:GemBox.Spreadsheet.ColorName"/> parameter.</para>
            <para><see href="http://msdn.microsoft.com/en-us/library/system.drawing.color.aspx">System.Drawing.Color</see> nor any other, technology-specific, color type wasn't deliberately used, because GemBox.Spreadsheet public interface is exposed only through GemBox.Spreadsheet and .NET BCL (base class library) types.</para>
            <para>To maintain backward compatibility <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> implements implicit conversion operators to and from <see href="http://msdn.microsoft.com/en-us/library/system.drawing.color.aspx">System.Drawing.Color</see>.</para>
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Color"/>
            <seealso cref="P:GemBox.Spreadsheet.CellBorder.LineColor"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.GradientColor1"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.GradientColor2"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.TabColor"/>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetColor.IsEmpty">
            <summary>
            Specifies whether this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure is uninitialized.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure is uninitialized; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetColor.R">
            <summary>
            Gets the red component value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure.
            </summary>
            <value>
            The red component value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetColor.G">
            <summary>
            Gets the green component value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure.
            </summary>
            <value>
            The green component value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetColor.B">
            <summary>
            Gets the blue component value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure.
            </summary>
            <value>
            The blue component value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.FromArgb(System.Int32)">
            <summary>
            Creates a <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure with the specified value.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits.
            </summary>
            <param name="red">The red component value for the new <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>. Valid values are 0 through 255.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure with the specified values.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="red"/>, <paramref name="green"/>, or <paramref name="blue"/> is less than 0 or greater than 255.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.FromName(GemBox.Spreadsheet.ColorName)">
            <summary>
            Creates a <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure from the specified predefined color.
            </summary>
            <param name="name">An element of the <see cref="T:GemBox.Spreadsheet.ColorName"/> enumeration.</param>
            <returns>A <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure with the specified value.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.ToArgb">
            <summary>
            Gets the 32-bit ARGB value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> structure.
            </summary>
            <returns>The 32-bit ARGB value of this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.Equals(GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            Determines whether the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.
            </summary>
            <param name="other">The other <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> to compare with this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.</param>
            <returns><see langword="true"/> if the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> and is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.op_Equality(GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.op_Inequality(GemBox.Spreadsheet.SpreadsheetColor,GemBox.Spreadsheet.SpreadsheetColor)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.op_Implicit(GemBox.Spreadsheet.SpreadsheetColor)~System.Drawing.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> to <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The input <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>.</param>
            <returns>
            The output <see cref="T:System.Drawing.Color"/> which is the result of the conversion.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetColor.op_Implicit(System.Drawing.Color)~GemBox.Spreadsheet.SpreadsheetColor">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Color"/> to <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/>.
            </summary>
            <param name="color">The input <see cref="T:System.Drawing.Color"/> color.</param>
            <returns>
            The output <see cref="T:GemBox.Spreadsheet.SpreadsheetColor"/> which is the result of the conversion.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetException">
            <summary>
            Represents errors that can occur in the GemBox.Spreadsheet component. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class with a specified error message. 
            </summary>
            <param name="msg">Message string.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="msg">Message string.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class with serialized data. 
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetHyperlink">
            <summary>
            Hyperlink class.
            </summary>
            <remarks>
            <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
            <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetHyperlink.key">
            <summary>
            The key of SpreadsheetHyperlinkData instance. 
            Only the following types are supported:
            - ExcelCell, if instantiated from ExcelCell.Hyperlink property,
            - ExcelRichCellData, if instantiated from SpreadsheetHyperlinkCollection.GetEnumerator() method,
            - MergedCellRange, if instantiated from MergedCellRange.Hyperlink property,
            - ExcelDrawing, if instantiated from ExcelDrawing.Hyperlink property
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.Exists">
            <summary>
            If hyperlink exists returns true, otherwise returns false.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.IsExternal">
            <summary>
            Defines if hyperlink location is in this excel file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.ToolTip">
            <summary>
            Gets or sets ToolTip for hyperlink.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.Location">
            <summary>
            Gets or sets the location string for hyperlink.
            <remarks>URL have to be in escaped format(You can use<see cref="M:System.Uri.EscapeUriString(System.String)">System.Uri.EscapeUriString</see> method).</remarks>
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlink.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/> and is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlink.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlink.op_Equality(GemBox.Spreadsheet.SpreadsheetHyperlink,GemBox.Spreadsheet.SpreadsheetHyperlink)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlink.op_Inequality(GemBox.Spreadsheet.SpreadsheetHyperlink,GemBox.Spreadsheet.SpreadsheetHyperlink)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection">
            <summary>
            Collection of hyperlinks (<see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>).
            </summary>
            <remarks>
            <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
            <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.dictionary">
            <summary>
            Ordered dictionary supporting objects of following types as keys: ExcelRichCellData, MergedCellRange and ExcelDrawing.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.SyncIndex">
            <summary>
            Used as part of cell synchronization mechanism.
            It is incremented by one each time the structure of dictionary or worksheet is changed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Item(System.Int32)">
            <summary>
            Gets the hyperlink at the specified index.
            </summary>
            <param name="index">The zero-based index of the hyperlink.</param>
            <returns>The hyperlink at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Count">
            <summary>
            Gets the number of hyperlinks contained in the collection. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Clear">
            <summary>
            Removes all hyperlinks. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the hyperlink at the specified index.
            </summary>
            <param name="index">The zero-based index of the hyperlink to remove.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Contains(GemBox.Spreadsheet.SpreadsheetHyperlinkData)">
            <summary>
            Determines whether a hyperlink is in the collection.
            </summary>
            <param name="hyperlink">The hyperlink to locate in the collection.</param>
            <returns>True if hyperlink is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlinkData.IsExternal">
            <summary>
            Defines if hyperlink location is in this excel file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlinkData.ToolTip">
            <summary>
            Gets or sets ToolTip for hyperlink.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlinkData.Location">
            <summary>
            Gets or sets the location string for hyperlink.
            <remarks>URL have to be in escaped format(You can use<see cref="M:System.Uri.EscapeUriString(System.String)">System.Uri.EscapeUriString</see> method).</remarks>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetIcon">
            <summary>
            Represents a spreadsheet icon.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIcon.None">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance whose <see cref="P:GemBox.Spreadsheet.SpreadsheetIcon.IconStyle"/> is equal to <see cref="F:GemBox.Spreadsheet.SpreadsheetIconStyle.None"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetIcon.#ctor(GemBox.Spreadsheet.SpreadsheetIconStyle,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon" />.
            </summary>
            <param name="iconStyle">The icon style.</param>
            <param name="id">The identifier of the icon from the set of icons specified by <paramref name="iconStyle" /> (usually a value between 0 and 4).</param>
            <exception cref="T:System.ArgumentException"><paramref name="iconStyle"/> cannot be set to <see cref="F:GemBox.Spreadsheet.SpreadsheetIconStyle.Custom"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> must be equal to 0 if <paramref name="iconStyle"/> is <see cref="F:GemBox.Spreadsheet.SpreadsheetIconStyle.None"/> or must be equal to or greater than 0 and less than then number of icons defined in the <paramref name="iconStyle"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetIcon.IconStyle">
            <summary>
            Gets the icon style.
            </summary>
            <value>
            The icon style.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetIcon.Id">
            <summary>
            Gets the identifier of the icon from the set of icons specified in <see cref="P:GemBox.Spreadsheet.SpreadsheetIcon.IconStyle"/>.
            </summary>
            <value>
            The identifier of the icon from the set of icons specified in <see cref="P:GemBox.Spreadsheet.SpreadsheetIcon.IconStyle"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetIcon.Equals(GemBox.Spreadsheet.SpreadsheetIcon)">
            <summary>
            Determines whether the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.
            </summary>
            <param name="other">The other <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> to compare with this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.</param>
            <returns><see langword="true"/> if the <paramref name="other"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetIcon.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> and is equal to this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetIcon.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetIcon.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetIcon.op_Equality(GemBox.Spreadsheet.SpreadsheetIcon,GemBox.Spreadsheet.SpreadsheetIcon)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>s are equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>s are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetIcon.op_Inequality(GemBox.Spreadsheet.SpreadsheetIcon,GemBox.Spreadsheet.SpreadsheetIcon)">
            <summary>
            Determines whether <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>s are not equal.
            </summary>
            <param name="first">The first <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>.</param>
            <param name="second">The second <see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="first"/> and <paramref name="second"/>&#160;<see cref="T:GemBox.Spreadsheet.SpreadsheetIcon"/>s are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetIconStyle">
            <summary>
            Represents an enumeration of visually distinct icon sets.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.None">
            <summary>
            No Cell Icon.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.Custom">
            <summary>
            <para>The custom icon set.</para>
            <para>Used only as a return value of <see cref="P:GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.IconStyle"/> if icon set conditional formatting rule contains icons of different styles or icons are not ordered.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeArrows">
            <summary>
            3 Arrows.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeArrowsGray">
            <summary>
            3 Arrows (Gray).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeFlags">
            <summary>
            3 Flags.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeTrafficLights">
            <summary>
            3 Traffic Lights.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeTrafficLightsRimmed">
            <summary>
            3 Traffic Lights (Rimmed).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeSigns">
            <summary>
            3 Signs.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeSymbolsCircled">
            <summary>
            3 Symbols (Circled).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeSymbols">
            <summary>
            3 Symbols.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeStars">
            <summary>
            3 Stars.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.ThreeTriangles">
            <summary>
            3 Triangles.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FourArrows">
            <summary>
            4 Arrows.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FourArrowsGray">
            <summary>
            4 Arrows (Gray).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FourRedToBlack">
            <summary>
            Red To Black.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FourRatings">
            <summary>
            4 Ratings.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FourTrafficLights">
            <summary>
            4 Traffic Lights.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FiveArrows">
            <summary>
            5 Arrows.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FiveArrowsGray">
            <summary>
            5 Arrows (Gray).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FiveRatings">
            <summary>
            5 Ratings.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FiveQuarters">
            <summary>
            5 Quarters.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetIconStyle.FiveBoxes">
            <summary>
            Five Boxes.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetInfo">
            <summary>
            Contains static licensing methods and diagnostic information about executing GemBox.Spreadsheet assembly.
            </summary>
        </member>
        <member name="E:GemBox.Spreadsheet.SpreadsheetInfo.FreeLimitReached">
            <summary>
            Occurs in loading or saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> when GemBox.Spreadsheet assembly is used with <b>FREE-LIMITED-KEY</b> license key and free limit is reached.
            </summary>
            <remarks>
            This event is raised when GemBox.Spreadsheet assembly is used with <b>FREE-LIMITED-KEY</b> license key and maximum number of rows (150 rows) or sheets (5 sheets) are reached.
            <para>Free mode will read / write first 150 rows/5 sheets normally and, if file has more than 150 rows or 5 sheets, it will throw <see cref="T:GemBox.Spreadsheet.FreeLimitReachedException" />.</para> 
            <para>You can use this event to continue using the assembly in a trial mode for performance testing (set <see cref="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction" /> to 
            <see cref="F:GemBox.Spreadsheet.FreeLimitReachedAction.ContinueAsTrial" />) or to stop further reading/writing (set <see cref="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction" /> to 
            <see cref="F:GemBox.Spreadsheet.FreeLimitReachedAction.Stop" />).</para>
            <para>Trial mode will read and write all file content but will insert word "TRIAL" on random places in the file.</para>        
            <para>For more information about GemBox.Spreadsheet evaluation and licensing, see <see href="6676d983-4f75-4e69-b1a2-108c0aeac431.htm" target="_self">evaluation and licensing</see>.</para>
            </remarks>
            <example>
      <para>
        Following code demonstrates one way of testing performances of GemBox.Spreadsheet.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PerformanceCounter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PerformanceCounter" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetInfo.Title">
            <summary>
            GemBox.Spreadsheet assembly title.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetInfo.FullVersion">
            <summary>
            GemBox.Spreadsheet assembly full version.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetInfo.SetLicense(System.String)">
            <summary>
            Call this method from your application to set GemBox.Spreadsheet serial key.
            </summary>
            <remarks>
            <para>You should call this method before using any other class from GemBox.Spreadsheet library. 
            Key can only be set once (if you try second key, exception will be thrown). 
            The best place to call this method is from static constructor of your application's main class.</para>
            <para>Valid serial key has multiple groups of alphanumeric characters, separated with dashes.</para>
            <para>Free version serial key is: <b>FREE-LIMITED-KEY</b>.</para>
            </remarks>
            <param name="serialKey">Serial key.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.Style">
            <summary>
            Represents a workbook (master) style which can be shared by multiple cells.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
            <seealso cref="T:GemBox.Spreadsheet.CellStyleCollection" />
        </member>
        <member name="P:GemBox.Spreadsheet.Style.Hidden">
            <summary>
            Gets or sets a value indicating whether this style is hidden in the application UI.
            </summary>
            <value>
            <see langword="true"/> if this style is hidden in the application UI; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Style.IncludeNumber">
            <summary>
            Gets or sets a value indicating whether the number formatting specified for this style will be used when this style is applied to a cell.
            </summary>
            <value>
            <see langword="true" /> if number formatting specified for this style will be used when this style is applied to a cell; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.Style.IncludeAlignment">
            <summary>
            Gets or sets a value indicating whether the alignment formatting specified for this style will be used when this style is applied to a cell.
            </summary>
            <value>
            <see langword="true" /> if alignment formatting specified for this style will be used when this style is applied to a cell; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.Style.IncludeFont">
            <summary>
            Gets or sets a value indicating whether the font formatting specified for this style will be used when this style is applied to a cell.
            </summary>
            <value>
            <see langword="true" /> if font formatting specified for this style will be used when this style is applied to a cell; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.Style.IncludeBorder">
            <summary>
            Gets or sets a value indicating whether the border formatting specified for this style will be used when this style is applied to a cell.
            </summary>
            <value>
            <see langword="true" /> if border formatting specified for this style will be used when this style is applied to a cell; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.Style.IncludeFill">
            <summary>
            Gets or sets a value indicating whether the fill formatting specified for this style will be used when this style is applied to a cell.
            </summary>
            <value>
            <see langword="true" /> if fill formatting specified for this style will be used when this style is applied to a cell; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.Style.IncludeProtection">
            <summary>
            Gets or sets a value indicating whether the protection formatting specified for this style will be used when this style is applied to a cell.
            </summary>
            <value>
            <see langword="true" /> if protection formatting specified for this style will be used when this style is applied to a cell; otherwise, <see langword="false" />.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.Style.Name">
            <summary>
            Gets or sets the name of this style.
            </summary>
            <value>
            The name of this style.
            </value>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates how to set workbook style to a range of cells:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SetStyle" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SetStyle" />
    </example><example>
      <para>
        Following code demonstrates when not to and when to initialize a new instance of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> class:
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyleConstructor" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyleConstructor" />
    </example><example>
      <para>Following code demonstrates cell formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="CellStyle" removeRegionMarkers="true" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="CellStyle" removeRegionMarkers="true" />
    </example>
            <exception cref="T:System.InvalidOperationException">Name cannot be changed if style is built-in.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.AbstractStyleHandler">
            <summary>
            Represents a base style handler for all non-differential styles: column / row / cell / cell range style, (named) style and style created from public constructor.
            </summary>
            <remarks>
            <para>This type also implements handlers for all formatting groups (number, alignment, font, border, fill and protection) to reduce number of types, avoid deep compositions of types and increase performance. 
            SRP (single-responsibility-principle) is sacrificed for simplicity and performance.</para>
            <para>Type is partial and implementation and interface for each formatting is in its own file.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetAlignment(System.Boolean)">
            <summary>
            Gets the alignment formatting from the underlying format holder.
            </summary>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <returns>The alignment formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetAlignment">
            <summary>
            <para>Gets the resolved alignment formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved alignment formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetAlignment(GemBox.Spreadsheet.Styles.AlignmentData)">
            <summary>
            Sets the alignment formatting.
            </summary>
            <param name="value">The alignment formatting.</param>
            <remarks>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetAlignment``1(System.Converter{GemBox.Spreadsheet.Styles.AlignmentData,``0})">
            <summary>
            Gets the resolved alignment formatting property based on a selector delegate.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved formatting property value.</returns>
            <exception cref="T:System.ArgumentNullException">Selector delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Selector's argument is never <see langword="null"/> and should not be modified (it is the same instance as in the underlying storage).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetAlignment(System.Action{GemBox.Spreadsheet.Styles.AlignmentData})">
            <summary>
            Sets the alignment formatting property using the action delegate.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <exception cref="T:System.ArgumentNullException">Action delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Action's argument is never <see langword="null"/> nor frozen (it is the same instance as in the underlying storage).</para>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetAlignmentInternal">
            <summary>
            <para>Gets the resolved alignment formatting.</para>
            <para>Returned value is never <see langword="null"/> and it might return formatting from the underlying storage.</para>
            </summary>
            <returns>The resolved alignment formatting.</returns>
            <remarks>
            This method should be used only by trusted code because it might return formatting from the underlying storage.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetAlignmentInternal(GemBox.Spreadsheet.Styles.AlignmentData)">
            <summary>
            Sets the alignment formatting without making any additional changes on the input argument.
            </summary>
            <param name="value">The alignment formatting.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetAlignmentInternal``1(System.Converter{GemBox.Spreadsheet.Styles.AlignmentData,``0})">
            <summary>
            Gets the resolved alignment formatting property value.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved alignment formatting property value.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetAlignmentInternal(System.Action{GemBox.Spreadsheet.Styles.AlignmentData})">
            <summary>
            Sets the alignment formatting property.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetBorder(System.Boolean)">
            <summary>
            Gets the border formatting from the underlying format holder.
            </summary>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <returns>The border formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetBorder">
            <summary>
            <para>Gets the resolved border formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetBorder(GemBox.Spreadsheet.Styles.BorderData)">
            <summary>
            Sets the border formatting.
            </summary>
            <param name="value">The border formatting.</param>
            <remarks>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetBorder(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the resolved single border formatting based on a selector.
            </summary>
            <param name="selector">The selector of the single border.</param>
            <returns>The resolved single border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetBorderUnresolved(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the unresolved (direct) single border formatting based on a selector.
            </summary>
            <param name="selector">The selector of the single border.</param>
            <returns>The unresolved (direct) single border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetBorder(GemBox.Spreadsheet.IndividualBorder,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the single border formatting.
            </summary>
            <param name="selector">The selector of the single border.</param>
            <param name="value">The formatting of the single border.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetBorder(GemBox.Spreadsheet.MultipleBorders,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets multiple borders formatting.
            </summary>
            <param name="selector">The selector of multiple borders.</param>
            <param name="value">The formatting of the borders.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetBorderInternal">
            <summary>
            <para>Gets the resolved border formatting.</para>
            <para>Returned value is never <see langword="null"/> and it might return formatting from the underlying storage.</para>
            </summary>
            <returns>The resolved border formatting.</returns>
            <remarks>
            This method should be used only by trusted code because it might return formatting from the underlying storage.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetBorderInternal(GemBox.Spreadsheet.Styles.BorderData)">
            <summary>
            Sets the border formatting without making any additional changes on the input argument.
            </summary>
            <param name="value">The border formatting.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetBorderInternal(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the resolved single border formatting.
            </summary>
            <param name="selector">The selector of the single border.</param>
            <returns>The resolved single border formatting.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetBorderUnresolvedInternal(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the unresolved (direct) single border formatting.
            </summary>
            <param name="selector">The selector of the single border.</param>
            <returns>The unresolved (direct) single border formatting.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetBorderInternal(GemBox.Spreadsheet.IndividualBorder,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the single border formatting.
            </summary>
            <param name="selector">The selector of the single border.</param>
            <param name="value">The formatting of the single border.</param>
            <remarks>
            <para>This internal method should be used only by trusted code.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetBorderInternal(GemBox.Spreadsheet.MultipleBorders,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets multiple borders formatting.
            </summary>
            <param name="selector">The selector of multiple borders.</param>
            <param name="value">The formatting of the borders.</param>
            <remarks>
            <para>This internal method should be used only by trusted code.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetCellFormat(System.Boolean)">
            <summary>
            Gets the cell formatting from the underlying format holder.
            </summary>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <returns>The cell formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetCellFormat">
            <summary>
            <para>Gets the resolved cell formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved cell formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetCellFormat(GemBox.Spreadsheet.Styles.CellFormatData)">
            <summary>
            Sets the cell formatting.
            </summary>
            <param name="value">The cell formatting.</param>
            <remarks>
            <para>Input cell formatting can be <see langword="null"/>, in which case it is replaced with empty formatting associated with the handler's workbook (default cell formatting which inherits all from 'Normal' style).</para>
            <para>If input cell formatting is from the another workbook or it is not attached to any workbook, it is imported.</para>
            <para>Input cell formatting is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetCellFormat(GemBox.Spreadsheet.Styles.CellFormatData,GemBox.Spreadsheet.Styles.CellFormatFlags)">
            <summary>
            Sets the cell formatting with specific formatting flags. If formatting flag is off, value will include formatting from the underlying format holder.
            </summary>
            <param name="value">The cell formatting value.</param>
            <param name="flags">The cell formatting flags.</param>
            <remarks>
            <para>Input cell formatting can be <see langword="null"/>, in which case it is replaced with empty formatting associated with the handler's workbook (default cell formatting which inherits all from 'Normal' style).</para>
            <para>If input cell formatting is from the another workbook or it is not attached to any workbook, it is imported.</para>
            <para>Input cell formatting is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetCellFormat``1(System.Converter{GemBox.Spreadsheet.Styles.CellFormatData,``0})">
            <summary>
            Gets the resolved cell formatting property based on a selector delegate.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved formatting property value.</returns>
            <exception cref="T:System.ArgumentNullException">Selector delegate is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetCellFormat(System.Action{GemBox.Spreadsheet.Styles.CellFormatData})">
            <summary>
            Sets the cell formatting property using the action delegate.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <exception cref="T:System.ArgumentNullException">Action delegate is <see langword="null"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetCellFormatInternal">
            <summary>
            <para>Gets the resolved cell formatting.</para>
            <para>Returned value is never <see langword="null"/> and it might return formatting from the underlying storage.</para>
            </summary>
            <returns>The resolved cell formatting.</returns>
            <remarks>
            This method should be used only by trusted code because it might return formatting from the underlying storage.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetCellFormatInternal(GemBox.Spreadsheet.Styles.CellFormatData)">
            <summary>
            Sets the cell formatting without making any additional changes on the input argument.
            </summary>
            <param name="value">The cell formatting.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetCellFormatInternal(GemBox.Spreadsheet.Styles.CellFormatData,GemBox.Spreadsheet.Styles.CellFormatFlags)">
            <summary>
            Sets the cell formatting with specific formatting flags without making any additional changes on the input argument. If formatting flag is off, current formatting is used; otherwise, formatting from the input cell formatting is used.
            </summary>
            <param name="value">The cell formatting.</param>
            <param name="flags">The cell formatting flags.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetCellFormatInternal``1(System.Converter{GemBox.Spreadsheet.Styles.CellFormatData,``0})">
            <summary>
            Gets the resolved cell formatting property value.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved cell formatting property value.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetCellFormatInternal(System.Action{GemBox.Spreadsheet.Styles.CellFormatData})">
            <summary>
            Sets the cell formatting property.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.Styles">
            <summary>
            Gets the styles associated with the workbook to which this style handler belongs.
            </summary>
            <value>
            The styles associated with the workbook to which this style handler belongs.
            </value>
            <remarks>
            This member is required because it provides additional services required by format handlers, 
            like importing style (if it is from another workbook), caching, retrieving color scheme, default / empty formatting and default ('Normal') style.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.CellFormatHolder">
            <summary>
            Gets the cell format holder.
            </summary>
            <value>
            The cell format holder.
            </value>
            <remarks>
            <para>Cell format holder is usually a parent editor (<see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> or <see cref="T:GemBox.Spreadsheet.ExcelCell"/>) of this cell format handler which either stores or inherits cell formatting.</para>
            <para>For example, <see cref="T:GemBox.Spreadsheet.ExcelCell"/> can either have cell formatting directly in its data, if it is allocated; otherwise it will inherit cell formatting from either <see cref="T:GemBox.Spreadsheet.ExcelRow"/> or <see cref="T:GemBox.Spreadsheet.ExcelColumn"/> or default / empty formatting from the associated workbook.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.IsDefaultInternal">
            <summary>
            Gets a value indicating whether resolved cell formatting is default (all formatting groups are <see langword="null"/> and referenced style is 'Normal').
            </summary>
            <value>
            <see langword="true"/> if resolved cell formatting is default; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.IsDefault">
            <summary>
            Gets a value indicating whether resolved cell formatting is default (all formatting groups are <see langword="null"/> and referenced style is 'Normal').
            </summary>
            <value>
            <see langword="true"/> if resolved cell formatting is default; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.IsDifferential">
            <summary>
            Gets a value indicating whether formatting is differential.
            </summary>
            <value>
            <see langword="true"/> if formatting is differential; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>If formatting is differential, then editor should always set some concrete value in <see cref="M:GemBox.Spreadsheet.Styles.IFormatHandler`1.Set(System.Action{`0})"/> method; otherwise, it can set <see langword="null"/> if value is default.</para>
            <para>For example, if setting <see cref="P:GemBox.Spreadsheet.Styles.FontData.Italic"/> and formatting is differential, only <see langword="true"/> or <see langword="false"/> value should be set.
            If formatting is not differential, then instead of <see langword="false"/> value, <see langword="null"/> can be set.</para>
            <para>Differential formatting inherits properties which are not <see langword="null"/>.
            Differential formatting are currently not used in GemBox.Spreadsheet, but they might soon be used (if we add support for rich text, rich text comments, conditional formatting, tables, pivot tables, auto-filter, sorting, etc.)</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.Colors">
            <summary>
            Gets the color scheme associated with this format handler.
            </summary>
            <value>
            The color scheme associated with this format handler.
            </value>
            <remarks>
            <para>Color scheme is used to convert theme and indexed (palette) colors to RGB format.</para>
            <para>If format handler is not associated with any workbook, then default color scheme is used (default 'Office' theme and default color palette); otherwise, color scheme from the associated workbook is used.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.Cache">
            <summary>
            Gets the format cache.
            </summary>
            <value>
            The format cache.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.EmptyFormat">
            <summary>
            Gets the empty formatting associated with handler's workbook (default cell formatting which inherits all from 'Normal' style).
            </summary>
            <value>
            The empty formatting associated with handler's workbook (default cell formatting which inherits all from 'Normal' style).
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.AbstractStyleHandler.NormalFormat">
            <summary>
            Gets the cell formatting of the 'Normal' style.
            </summary>
            <value>
            The cell formatting of the 'Normal' style.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.ClearCellFormat">
            <summary>
            Clears the cell format (it allocates data only if inherited cell format is not default).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.ClearCellFormatInternal">
            <summary>
            Sets cell format to empty/default format, if cell format holder is allocated or if inherited format is not default.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.TransferFormat``1(GemBox.Spreadsheet.Styles.CellFormatFlags,GemBox.Spreadsheet.Styles.CellFormatFlags,System.Boolean,GemBox.Spreadsheet.Styles.IFormatHolder{``0},GemBox.Spreadsheet.Styles.IFormatHolder{``0})">
            <summary>
            Transfers the format from source to destination holder if formatting flag is off.
            </summary>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <param name="flags">The flags.</param>
            <param name="offFlag">The off flag.</param>
            <param name="sourceInherited">If <see langword="true"/>, format will be cloned if it is not frozen.</param>
            <param name="source">The source format holder.</param>
            <param name="destination">The destination format holder.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFormat``1(System.Boolean,GemBox.Spreadsheet.Styles.IFormatHolder{``0})">
            <summary>
            Gets the formatting from the underlying format holder.
            </summary>
            <typeparam name="TFormat">The type of the formatting.</typeparam>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <param name="formatHolder">The format holder.</param>
            <returns>The formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFill(System.Boolean)">
            <summary>
            Gets the fill formatting from the underlying format holder.
            </summary>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <returns>The fill formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFill">
            <summary>
            <para>Gets the resolved fill formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved fill formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFill(GemBox.Spreadsheet.Styles.FillData)">
            <summary>
            Sets the fill formatting.
            </summary>
            <param name="value">The fill formatting.</param>
            <remarks>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFill``1(System.Converter{GemBox.Spreadsheet.Styles.FillData,``0})">
            <summary>
            Gets the resolved fill formatting property based on a selector delegate.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved formatting property value.</returns>
            <exception cref="T:System.ArgumentNullException">Selector delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Selector's argument is never <see langword="null"/> and should not be modified (it is the same instance as in the underlying storage).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFill(System.Action{GemBox.Spreadsheet.Styles.FillData})">
            <summary>
            Sets the fill formatting property using the action delegate.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <exception cref="T:System.ArgumentNullException">Action delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Action's argument is never <see langword="null"/> nor frozen (it is the same instance as in the underlying storage).</para>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFillInternal">
            <summary>
            <para>Gets the resolved fill formatting.</para>
            <para>Returned value is never <see langword="null"/> and it might return formatting from the underlying storage.</para>
            </summary>
            <returns>The resolved fill formatting.</returns>
            <remarks>
            This method should be used only by trusted code because it might return formatting from the underlying storage.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFillInternal(GemBox.Spreadsheet.Styles.FillData)">
            <summary>
            Sets the fill formatting without making any additional changes on the input argument.
            </summary>
            <param name="value">The fill formatting.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFillInternal``1(System.Converter{GemBox.Spreadsheet.Styles.FillData,``0})">
            <summary>
            Gets the resolved fill formatting property value.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved fill formatting property value.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFillInternal(System.Action{GemBox.Spreadsheet.Styles.FillData})">
            <summary>
            Sets the fill formatting property.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFont(System.Boolean)">
            <summary>
            Gets the font formatting from the underlying format holder.
            </summary>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <returns>The font formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFont">
            <summary>
            <para>Gets the resolved font formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved font formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFont(GemBox.Spreadsheet.Styles.FontData)">
            <summary>
            Sets the font formatting.
            </summary>
            <param name="value">The font formatting.</param>
            <remarks>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFont``1(System.Converter{GemBox.Spreadsheet.Styles.FontData,``0})">
            <summary>
            Gets the resolved font formatting property based on a selector delegate.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved formatting property value.</returns>
            <exception cref="T:System.ArgumentNullException">Selector delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Selector's argument is never <see langword="null"/> and should not be modified (it is the same instance as in the underlying storage).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFont(System.Action{GemBox.Spreadsheet.Styles.FontData})">
            <summary>
            Sets the font formatting property using the action delegate.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <exception cref="T:System.ArgumentNullException">Action delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Action's argument is never <see langword="null"/> nor frozen (it is the same instance as in the underlying storage).</para>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFontInternal">
            <summary>
            <para>Gets the resolved font formatting.</para>
            <para>Returned value is never <see langword="null"/> and it might return formatting from the underlying storage.</para>
            </summary>
            <returns>The resolved font formatting.</returns>
            <remarks>
            This method should be used only by trusted code because it might return formatting from the underlying storage.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFontInternal(GemBox.Spreadsheet.Styles.FontData)">
            <summary>
            Sets the font formatting without making any additional changes on the input argument.
            </summary>
            <param name="value">The font formatting.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetFontInternal``1(System.Converter{GemBox.Spreadsheet.Styles.FontData,``0})">
            <summary>
            Gets the resolved font formatting property value.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved font formatting property value.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetFontInternal(System.Action{GemBox.Spreadsheet.Styles.FontData})">
            <summary>
            Sets the font formatting property.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetNumber(System.Boolean)">
            <summary>
            Gets the number formatting from the underlying format holder.
            </summary>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <returns>The number formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetNumber">
            <summary>
            <para>Gets the resolved number formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved number formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetNumber(GemBox.Spreadsheet.Styles.NumberData)">
            <summary>
            Sets the number formatting.
            </summary>
            <param name="value">The number formatting.</param>
            <remarks>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetNumber``1(System.Converter{GemBox.Spreadsheet.Styles.NumberData,``0})">
            <summary>
            Gets the resolved number formatting property based on a selector delegate.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved formatting property value.</returns>
            <exception cref="T:System.ArgumentNullException">Selector delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Selector's argument is never <see langword="null"/> and should not be modified (it is the same instance as in the underlying storage).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetNumber(System.Action{GemBox.Spreadsheet.Styles.NumberData})">
            <summary>
            Sets the number formatting property using the action delegate.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <exception cref="T:System.ArgumentNullException">Action delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Action's argument is never <see langword="null"/> nor frozen (it is the same instance as in the underlying storage).</para>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetNumberInternal">
            <summary>
            <para>Gets the resolved number formatting.</para>
            <para>Returned value is never <see langword="null"/> and it might return formatting from the underlying storage.</para>
            </summary>
            <returns>The resolved number formatting.</returns>
            <remarks>
            This method should be used only by trusted code because it might return formatting from the underlying storage.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetNumberInternal(GemBox.Spreadsheet.Styles.NumberData)">
            <summary>
            Sets the number formatting without making any additional changes on the input argument.
            </summary>
            <param name="value">The number formatting.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetNumberInternal``1(System.Converter{GemBox.Spreadsheet.Styles.NumberData,``0})">
            <summary>
            Gets the resolved number formatting property value.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved number formatting property value.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetNumberInternal(System.Action{GemBox.Spreadsheet.Styles.NumberData})">
            <summary>
            Sets the number formatting property.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetProtection(System.Boolean)">
            <summary>
            Gets the protection formatting from the underlying format holder.
            </summary>
            <param name="writeable">If set to <see langword="true"/>, formatting will be cloned and set to underlying format holder, if it is frozen or inherited.</param>
            <returns>The protection formatting from the underlying format holder.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetProtection">
            <summary>
            <para>Gets the resolved protection formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved protection formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetProtection(GemBox.Spreadsheet.Styles.ProtectionData)">
            <summary>
            Sets the protection formatting.
            </summary>
            <param name="value">The protection formatting.</param>
            <remarks>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetProtection``1(System.Converter{GemBox.Spreadsheet.Styles.ProtectionData,``0})">
            <summary>
            Gets the resolved protection formatting property based on a selector delegate.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved formatting property value.</returns>
            <exception cref="T:System.ArgumentNullException">Selector delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Selector's argument is never <see langword="null"/> and should not be modified (it is the same instance as in the underlying storage).</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetProtection(System.Action{GemBox.Spreadsheet.Styles.ProtectionData})">
            <summary>
            Sets the protection formatting property using the action delegate.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <exception cref="T:System.ArgumentNullException">Action delegate is <see langword="null"/>.</exception>
            <remarks>
            <para>Action's argument is never <see langword="null"/> nor frozen (it is the same instance as in the underlying storage).</para>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetProtectionInternal">
            <summary>
            <para>Gets the resolved protection formatting.</para>
            <para>Returned value is never <see langword="null"/> and it might return formatting from the underlying storage.</para>
            </summary>
            <returns>The resolved protection formatting.</returns>
            <remarks>
            This method should be used only by trusted code because it might return formatting from the underlying storage.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetProtectionInternal(GemBox.Spreadsheet.Styles.ProtectionData)">
            <summary>
            Sets the protection formatting without making any additional changes on the input argument.
            </summary>
            <param name="value">The protection formatting.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because modifying the input argument later might make changes in the underlying storage.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.GetProtectionInternal``1(System.Converter{GemBox.Spreadsheet.Styles.ProtectionData,``0})">
            <summary>
            Gets the resolved protection formatting property value.
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved protection formatting property value.</returns>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.AbstractStyleHandler.SetProtectionInternal(System.Action{GemBox.Spreadsheet.Styles.ProtectionData})">
            <summary>
            Sets the protection formatting property.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <remarks>
            <para>This internal method should be used only by trusted code because input argument is not verified.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.CellStyleHandler">
            <summary>
            Represents a style handler for <see cref="T:GemBox.Spreadsheet.CellStyle"/> returned from <see cref="P:GemBox.Spreadsheet.AbstractRange.Style"/> property.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler">
            <summary>
            Represents a base style handler for columns, rows and cells.
            </summary>
            <remarks>
            <para>It delegates calls to row's / column's / cell's merged range style handler or to row's / column's cell range style handler.</para>
            <para>It also implements border resolution based on neighbor columns / rows / cells.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.BaseHandler">
            <summary>
            Gets the base handler for a column, row or cell.
            </summary>
            <value>
            The base handler for a column, row or cell.
            </value>
            <remarks>
            <para>If column / row / cell is a part of a merged range, then base handler is merged range style handler.</para>
            <para>Otherwise, if column / row is not a part of a merged range, base handler is column's / row's cells range style handler.</para>
            <para>Otherwise, if cell is not a part of a merged range, base handler is <see langword="null"/>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetNeighborHandler(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the neighbor handler.
            </summary>
            <param name="selector">The neighbor selector.</param>
            <returns>The neighbor handler or <see langword="null"/>, if column / row / cell doesn't have a selected neighbor (if it is first / last).</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.ClearBorderDirect(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Clears the direct border formatting.
            </summary>
            <param name="selector">The border selector.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetNeighborBorderDirect(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the neighbor's opposite direct border.
            </summary>
            <param name="selector">The neighbor selector.</param>
            <returns>The neighbor's opposite direct border or <see langword="null"/>, if neighbor doesn't exist.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.ClearNeighborBorderDirect(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Clears the neighbor's opposite direct border.
            </summary>
            <param name="selector">The neighbor selector.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.CompareBorders(System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData},System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Compares borders. Returns positive value if first border has higher precedence, negative value if second border has higher precedence or zero if borders have equal precedence.
            </summary>
            <param name="first">The first border.</param>
            <param name="second">The second border.</param>
            <returns>Positive value if first border has higher precedence, negative value if second border has higher precedence or zero if borders have equal precedence.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetBorderResolved(System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData},System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Gets the resolved border (with higher precedence).
            </summary>
            <param name="first">The first border.</param>
            <param name="second">The second border.</param>
            <returns>The resolved border.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetBorderResolved">
            <summary>
            Gets the resolved border if any direct neighbor border has higher precedence, otherwise <see langword="null"/>.
            </summary>
            <returns>The resolved border if any direct neighbor border has higher precedence, otherwise <see langword="null"/></returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetOppositeSelector(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the opposite border selector.
            </summary>
            <param name="selector">The opposite border selector.</param>
            <returns>The opposite border selector.</returns>
            <exception cref="T:System.InvalidOperationException">If selector is not for edge border.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetCellFormatInternal">
            <summary>
            Gets the resolved cell formatting (border formatting is resolved from neighbor borders).
            </summary>
            <returns>The resolved cell formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetCellFormatInternal(GemBox.Spreadsheet.Styles.CellFormatData)">
            <summary>
            Sets the resolved cell formatting (clears neighbor borders).
            </summary>
            <param name="value">The cell formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetCellFormatInternal(GemBox.Spreadsheet.Styles.CellFormatData,GemBox.Spreadsheet.Styles.CellFormatFlags)">
            <summary>
            Sets the resolved cell formatting with specific formatting flags (without clearing neighbor borders if border flag is set). If formatting flag is off, value will include formatting from the underlying format holder.
            </summary>
            <param name="value">The cell formatting value.</param>
            <param name="flags">The cell formatting flags.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetCellFormatDirect">
            <summary>
            Gets the direct cell formatting (without resolving border formatting from neighbor borders).
            </summary>
            <returns>The direct cell formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetCellFormatDirect(GemBox.Spreadsheet.Styles.CellFormatData)">
            <summary>
            Sets the direct cell formatting (without clearing neighbor borders).
            </summary>
            <param name="value">The cell formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetCellFormatDirect(GemBox.Spreadsheet.Styles.CellFormatData,GemBox.Spreadsheet.Styles.CellFormatFlags)">
            <summary>
            Sets the direct cell formatting with specific formatting flags (without clearing neighbor borders if border flag is set). If formatting flag is off, value will include formatting from the underlying format holder.
            </summary>
            <param name="value">The cell formatting value.</param>
            <param name="flags">The cell formatting flags.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetBorderInternal">
            <summary>
            Gets the resolved border formatting (resolved from neighbor borders).
            </summary>
            <returns>The resolved border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetBorderInternal(GemBox.Spreadsheet.Styles.BorderData)">
            <summary>
            Sets the resolved border formatting (clears neighbor borders).
            </summary>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetBorderInternal(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the resolved border formatting (resolved from neighbor border).
            </summary>
            <param name="selector">The border selector.</param>
            <returns>The resolved border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetBorderInternal(GemBox.Spreadsheet.IndividualBorder,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the resolved border formatting (clears neighbor border).
            </summary>
            <param name="selector">The border selector.</param>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetBorderInternal(GemBox.Spreadsheet.MultipleBorders,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the resolved border formatting (clears neighbor borders).
            </summary>
            <param name="selector">The borders selector.</param>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetBorderDirect">
            <summary>
            Gets the direct border formatting (without resolving from neighbor borders).
            </summary>
            <returns>The direct border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetBorderDirect(GemBox.Spreadsheet.Styles.BorderData)">
            <summary>
            Sets the direct border formatting (without clearing neighbor borders).
            </summary>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.GetBorderDirect(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the direct border formatting (without resolving from neighbor border).
            </summary>
            <param name="selector">The border selector.</param>
            <returns>The direct border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetBorderDirect(GemBox.Spreadsheet.IndividualBorder,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the direct border formatting (without clearing neighbor border).
            </summary>
            <param name="selector">The border selector.</param>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.ColumnRowCellStyleHandler.SetBorderDirect(GemBox.Spreadsheet.MultipleBorders,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the direct border formatting (without clearing neighbor borders).
            </summary>
            <param name="selector">The borders selector.</param>
            <param name="value">The border formatting.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.ColumnRowStyleHandler">
            <summary>
            Represents a style handler for <see cref="T:GemBox.Spreadsheet.CellStyle"/> returned from <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style"/> property.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.IBorderHandler">
            <summary>
            Represents a handler for border formatting which is used to decouple <see cref="T:GemBox.Spreadsheet.CellBorders"/> and <see cref="T:GemBox.Spreadsheet.CellBorder"/> types from the border format data in the underlying storage.
            </summary>
            <remarks>
            <para>Border formatting has a special handler because borders are dependent on the source of border formatting.</para>
            <para>For example, column / row / cell borders depend on the border of the neighbor column / row / cell (border resolution).</para>
            <para>Similarly, if border is set, adjacent border should be cleared (so it doesn't override set border if it has higher priority in border resolution).</para>
            <para>Cell range has specific behavior regarding borders. All other formatting in cell range is applied to every column / row / cell in the range, but outside borders are applied only to outside columns / rows / cells.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IBorderHandler.Get">
            <summary>
            <para>Gets the resolved border formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IBorderHandler.Set(GemBox.Spreadsheet.Styles.BorderData)">
            <summary>
            <para>Sets the border formatting.</para>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </summary>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IBorderHandler.Get(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the resolved border based on selector.
            </summary>
            <param name="selector">The selector of the border.</param>
            <returns>The resolved border based on selector.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IBorderHandler.GetUnresolved(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the unresolved (direct) border based on selector.
            </summary>
            <param name="selector">The selector of the border.</param>
            <returns>The unresolved (direct) border based on selector.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IBorderHandler.Set(GemBox.Spreadsheet.IndividualBorder,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the specified border using the selector.
            </summary>
            <param name="selector">The border selector.</param>
            <param name="value">The border value.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IBorderHandler.Set(GemBox.Spreadsheet.MultipleBorders,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the specified borders using the selector.
            </summary>
            <param name="selector">The borders selector.</param>
            <param name="value">The border value.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.IFormatHandler">
            <summary>
            Represents a base interface for a format handler. It contains members which are independent of the formatting data type which format handler handles.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IFormatHandler.IsDifferential">
            <summary>
            Gets a value indicating whether formatting is differential.
            </summary>
            <value>
            <see langword="true"/> if formatting is differential; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>If formatting is differential, then editor should always set some concrete value in <see cref="M:GemBox.Spreadsheet.Styles.IFormatHandler`1.Set(System.Action{`0})"/> method; otherwise, it can set <see langword="null"/> if value is default.</para>
            <para>For example, if setting <see cref="P:GemBox.Spreadsheet.Styles.FontData.Italic"/> and formatting is differential, only <see langword="true"/> or <see langword="false"/> value should be set.
            If formatting is not differential, then instead of <see langword="false"/> value, <see langword="null"/> can be set.</para>
            <para>Differential formatting inherits properties which are not <see langword="null"/>.
            Differential formatting are currently not used in GemBox.Spreadsheet, but they might soon be used (if we add support for rich text, rich text comments, conditional formatting, tables, pivot tables, auto-filter, sorting, etc.)</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IFormatHandler.Colors">
            <summary>
            Gets the color scheme associated with this format handler.
            </summary>
            <value>
            The color scheme associated with this format handler.
            </value>
            <remarks>
            <para>Color scheme is used to convert theme and indexed (palette) colors to RGB format.</para>
            <para>If format handler is not associated with any workbook, then default color scheme is used (default 'Office' theme and default color palette); otherwise, color scheme from the associated workbook is used.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.IFormatHandler`1">
            <summary>
            <para>Represents a format handler which is used to decouple format editor from the format data in the underlying storage.</para>
            <para>Format handler is responsible for resolving formatting or formatting property (without any storage allocation) and for setting formatting or formatting property (allocates storage if necessary).</para>
            </summary>
            <typeparam name="T">Format data type which this format handler handles.</typeparam>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IFormatHandler`1.Get">
            <summary>
            <para>Gets the resolved formatting.</para>
            <para>Returned value is never <see langword="null"/> and modifying it won't make any changes in the underlying storage (it is either cached or cloned version of formatting from the underlying storage or it is dynamically created).</para>
            </summary>
            <returns>The resolved formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IFormatHandler`1.Set(`0)">
            <summary>
            <para>Sets the formatting.</para>
            <para>Input value is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage). Input value can be <see langword="null"/>, in which case formatting will be resolved from the referenced (named) style.</para>
            </summary>
            <param name="value">The formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IFormatHandler`1.Get``1(System.Converter{`0,``0})">
            <summary>
            <para>Gets the resolved formatting property value based on a selector delegate.</para>
            <para>Selector's argument is never <see langword="null"/> and should not be modified (it is the same instance as in the underlying storage).</para>
            </summary>
            <typeparam name="TValue">The type of the formatting property.</typeparam>
            <param name="selector">The selector of the formatting property.</param>
            <returns>The resolved formatting property value.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IFormatHandler`1.Set(System.Action{`0})">
            <summary>
            <para>Sets the formatting property using the action delegate.</para>
            <para>Action's argument is never <see langword="null"/> nor frozen (it is the same instance as in the underlying storage).</para>.
            </summary>
            <param name="action">The action which sets the formatting property.</param>
            <remarks>
            <para>Action delegate is a closure since value which will be set to formatting property is hoisted in it. A little bit of performance is sacrificed for simplicity.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.IFormatHolder`1">
            <summary>
            Represents a holder of formatting data (cell format, number, alignment, font, border, fill or protection).
            </summary>
            <typeparam name="T">Type of the formatting data (cell format, number, alignment, font, border, fill or protection).</typeparam>
            <remarks>
            This interface is used in:
            <list type="number">
            <item><description>Delayed caching via format cache queue (implemented by <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBaseData"/> and <see cref="T:GemBox.Spreadsheet.ExcelCellData"/>). Member <see cref="P:GemBox.Spreadsheet.Styles.IFormatHolder`1.IsInherited"/> is not used in this case.</description></item>
            <item><description>Resolving and setting formatting and formatting properties via <see cref="T:GemBox.Spreadsheet.Styles.IFormatHandler`1"/> (implemented by <see cref="T:GemBox.Spreadsheet.ExcelColumnRowBase"/> and <see cref="T:GemBox.Spreadsheet.ExcelCell"/>).</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IFormatHolder`1.Item">
            <summary>
            Gets or sets the formatting data (cell format, number, alignment, font, border, fill or protection).
            </summary>
            <value>
            The formatting data.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IFormatHolder`1.IsInherited">
            <summary>
            Gets a value indicating whether formatting data of this instance is inherited.
            </summary>
            <value>
            <see langword="true"/> if formatting data of this instance is inherited; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.IStyleHandler">
            <summary>
            Represents a handler for cell formatting which is used to decouple <see cref="T:GemBox.Spreadsheet.CellStyle"/> type from the cell format data in the underlying storage.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IStyleHandler.IsDefault">
            <summary>
            Gets a value indicating whether resolved cell formatting is default (all formatting groups are <see langword="null"/> and referenced style is 'Normal').
            </summary>
            <value>
            <see langword="true"/> if resolved cell formatting is default; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IStyleHandler.Number">
            <summary>
            Gets the number formatting handler.
            </summary>
            <value>
            The number formatting handler.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IStyleHandler.Alignment">
            <summary>
            Gets the alignment formatting handler.
            </summary>
            <value>
            The alignment formatting handler.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IStyleHandler.Font">
            <summary>
            Gets the font formatting handler.
            </summary>
            <value>
            The font formatting handler.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IStyleHandler.Border">
            <summary>
            Gets the border formatting handler.
            </summary>
            <value>
            The border formatting handler.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IStyleHandler.Fill">
            <summary>
            Gets the fill formatting handler.
            </summary>
            <value>
            The fill formatting handler.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Styles.IStyleHandler.Protection">
            <summary>
            Gets the protection formatting handler.
            </summary>
            <value>
            The protection formatting handler.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.IStyleHandler.Set(GemBox.Spreadsheet.Styles.CellFormatData,GemBox.Spreadsheet.Styles.CellFormatFlags)">
            <summary>
            Sets the cell formatting with specific formatting flags. If formatting flag is off, current formatting is used; otherwise, formatting from the input cell formatting is used.
            </summary>
            <param name="value">The cell formatting.</param>
            <param name="flags">The cell formatting flags.</param>
            <remarks>
            <para>Input cell formatting can be <see langword="null"/>, in which case it is replaced with empty formatting associated with the handler's workbook (default cell formatting which inherits all from 'Normal' style).</para>
            <para>If input cell formatting is from the another workbook or it is not attached to any workbook, it is imported.</para>
            <para>Input cell formatting is either cached / frozen or cloned (modifying it later won't make any changes in the underlying storage).</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.NewStyleHandler">
            <summary>
            Represents a handler for a cell formatting not attached to any column, row, cell, cell range or (named) style (created with public <see cref="T:GemBox.Spreadsheet.CellStyle"/> constructors).
            </summary>
            <remarks>
            <para>If handler is not associated with any workbook, then it will be associated with a temporary, internal workbook visible only to this handler.</para>
            <para>This handler will also be used for any other formatting not attached to any column, row, cell, cell range nor (named) style (for example, <see cref="T:GemBox.Spreadsheet.ExcelFont"/> created with public constructors).</para>
            <para>This handler serves as a cell formatting holder for itself (it implements <see cref="T:GemBox.Spreadsheet.Styles.IFormatHolder`1"/> and returns self in <see cref="P:GemBox.Spreadsheet.Styles.NewStyleHandler.CellFormatHolder"/> property implementation.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.PresetCellStyles.Create(System.String)">
            <summary>
            Creates a deep clone of preset style with specific name. If preset style with specific name doesn't exist, 'Normal' style will be cloned, but with specified name.
            </summary>
            <param name="name">The style name.</param>
            <returns>A deep clone of preset style with specific name or a deep clone of 'Normal' style with specified name.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.RangeStyleHandler">
            <summary>
            Represents a style handler for <see cref="T:GemBox.Spreadsheet.CellStyle" /> returned from <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.ClearNeighborBorderDirect(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Clears the neighbor's opposite direct border.
            </summary>
            <param name="selector">The neighbor selector.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.TransferBorderInternal(GemBox.Spreadsheet.Styles.BorderData,GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Transfers the resolved border to destination border data.
            </summary>
            <param name="destinationBorder">The destination border data.</param>
            <param name="selector">The border selector.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.TransferBorderMerged(GemBox.Spreadsheet.Styles.BorderData,GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Transfers the merged range border to destination border data.
            </summary>
            <param name="destinationBorder">The destination border data.</param>
            <param name="selector">The border selector.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetCellFormatMerged(GemBox.Spreadsheet.Styles.CellFormatData)">
            <summary>
            Gets the merged cell formatting which includes resolved merged border formatting.
            </summary>
            <param name="cellWithValueDirectFormat">The direct cell formatting of a first cell with value.</param>
            <returns>
            The merged cell formatting which includes resolved merged border formatting.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetCellFormatMerged(GemBox.Spreadsheet.Styles.CellFormatData)">
            <summary>
            Sets the merged cell formatting.
            </summary>
            <param name="value">The merged cell formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetBorderMerged">
            <summary>
            Gets the merged border formatting. Diagonal borders are taken from the first column / row / cell. Outside borders are resolved from outside columns / rows / cells.
            </summary>
            <returns>The merged border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetBorderMerged(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets the merged single border formatting. If all outside columns / rows / cells have the same direct single border formatting, then that formatting is returned; otherwise, <see langword="null"/> is returned.
            </summary>
            <param name="selector">The border selector.</param>
            <returns>The merged single border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetCellFormatInternal">
            <summary>
            Gets the resolved cell formatting (border formatting is resolved from top-left, top-right and bottom-left column / row / cell).
            </summary>
            <returns>The resolved cell formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetCellFormatInternal(GemBox.Spreadsheet.Styles.CellFormatData)">
            <summary>
            Sets the resolved cell formatting (clears neighbor borders) to all columns / rows / cells in the range. Outside borders are set only to outside columns / rows / cells.
            </summary>
            <param name="value">The cell formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetCellFormatInternal(GemBox.Spreadsheet.Styles.CellFormatData,GemBox.Spreadsheet.Styles.CellFormatFlags)">
            <summary>
            Sets the resolved cell formatting with specific formatting flags (without clearing neighbor borders if border flag is set). If formatting flag is off, value will include formatting from the underlying format holder.
            </summary>
            <param name="value">The cell formatting value.</param>
            <param name="flags">The cell formatting flags.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetCellFormatDirect">
            <summary>
            Gets the direct cell formatting (without resolved borders) of the first column / row / cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetCellFormatDirect(GemBox.Spreadsheet.Styles.CellFormatData,System.Boolean)">
            <summary>
            Sets the direct cell formatting (without clearing neighbor borders) to all columns / rows / cells.
            </summary>
            <param name="value">The cell formatting.</param>
            <param name="all">If set to <see langword="false"/>, then direct borders will be set just to outside columns / rows / cells.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetCellFormatDirect(GemBox.Spreadsheet.Styles.CellFormatData,GemBox.Spreadsheet.Styles.CellFormatFlags,System.Boolean)">
            <summary>
            Sets the direct cell formatting with specific formatting flags (without clearing neighbor borders if border flag is set). If formatting flag is off, value will include formatting from the underlying format holder.
            </summary>
            <param name="value">The cell formatting value.</param>
            <param name="flags">The cell formatting flags.</param>
            <param name="all">If set to <see langword="false"/>, then direct borders will be set just to outside columns / rows / cells.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetBorderUnresolved(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            <para>Gets the unresolved (direct) single border formatting.</para>
            <para>If range is merged and all outside columns / rows / cells have the same unresolved (direct) single border formatting, then that formatting is returned; otherwise, <see langword="null"/> is returned.</para>
            <para>If range is not merged or border is not outside, then unresolved (direct) single border formatting is always taken from the first column / row / cell in the selected outside range.</para>
            </summary>
            <param name="selector">The border selector.</param>
            <returns>The unresolved (direct) single border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetBorderInternal">
            <summary>
            Gets the resolved border formatting (resolved from neighbor borders).
            </summary>
            <returns>The resolved border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetBorderInternal(GemBox.Spreadsheet.Styles.BorderData)">
            <summary>
            Sets the resolved border formatting (clears neighbor borders).
            </summary>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetBorderInternal(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            <para>Gets the resolved single border formatting.</para>
            <para>If range is merged and all outside columns / rows / cells have the same resolved single border formatting, then that formatting is returned; otherwise, <see langword="null"/> is returned.</para>
            <para>If range is not merged or border is not outside, then resolved single border formatting is always taken from the first column / row / cell in the selected outside range.</para>
            </summary>
            <param name="selector">The border selector.</param>
            <returns>The resolved single border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetBorderInternal(GemBox.Spreadsheet.IndividualBorder,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the resolved border formatting (clears neighbor border) for each column / row / cell in the selected outside range.
            </summary>
            <param name="selector">The border selector.</param>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetBorderInternal(GemBox.Spreadsheet.MultipleBorders,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            <para>Sets the resolved border formatting (clears neighbor borders).</para>
            <para>If all borders are selected and value is <see langword="null"/> direct borders of all columns / rows / cells will be set to <see langword="null"/>.</para>
            <para>Diagonal borders are set to all columns / rows / cells. Outside borders are set only to outside columns / rows / cells.</para>
            </summary>
            <param name="selector">The borders selector.</param>
            <param name="value">The border formatting.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.GetBorderDirect">
            <summary>
            Gets the direct border formatting (without resolving from neighbor borders) of the first column / row / cell.
            </summary>
            <returns>The direct border formatting.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetBorderDirect(GemBox.Spreadsheet.Styles.BorderData,System.Boolean)">
            <summary>
            Sets the direct border (without clearing neighbor borders) to all columns / rows / cells.
            </summary>
            <param name="value">The direct border formatting.</param>
            <param name="all">If set to <see langword="true"/>, all columns / rows / cells are affected; otherwise, only outside columns / rows / cells are affected.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Styles.RangeStyleHandler.SetBorderDirect(GemBox.Spreadsheet.IndividualBorder,System.Nullable{GemBox.Spreadsheet.Styles.SingleBorderData})">
            <summary>
            Sets the direct border formatting (without clearing neighbor border) to all columns / rows / cells in the outside range.
            </summary>
            <param name="selector">The border selector.</param>
            <param name="value">The border formatting.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.Styles.StyleHandler">
            <summary>
            Represents a style handler for a workbook style which can be shared by multiple cells.
            </summary>
            <remarks>
            Only additional behavior that this type adds is that it checks if formatting which should be set is <see langword="null"/>, and if it is, it is replaced with formatting from 'Normal' style.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.BuiltInTableStyleName">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.Tables.Table"/> built-in styles.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.None">
            <summary>
            No built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight1">
            <summary>
            '<b>TableStyleLight1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight2">
            <summary>
            '<b>TableStyleLight2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight3">
            <summary>
            '<b>TableStyleLight3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight4">
            <summary>
            '<b>TableStyleLight4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight5">
            <summary>
            '<b>TableStyleLight5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight6">
            <summary>
            '<b>TableStyleLight6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight7">
            <summary>
            '<b>TableStyleLight7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight8">
            <summary>
            '<b>TableStyleLight8</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight9">
            <summary>
            '<b>TableStyleLight9</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight10">
            <summary>
            '<b>TableStyleLight10</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight11">
            <summary>
            '<b>TableStyleLight11</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight12">
            <summary>
            '<b>TableStyleLight12</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight13">
            <summary>
            '<b>TableStyleLight13</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight14">
            <summary>
            '<b>TableStyleLight14</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight15">
            <summary>
            '<b>TableStyleLight15</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight16">
            <summary>
            '<b>TableStyleLight16</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight17">
            <summary>
            '<b>TableStyleLight17</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight18">
            <summary>
            '<b>TableStyleLight18</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight19">
            <summary>
            '<b>TableStyleLight19</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight20">
            <summary>
            '<b>TableStyleLight20</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleLight21">
            <summary>
            '<b>TableStyleLight21</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium1">
            <summary>
            '<b>TableStyleMedium1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium2">
            <summary>
            '<b>TableStyleMedium2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium3">
            <summary>
            '<b>TableStyleMedium3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium4">
            <summary>
            '<b>TableStyleMedium4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium5">
            <summary>
            '<b>TableStyleMedium5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium6">
            <summary>
            '<b>TableStyleMedium6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium7">
            <summary>
            '<b>TableStyleMedium7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium8">
            <summary>
            '<b>TableStyleMedium8</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium9">
            <summary>
            '<b>TableStyleMedium9</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium10">
            <summary>
            '<b>TableStyleMedium10</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium11">
            <summary>
            '<b>TableStyleMedium11</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium12">
            <summary>
            '<b>TableStyleMedium12</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium13">
            <summary>
            '<b>TableStyleMedium13</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium14">
            <summary>
            '<b>TableStyleMedium14</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium15">
            <summary>
            '<b>TableStyleMedium15</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium16">
            <summary>
            '<b>TableStyleMedium16</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium17">
            <summary>
            '<b>TableStyleMedium17</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium18">
            <summary>
            '<b>TableStyleMedium18</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium19">
            <summary>
            '<b>TableStyleMedium19</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium20">
            <summary>
            '<b>TableStyleMedium20</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium21">
            <summary>
            '<b>TableStyleMedium21</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium22">
            <summary>
            '<b>TableStyleMedium22</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium23">
            <summary>
            '<b>TableStyleMedium23</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium24">
            <summary>
            '<b>TableStyleMedium24</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium25">
            <summary>
            '<b>TableStyleMedium25</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium26">
            <summary>
            '<b>TableStyleMedium26</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium27">
            <summary>
            '<b>TableStyleMedium27</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleMedium28">
            <summary>
            '<b>TableStyleMedium28</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark1">
            <summary>
            '<b>TableStyleDark1</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark2">
            <summary>
            '<b>TableStyleDark2</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark3">
            <summary>
            '<b>TableStyleDark3</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark4">
            <summary>
            '<b>TableStyleDark4</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark5">
            <summary>
            '<b>TableStyleDark5</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark6">
            <summary>
            '<b>TableStyleDark6</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark7">
            <summary>
            '<b>TableStyleDark7</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark8">
            <summary>
            '<b>TableStyleDark8</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark9">
            <summary>
            '<b>TableStyleDark9</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark10">
            <summary>
            '<b>TableStyleDark10</b>' built-in style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.BuiltInTableStyleName.TableStyleDark11">
            <summary>
            '<b>TableStyleDark11</b>' built-in style.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.Table">
            <summary>
            Represents a worksheet table.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.Name">
            <summary>
            Gets the table name.
            </summary>
            <value>
            The table name.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.Columns">
            <summary>
            Gets the collection of table columns.
            </summary>
            <value>
            The collection of table columns.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.Rows">
            <summary>
            Gets the collection of table rows.
            </summary>
            <value>
            The collection of table rows.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.BuiltInStyle">
            <summary>
            Gets or sets the built-in style used in the body of the <see cref="T:GemBox.Spreadsheet.Tables.Table" />.
            </summary>
            <value>
            The built-in style used in the body of the <see cref="T:GemBox.Spreadsheet.Tables.Table" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.StyleOptions">
            <summary>
            Gets or sets the options to be applied to the <see cref="T:GemBox.Spreadsheet.Tables.Table" /> style.
            </summary>
            <value>
            The options to be applied to the <see cref="T:GemBox.Spreadsheet.Tables.Table" /> style.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.Range">
            <summary>
            Gets the table range.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </value>
            <remarks>
            Property returns complete table range which includes header row and, if enabled, totals row.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.DataRange">
            <summary>
            Gets the table data range.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </value>
            <remarks>
            Property returns table range without header row and, if enabled, totals row.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.HasTotalsRow">
            <summary>
            Gets or sets a value indicating whether this table has a totals row.
            </summary>
            <value>
            <c>True</c> if this table has totals row; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.Filter">
            <summary>
            Gets the table filter.
            </summary>
            <value>
            The table filter.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.Table.Sort">
            <summary>
            Gets the table sort.
            </summary>
            <value>
            The table sort.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.Table.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Tables.Table"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Tables.Table"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.Table.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:GemBox.Spreadsheet.Tables.Table"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this <see cref="T:GemBox.Spreadsheet.Tables.Table"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is a <see cref="T:GemBox.Spreadsheet.Tables.Table"/> and is equal to this <see cref="T:GemBox.Spreadsheet.Tables.Table"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.Table.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.Tables.Table"/> instance.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.Tables.Table"/> instance.
            </returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.TableCollection">
            <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.Tables.Table"/> items.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Tables.Table" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.Tables.Table" /> at the specified index.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.Tables.Table" />.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.Tables.Table" /> at the specified index.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableCollection.Item(System.String)">
            <summary>
            Gets <see cref="T:GemBox.Spreadsheet.Tables.Table"/> described by name from the collection.
            </summary>
            <param name="name">Name of the table.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.Tables.Table" />s contained in the collection.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.Tables.Table" />s contained in the collection.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>
            The collection enumerator.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:GemBox.Spreadsheet.Tables.Table"/> to the collection.
            </summary>
            <param name="name">The name of the <see cref="T:GemBox.Spreadsheet.Tables.Table"/>.</param>
            <param name="range">The <see cref="T:GemBox.Spreadsheet.Tables.Table"/> cell range.</param>
            <param name="hasHeaders">Specifies whether the range contains a header row.</param>
            <returns>
            Newly added <see cref="T:GemBox.Spreadsheet.Tables.Table"/>.
            </returns>
            <remarks>
            Method creates and adds a new table to the worksheet.
            If <paramref name="hasHeaders"/> is <c>true</c> first row in specified range will be used as header row; otherwise, table's range will be expanded by inserting a header row.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableCollection.Add(System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
            <summary>
            Adds a new <see cref="T:GemBox.Spreadsheet.Tables.Table"/> to the collection.
            </summary>
            <param name="name">The name of the <see cref="T:GemBox.Spreadsheet.Tables.Table"/>.</param>
            <param name="range">The <see cref="T:GemBox.Spreadsheet.Tables.Table"/> cell range.</param>
            <param name="hasHeaders">Specifies whether the range contains a header row.</param>
            <returns>
            Newly added <see cref="T:GemBox.Spreadsheet.Tables.Table"/>.
            </returns>
            <remarks>
            Method creates and adds a new table to the worksheet.
            If <paramref name="hasHeaders"/> is <c>true</c> first row in specified range will be used as header row; otherwise, table's range will be expanded by inserting a header row.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="range"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="range"/> doesn't belong to the parent worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <see cref="T:GemBox.Spreadsheet.Tables.Table"/> or <see cref="T:GemBox.Spreadsheet.DefinedName"/> with same name already exists.
            </exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableCollection.RemoveAt(System.Int32,GemBox.Spreadsheet.RemoveShiftDirection)">
            <summary>
            Removes the <see cref="T:GemBox.Spreadsheet.Tables.Table"/> at the specified index.
            </summary>
            <param name="index">The table index.</param>
            <param name="direction">The removal shift direction.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableCollection.Remove(GemBox.Spreadsheet.Tables.Table,GemBox.Spreadsheet.RemoveShiftDirection)">
            <summary>
            Removes the specified <see cref="T:GemBox.Spreadsheet.Tables.Table"/>.
            </summary>
            <param name="table">The table.</param>
            <param name="direction">The removal shift direction.</param>
            <returns>
            <c>True</c> if <see cref="T:GemBox.Spreadsheet.Tables.Table"/> was removed from the collection; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="table"/> is null.
            </exception>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.TableColumn">
            <summary>
            Represents a <see cref="T:GemBox.Spreadsheet.Tables.Table"/> column.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumn.Parent">
            <summary>
            Gets the parent <see cref="T:GemBox.Spreadsheet.Tables.Table"/>.
            </summary>
            <value>
            The parent <see cref="T:GemBox.Spreadsheet.Tables.Table"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumn.Index">
            <summary>
            Gets the column index.
            </summary>
            <value>
            The column index.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumn.Range">
            <summary>
            Gets the column range.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </value>
            <remarks>
            Property returns complete column range which includes header row and, if enabled, totals row.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumn.DataRange">
            <summary>
            Gets the column data range.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </value>
            <remarks>
            Property returns column range without header row and, if enabled, totals row.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumn.Name">
            <summary>
            Gets or sets the column name.
            </summary>
            <value>
            The column name.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumn.TotalsRowFunction">
            <summary>
            Gets or sets the totals row function.
            </summary>
            <value>
            The totals row function.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Parent table doesn't have totals row.
            </exception>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumn.TotalsRowFormula">
            <summary>
            Gets or sets the totals row formula.
            </summary>
            <value>
            The totals row formula.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Parent table doesn't have totals row.
            </exception>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.TableColumnCollection">
            <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/> items.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumnCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.Tables.TableColumn" />s contained in the collection.
            </summary>
            <value>
            The number of <see cref="T:GemBox.Spreadsheet.Tables.TableColumn" />s contained in the collection.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/>.
            </value>
            <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/>.</param>
            <returns>
            The <see cref="T:GemBox.Spreadsheet.Tables.TableColumn" /> at the specified index.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableColumnCollection.Item(System.String)">
            <summary>
            Gets <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/> described by name from the collection.
            </summary>
            <param name="name">Name of the table column.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableColumnCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>
            The collection enumerator.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableColumnCollection.Add">
            <summary>
            Adds a new <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/> to the collection.
            </summary>
            <returns>
            Newly added <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableColumnCollection.Insert(System.Int32)">
            <summary>
            Inserts a new <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/> at the specified index.
            </summary>
            <param name="index">The column index.</param>
            <returns>
            Newly added <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/> at the specified index.
            </summary>
            <param name="index">The column index.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableColumnCollection.Remove(GemBox.Spreadsheet.Tables.TableColumn)">
            <summary>
            Removes the specified <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/>.
            </summary>
            <param name="column">The table column.</param>
            <returns>
            <c>True</c> if <see cref="T:GemBox.Spreadsheet.Tables.TableColumn"/> was removed from the collection; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="column"/> is null.
            </exception>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.TableRowCollection">
            <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.Tables.Table"/> rows, not including header and, if enabled, totals row.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Tables.TableRowCollection.Count">
            <summary>
            Gets the number of rows contained in the collection, not including the header row and, if enabled, totals row.
            </summary>
            <value>
            The number of rows contained in the collection.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableRowCollection.Add">
            <summary>
            Adds a new row to the collection.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableRowCollection.Insert(System.Int32)">
            <summary>
            Inserts a new row at the specified index.
            </summary>
            <param name="index">The row index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Tables.TableRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index.
            </summary>
            <param name="index">The row index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.TableStyleOptions">
            <summary>
            Specifies which options are applied to a <see cref="T:GemBox.Spreadsheet.Tables.Table"/> style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TableStyleOptions.None">
            <summary>
            Do not apply any option.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TableStyleOptions.FirstColumn">
            <summary>
            Show the first column.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TableStyleOptions.LastColumn">
            <summary>
            Show the last column.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TableStyleOptions.BandedRows">
            <summary>
            Show row stripe formatting for the table.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TableStyleOptions.BandedColumns">
            <summary>
            Show column stripe formatting for the table.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Tables.TotalsRowFunction">
            <summary>
            Total row functions.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.Custom">
            <summary>
            Custom function.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.Average">
            <summary>
            Average.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.CountNumber">
            <summary>
            Count of number cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.Count">
            <summary>
            Count of number and non-empty cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.StdDev">
            <summary>
            Standard deviation.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.Sum">
            <summary>
            Sum.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Tables.TotalsRowFunction.Var">
            <summary>
            Variance.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Top10Filter">
            <summary>
            Represents a filter that filters by a top N (percent or number of items).
            </summary>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.Top10Filter.Top">
            <summary>
            <para>Gets or sets a value indicating whether or not to filter by top order. A <see langword="false" /> value filters by bottom order.</para>
            <para>Default value is <see langword="true" />.</para>
            </summary>
            <value>
            <see langword="true" /> to filter by top order; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Top10Filter.Percent">
            <summary>
            <para>Gets or sets a value indicating whether or not to filter by percent value of the column. A <see langword="false" /> value filters by number of items.</para>
            <para>Default value is <see langword="false" />.</para>
            </summary>
            <value>
            <see langword="true" /> to filter by percent value of the column; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Top10Filter.FilterType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.FilterType.Top10"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.FilterType.Top10"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Top10Filter.Value">
            <summary>
            Gets or sets the top or bottom value to use as the filter criteria. For example "Filter by Top 10 Percent" or "Filter by Top 5 Items".
            </summary>
            <value>
            The top or bottom value to use as the filter criteria.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be greater than zero.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.Top10Filter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Top10Filter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.Top10Filter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.UnderlineStyle">
            <summary>
            Represents the different types of possible underline formatting used in <see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle" /> member.
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates font formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Font" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Font" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle" />
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.Single">
            <summary>
            Single-line underlining under each character in the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.Double">
            <summary>
            Double-line underlining under each character in the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.SingleAccounting">
            <summary>
            <para>Single-line accounting underlining under each character in the cell.</para>
            <para>This option is currently not supported in PDF, XPS and image file formats and defaults to <see cref="F:GemBox.Spreadsheet.UnderlineStyle.Single"/>.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.DoubleAccounting">
            <summary>
            <para>Double-line accounting underlining under each character in the cell.</para>
            <para>This option is currently not supported in PDF, XPS and image file formats and defaults to <see cref="F:GemBox.Spreadsheet.UnderlineStyle.Double"/>.</para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ValuesFilter">
            <summary>
            Represents a filter that filters by a list of values.
            </summary>
            <example>
      <para>
        Following methods shows various ways to specify and apply an <see cref="T:GemBox.Spreadsheet.AutoFilter" /> to a range of cells.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Filter" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Filter" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-autofilter/112">Excel AutoFiltering example</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ValuesFilter.FilterType">
            <summary>
            Gets the <see cref="F:GemBox.Spreadsheet.FilterType.Values"/> value.
            </summary>
            <value>
            The <see cref="F:GemBox.Spreadsheet.FilterType.Values"/> value.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ValuesFilter.Values">
            <summary>
            <para>Gets the list of values to filter by.</para>
            <para>The list can contain <see langword="null"/>, <see cref="T:System.String"/> and <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> values.</para>
            </summary>
            <value>
            The list of values to filter by.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.ValuesFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this <see cref="T:GemBox.Spreadsheet.ValuesFilter"/> instance.
            </returns>
            <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ValuesFilter.SetValues(System.Collections.IEnumerable)">
            <summary>
            <para>Sets the list of values to filter by.</para>
            <para>The list can contain <see langword="null"/>, <see cref="T:System.String"/> and <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> values.</para>
            </summary>
            <param name="items">The list of values to filter by.</param>
            <exception cref="T:System.NotSupportedException"><paramref name="items"/> contains an item which is not <see langword="null"/>, <see cref="T:System.String"/> or <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ValuesFilter.SetValues(System.Object[])">
            <summary>
            <para>Sets the list of values to filter by.</para>
            <para>The list can contain <see langword="null"/>, <see cref="T:System.String"/> and <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/> values.</para>
            </summary>
            <param name="items">The list of values to filter by.</param>
            <exception cref="T:System.NotSupportedException"><paramref name="items"/> contains an item which is not <see langword="null"/>, <see cref="T:System.String"/> or <see cref="T:GemBox.Spreadsheet.DateTimeGroup"/>.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.VerticalAlignmentStyle">
            <summary>
            Represents available vertical alignment options used in <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" /> member. 
            </summary>
            <remarks>
      <para>Conceptually, cell formatting is divided into following groups:</para><list type="bullet">
      <item>
        <description>
          <b>Number</b> - indicates how to format and render the numeric value of a cell. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat" />.
        </description>
      </item>
      <item>
        <description>
          <b>Alignment</b> - formatting information pertaining to text alignment in cells. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Indent" />, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />, <see cref="P:GemBox.Spreadsheet.CellStyle.WrapText" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit" />.
        </description>
      </item>
      <item>
        <description>
          <b>Font</b> - defines the properties for the used font. Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Font" />.
        </description>
      </item>
      <item>
        <description>
          <b>Border</b> - expresses a single set of cell border formats (left, right, top, bottom and diagonal). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.Borders" />.
        </description>
      </item>
      <item>
        <description>
          <b>Fill</b> - specifies fill formatting (pattern or gradient). Associated property is <see cref="P:GemBox.Spreadsheet.CellStyle.FillPattern" />.
        </description>
      </item>
      <item>
        <description>
          <b>Protection</b> - contains protection properties associated with the cell. Associated properties are <see cref="P:GemBox.Spreadsheet.CellStyle.Locked" /> and <see cref="P:GemBox.Spreadsheet.CellStyle.FormulaHidden" />.
        </description>
      </item>
    </list><para>
      Additional <see cref="T:GemBox.Spreadsheet.CellStyle" /> properties not associated with any formatting group are:
    </para><list type="bullet">
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.Name" /> - name of the referenced <see cref="T:GemBox.Spreadsheet.Style">workbook style</see>.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.QuotePrefix" /> - <see langword="true" /> to store numeric value of a cell as text; otherwise, <see langword="false" />.
        </description>
      </item>
      <item>
        <description>
          <see cref="P:GemBox.Spreadsheet.CellStyle.IsDefault" /> - <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook style</see> is default (<b>
            <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
          </b>) and there are no additional modifications of cell formatting; otherwise, <see langword="false" />.
        </description>
      </item>
    </list><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> contains a set of <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">master styles</see> which can be referenced by multiple cells.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.ExcelFile">Workbook</see> must always contain at least one <see cref="T:GemBox.Spreadsheet.Style">master style</see> which cannot be removed and is, by default, referenced by all cells. This default style is <b>
        <see cref="P:GemBox.Spreadsheet.CellStyleCollection.Normal" />
      </b>.
    </para><para>
      <see cref="T:GemBox.Spreadsheet.Style">Workbook style</see> can either be built-in or user-defined. Built-in style is accessible from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles">workbook styles</see> via <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> enumeration.
    </para><para>
      Cell formatting group (Number, Alignment, Font, Border, Fill or Protection) (and its associated properties) is resolved from <see cref="P:GemBox.Spreadsheet.CellStyle.Name">referenced</see> <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see>, unless cell formatting group or its associated property is modified.
    </para><para>
      Cell formatting is available for one or more cells through <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property which is available on <see cref="T:GemBox.Spreadsheet.ExcelCell" /> and <see cref="T:GemBox.Spreadsheet.CellRange" /> types.
      Cell formatting specified on <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> and <see cref="T:GemBox.Spreadsheet.ExcelRow" /> types through <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" /> property is simply propagated to cell formatting of its <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Cells" />.
    </para><note type="note">
      <para>
        For performance reasons, cell formatting on <see cref="T:GemBox.Spreadsheet.CellRange" /> is resolved based just on its top-left cell formatting, except borders which are resolved based on corner cells depending on border side.
      </para>
      <para>
        Setting cell formatting property on <see cref="T:GemBox.Spreadsheet.CellRange" /> is propagated to each cell in a range.
      </para>
    </note><para>
      To set <see cref="T:GemBox.Spreadsheet.Style">workbook (master) style</see> to one or more cells, simply assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property.
    </para><note type="tip">
      <para>
      Preferable way to modify formatting property of multiple cells is to get <see cref="T:GemBox.Spreadsheet.CellRange" /> to which all those cells belong, and use <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range to make the modification.
    </para><para>
      If modifying multiple formatting properties of a <see cref="T:GemBox.Spreadsheet.CellRange" />, without preserving unmodified formatting properties, preferable way is to create new instance of <see cref="T:GemBox.Spreadsheet.CellStyle" />, make modifications on it, and assign it to <see cref="P:GemBox.Spreadsheet.AbstractRange.Style" /> property of that range.
    </para>
    </note><para>
      GemBox.Spreadsheet internally takes care not to allocate unnecessary cells when formatting a range of cells (for example, when formatting <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">all worksheet cells</see>) and to cache formatting information of equally formatted cells, at the appropriate time, to reduce memory footprint.
    </para>
    </remarks><example>
      <para>Following code demonstrates alignment formatting:</para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="Alignment" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="Alignment" />
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Top">
            <summary>
            The vertical alignment is aligned-to-top.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Center">
            <summary>
            The vertical alignment is centered across the height of the cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom">
            <summary>
            The vertical alignment is aligned-to-bottom.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Justify">
            <summary>
            <para>When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top and bottom margins.</para>
            <para>When text direction is vertical: similar behavior as horizontal justification. The alignment is justified (flush top and bottom in this case). For each line of text, each line of the wrapped text in a cell is aligned to the top and bottom (except the last line). If no single line of text wraps in the cell, then the text is not justified.</para>
            <para>This option is currently not supported in PDF, XPS and image file formats and defaults to <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Top"/>.</para>
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Distributed">
            <summary>
            <para>When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top and bottom margins.</para>
            <para>When text direction is vertical: behaves exactly as distributed horizontal alignment. The first words in a line of text (appearing at the top of the cell) are flush with the top edge of the cell, and the last words of a line of text are flush with the bottom edge of the cell, and the line of text is distributed evenly from top to bottom.</para>
            <para>This option is currently not supported in PDF, XPS and image file formats and defaults to <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Center"/>.</para>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.VerticalPageBreak">
            <summary>
            Specifies a vertical position where the new page begins when the worksheet is printed.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreak.Column">
            <summary>
            Index of the first column of the new page.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreak.FirstRow">
            <summary>
            Index of the first row of the new page.
            </summary>
            <remarks>
            Use 0 (first row) if you don't care.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreak.LastRow">
            <summary>
            Index of the last row of the new page.
            </summary>
            <remarks>
            Use 65535 (last row) if you don't care.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreak.CheckBreakIndex(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreak.CheckLimit(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.VerticalPageBreakCollection">
            <summary>
            Collection of vertical page breaks (<see cref="T:GemBox.Spreadsheet.VerticalPageBreak" />).
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="PageBreaks" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="PageBreaks" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.CreateItem(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreakCollection.MaxLastLimit">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.Add(System.Int32)">
            <overloads>Ads a new vertical page break.</overloads>
            <summary>
            Ads a new vertical page break left to the specified column.
            </summary>
            <param name="column">The zero-based index of the column.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ads a new vertical page break left to the specified column and within specified rows.
            </summary>
            <param name="column">The zero-based index of the column.</param>
            <param name="firstRow">The zero-based index of the first row.</param>
            <param name="lastRow">The zero-based index of the last row.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the vertical page break at the specified index.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ViewType">
            <summary>
            Specifies the view type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ViewType.Normal">
            <summary>
            Normal view
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ViewType.PageBreakPreview">
            <summary>
            Page break preview
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ViewType.PageLayout">
            <summary>
            Page Layout View
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.WorkbookProtection">
            <summary>
            Protection settings.
            Supported in XLSX only.
            </summary>
            <remarks>
            Properties in this class are simply written to Excel file and have no effect on the behavior of this library.
            For more information on workbook protection, consult Microsoft Excel documentation.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorkbookProtection.PasswordHash">
            <summary>
            Gets or sets the password hash for protected workbook.
            </summary>
            <remarks>
            This property needs to be set to value of type ushort (property is of type int because ushort is not CLS compliant). 
            For setting password it can be also used <see cref="M:GemBox.Spreadsheet.WorkbookProtection.SetPassword(System.String)"/> method. 
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorkbookProtection.ProtectStructure">
            <summary>
            Gets or sets if workbook structure is protected.
            Default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorkbookProtection.ProtectWindows">
            <summary>
            Gets or sets if workbook window is protected.
            Default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.WorkbookProtection.SetPassword(System.String)">
            <summary>
            Sets the password for protected workbook.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.WorksheetPanes">
            <summary>
            Represents the worksheet panes.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.WorksheetPanes.#ctor(GemBox.Spreadsheet.PanesState,System.Single,System.Single,System.String,GemBox.Spreadsheet.PanePosition)">
            <summary>
            Worksheet panes constructor.
            </summary>
            <param name="state">State of the panes.</param>
            <param name="xSplit">If the panes are frozen, xSplit represents the number of columns visible in the top right pane. If the panes are not frozen, xSplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.</param>
            <param name="ySplit">If the panes are frozen, ySplit represents the number of rows visible in the top right pane. If the panes are not frozen, ySplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.</param>
            <param name="topLeftCell">Top left visible cell in the bottom right pane.</param>
            <param name="activePane">Position of the active pane.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.WorksheetPanes.#ctor(GemBox.Spreadsheet.WorksheetPanes)">
            <summary>
            Copy constructor.
            </summary>
            <param name="sourcePane">Source pane.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.State">
            <summary>
            Gets or sets the state of the panes.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.XSplit">
            <summary>
            Gets or sets the XSplit value.
            </summary>
            <remarks>
            If the panes are frozen, xSplit represents the number of columns visible in the top right pane. If the panes are not frozen, xSplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.YSplit">
            <summary>
            Gets or sets the XSplit value.
            </summary>
            <remarks>
            If the panes are frozen, ySplit represents the number of rows visible in the top right pane. If the panes are not frozen, ySplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.TopLeftCell">
            <summary>
            Gets or sets the top left visible cell in the bottom right pane. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.ActivePane">
            <summary>
            Gets or sets the active pane.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.WorksheetProtection">
            <summary>
            Protection settings.
            Supported in XLSX only.
            </summary>
            <remarks>
            Properties in this class are simply written to Excel file and have no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.PasswordHash">
            <summary>
            Gets or sets the password hash for protected sheet.
            </summary>
            <remarks>
            This property needs to be set to value of type ushort (property is of type int because ushort is not CLS compliant). 
            For setting password it can be also used <see cref="M:GemBox.Spreadsheet.WorksheetProtection.SetPassword(System.String)"/> method. 
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSelectingLockedCells">
            <summary>
            Gets or sets if selecting locked cells is allowed.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSelectingUnlockedCells">
            <summary>
            Gets or sets if selecting unlocked cells is allowed.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingCells">
            <summary>
            Gets or sets if formatting cells is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingColumns">
            <summary>
            Gets or sets if formatting columns is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingRows">
            <summary>
            Gets or sets if formatting rows is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingColumns">
            <summary>
            Gets or sets if inserting columns is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingRows">
            <summary>
            Gets or sets if inserting rows is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingHyperlinks">
            <summary>
            Gets or sets if inserting hyperlinks is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowDeletingColumns">
            <summary>
            Gets or sets if deleting columns is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowDeletingRows">
            <summary>
            Gets or sets if deleting rows is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSorting">
            <summary>
            Gets or sets if sorting is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowUsingAutoFilter">
            <summary>
            Gets or sets if using autofilter is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowUsingPivotTableReports">
            <summary>
            Gets or sets if using pivot table reports is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowEditingObjects">
            <summary>
            Gets or sets if editing objects is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowEditingScenarios">
            <summary>
            Gets or sets if editing scenarios is allowed.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.WorksheetProtection.SetPassword(System.String)">
            <summary>
            Sets the password for protected sheet.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsLoadOptions">
            <summary>
            Represents options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsLoadOptions.PreserveOptions">
            <summary>
            Gets or sets <see cref="T:GemBox.Spreadsheet.XlsOptions"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsLoadOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsSaveOptions">
            <summary>
            Represents options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsSaveOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to XLS file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: 65536</description></item>
            <item><description>MaxColumns: 256</description></item>
            <item><description>MaxColors: 56</description></item>
            <item><description>MaxCellStyles: 3979</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsSaveOptions.ContentType">
            <summary>
            Gets the content-type for XLS file format: <b>application/vnd.ms-excel</b>.
            </summary>
            <value>
            The content-type for XLS file format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxLoadOptions">
            <summary>
            Represent options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-read-excel/401">Read Excel file in C# and VB.NET</seealso>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-convert-excel-to-pdf/404">Convert Excel files to PDF in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxLoadOptions.PreserveUnsupportedFeatures">
            <summary>
            Gets or sets a value indicating whether to preserve XLSX file format features that are not directly supported through GemBox.Spreadsheet object model.
            </summary>
            <value>
            <see langword="true"/> to preserve XLSX file format features that are not directly supported through GemBox.Spreadsheet object model; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxLoadOptions.Password">
            <summary>
            Gets or sets the password to open protected / encrypted workbook.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-encryption/701">Excel Encryption for XLSX in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsxLoadOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxSaveOptions">
            <summary>
            Represent options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to XLSX (Excel 2007+) file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveXlsx" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveXlsx" />
    </example>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-write-excel/402">Write Excel file in C# and VB.NET</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Type">
            <summary>
            Specifies type of generated file. Set this property only if you want to override default type.
            </summary>        
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Password">
            <summary>
            Gets or sets the password used to protect / encrypt the workbook.
            </summary>
            <seealso href="https://www.gemboxsoftware.com/spreadsheet/examples/c-sharp-vb-net-excel-encryption/701">Excel Encryption for XLSX in C# and VB.NET</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsxSaveOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to XLSX file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: 1048576</description></item>
            <item><description>MaxColumns: 16384</description></item>
            <item><description>MaxColors: 16000000</description></item>
            <item><description>MaxCellStyles: 64000</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.ImageDpi">
            <summary>
      Gets or sets the saved images DPI.
    </summary><value>
      The saved images DPI.
    </value><remarks>
      This property controls the image quality for all images in the file. Larger value results in better-quality images but increases the file size. Setting this property to 0 will disable image optimization. Standard DPI values are:
      <list type="bullet">
        <item>
          <description>330 - Good quality for HD displays</description>
        </item>
        <item>
          <description>220 - Good quality for most printers and displays</description>
        </item>
        <item>
          <description>150 - Good quality for web pages and projectors</description>
        </item>
        <item>
          <description>96 - Good quality for smaller file sizes</description>
        </item>
      </list>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.ContentType">
            <summary>
            Gets the content-type for XLSX file format:
            <list type="bullet">
            <item><description><b>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type"/> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xlsx"/>,</description></item>
            <item><description><b>application/vnd.ms-excel.sheet.macroenabled.12</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type"/> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xlsm"/>,</description></item>
            <item><description><b>application/vnd.openxmlformats-officedocument.spreadsheetml.template</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type"/> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xltx"/>,</description></item>
            <item><description><b>application/vnd.ms-excel.template.macroenabled.12</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type"/> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xltm"/>.</description></item>
            </list>
            </summary>
            <value>
            The content-type for XLSX file format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.CmoObjSubRecord.ID">
            <summary>
            Object's id.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Xls.ImageRecordsFactory">
            <summary>
            Factory class for creation image records
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.ImageRecordsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.ImageRecordsFactory"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.ImageRecordsFactory.CreateContainer(System.IO.BinaryReader,GemBox.Spreadsheet.Xls.MsoType)">
            <summary>
            Creates the mso container from specified mso type and reader.
            </summary>
            <param name="reader">The reader used to create appropriate container.</param>
            <param name="type">The type used to create appropriate container.</param>
            <returns></returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.ImageRecordsFactory.CreateContainer(GemBox.Spreadsheet.Xls.MsoType)">
            <summary>
            Creates the mso container from specified mso type.
            </summary>
            <param name="type">The type used to create appropriate container.</param>		
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.ImageRecordsFactory.CreateFromReader(System.IO.BinaryReader)">
            <summary>
            Creates image record from reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>created image record</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Xls.Records.ExternsheetRecord">
            <summary>
            Externsheet record for holding information REF' structures
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.ExternsheetRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.Spreadsheet.Xls.Records.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.Records.ExternsheetRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary reader to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.ExternsheetRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.Records.ExternsheetRecord"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.MsoBaseRecord.Version">
            <summary>
            Get or sets the version if the record is an atom. 
            If the record is a container, this field has a value of 0xFFFF.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.MsoBaseRecord.Instance">
            <summary>
            Gets or setes the instance. Depending on the instance a record's contents 
            it can have different meanings.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoBaseRecord.ConvertToBytes(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Converts mso structure' representation to bytes.
            </summary>		
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoBaseRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoBaseRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>		
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoBitmapPictureRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoBitmapPictureRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoContainerRecord.Add(GemBox.Spreadsheet.Xls.Records.MsoBaseRecord)">
            <summary>
            Adds the specified item to container.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoContainerRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>		
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoContainerRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtBseRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtBseRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientAnchorRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientAnchorRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientDataRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientDataRecord.ConvertToBytes(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Converts mso structure' representation to bytes.
            </summary>		
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientDataRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientTextBoxRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientTextBoxRecord.ConvertToBytes(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Converts mso structure' representation to bytes.
            </summary>		
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtClientTextBoxRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtDggRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtDggRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtDgRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtDgRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtOptRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtOptRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtSpgrRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtSpgrRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtSpRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsofbtSpRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoPreservedRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.MsoPreservedRecord.SetData(GemBox.Spreadsheet.Xls.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Xls.Records.NameRecord">
            <summary>
            Name record for holding information about name which can be used in named cell\range
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.NameRecord.NameValue">
            <summary>
            Gets or sets the name value.
            </summary>
            <value>The name value.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.NameRecord.SheetIndex">
            <summary>
            Gets or sets the index for the sheet which contain named cell\range.
            </summary>
            <value>The index for the sheet which contain named cell\range.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.NameRecord.Worksheets">
            <summary>
            Gets or sets the workbook\worksheets collection.
            </summary>
            <value>The workbook\worksheets collection.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.NameRecord.Range">
            <summary>
            Gets or sets the range to be associated with the user-defined name.
            </summary>
            <value>The range to be associated with the user-defined name.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.NameRecord.RpnBytes">
            <summary>
            Gets or sets the RPN bytes of formula used for referencing 3d cell or area.
            </summary>
            <value>The RPN bytes of formula used for referencing 3d cell or area.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.NameRecord.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.NameRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.Spreadsheet.Xls.Records.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.Records.NameRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary readed to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.NameRecord.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.Records.NameRecord"/> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.NameRecord.ConvertNameRecordRangeToRpnBytes(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.CellRange,System.String,GemBox.Spreadsheet.ExcelWorksheetCollection)">
            <summary>
            Converts the name record range to RPN bytes.
            </summary>
            <param name="sheet"></param>
            <param name="range">The range to be converted.</param>
            <param name="sheetName">Sheet' name.</param>
            <param name="worksheets">The worksheets collection.</param>		
        </member>
        <member name="T:GemBox.Spreadsheet.Xls.Records.SupBookRecord">
            <summary>
            SupBookRecord record is used to provide information about internal 3d references	
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.Records.SupBookRecord.SheetsCount">
            <summary>
            Gets or sets the sheets count in current workbook.
            </summary>
            <value>The sheets count in current workbook.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.SupBookRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.Spreadsheet.Xls.Records.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.Records.SupBookRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary reader to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.Records.SupBookRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.Records.SupBookRecord"/> class.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Xls.SheetIndexes">
            <summary>
            SheetIndexes structure for storing index to SupBook record
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.SheetIndexes.sheetIndex">
            <summary>
            Index to first/last sheet
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.SheetIndexes.SheetIndex">
            <summary>
            Gets or sets the first/last sheet index.
            </summary>
            <value>The first/last sheet index.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.SheetIndexes.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.SheetIndexes"/> class.
            </summary>		
            <param name="sheetIndex">The first/last sheet index.</param>				
            <param name="supbookIndex">The SupBook index.</param>				
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.SheetIndexes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Xls.SheetIndexes"/> class.
            </summary>
            <param name="br">The binary reader to read from.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.SheetIndexes.Size">
            <summary>
            Gets the size of REF' storage.
            </summary>
            <value>The size of REF' storage.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.SheetIndexes.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the REF' data to the specified binary writer.
            </summary>
            <param name="bw">The destination binary writer.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.UnknownObjSubRecord.Read(System.Byte[])">
            <summary>
            Reads bye array.
            </summary>
            <param name="buffer">Array to Read.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.UnknownObjSubRecord.ConvertToBytes">
            <summary>
            Returns binary representation of the subrecord.
            </summary>
            <returns>Binary representation of the subrecord.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Xls.Word32">
            <summary>
            Represents a natural unit of data used by a 32-bit processors.
            </summary>
            <remarks>
            <para>The order of the bytes/bits is little-endian.</para>
            <para>Bit at index 0 is right-most bit.</para>
            <para>Bit at index 31 is left-most bit.</para>
            <para>Bit length goes from right to left.</para>
            <para>XLS format uses little-endian.</para>
            <para>XLS specification uses big-endian bit diagrams.</para>
            </remarks>
            <seealso href="http://en.wikipedia.org/wiki/Word_%28computer_architecture%29">Word (computer architecture)</seealso>
            <seealso href="http://msdn.microsoft.com/en-us/library/dd909612.aspx">1.3.1 stream Byte Ordering</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.ShowFormulas">
            <summary>
            If set, MS Excel shows formulas. Otherwise, formula results are shown.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.ShowGridLines">
            <summary>
            If set, MS Excel shows grid lines.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.ShowSheetHeaders">
            <summary>
            If set, MS Excel shows row and column headers.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.FrozenPanes">
            <summary>
            If set, panes are frozen in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.ShowZeroValues">
            <summary>
            If set, MS Excel shows zero values. Otherwise, zero values are shown as empty cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.DefaultGridLineColor">
            <summary>
            If set, MS Excel uses default grid line color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.ColumnsFromRightToLeft">
            <summary>
            If set, MS Excel shows columns from right to left.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.ShowOutlineSymbols">
            <summary>
            If set, MS Excel shows outline symbols.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.FrozenNoSplit">
            <summary>
            If set, MS Excel removes splits if pane freeze is removed.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.SheetSelected">
            <summary>
            Set if sheet is selected in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.SheetVisible">
            <summary>
            Set if sheet is visible in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Xls.WorksheetWindowOptions.ShowInPageBreakPreview">
            <summary>
            If set, MS Excel shows worksheet in page break preview. Otherwise, normal view is used.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Xls.XLSFileWriter.HasShapes">
            <summary>
            Gets a value indicating whether this instance has shapes.
            </summary>
            <value>
            	<see langword="true"/> if this instance has shapes; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Xls.XLSFileWriter.WriteMSODrawingIfNeeded(GemBox.Spreadsheet.Xls.AbsXLSRecords)">
            <summary>
            Writes the MSO drawing if needed.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Buffer">
            <summary>
            Buffer class is used as the wrapper aroung input string for FormulaParser providing
            additional helpful methods for accessing string buffer.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Buffer.Empty">
            <summary>
            Unique char to identify that char is empty
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Buffer.EmptyInteger">
            <summary>
            Unique integer to identify that integer is null
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.Buffer.Data">
            <summary>
            Gets the input data string buffer.
            </summary>
            <value>The input data string buffer.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.Buffer.Pos">
            <summary>
            Gets the position of input data string buffer.
            </summary>
            <value>The position of input data string buffer.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.Buffer.IsEOF">
            <summary>
            Gets a value indicating whether we have reached end of input buffer.
            </summary>
            <value><c>true</c> if we have reached end of input buffer; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Buffer"/> class.
            </summary>
            <param name="data">The string data to wrap.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.SkipWhitespaces">
            <summary>
            Skips the whitespaces.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.GetNextOnDemand(System.Char,System.Boolean)">
            <summary>
            Gets the next on demand( if next symbol is peek, than read it and return back ).
            Additionally it can skip whitespaces on demand.
            </summary>
            <param name="peek">The char to peek for.</param>
            <param name="skipWhitespaces">if set to <c>true</c> [skip whitespaces].</param>
            <returns>
            read char or special char indicating no read status
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.GetNext">
            <summary>
            Gets the next char from buffer.
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.Peek">
            <summary>
            Peeks for the next char.
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.Peek(System.Int32)">
            <summary>
            Peeks for the next char at specified forward-position
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.GetNextString(System.Char)">
            <summary>
            Gets the next string from buffer.
            </summary>
            <param name="endChar">The char used as end mark during reading.</param>
            <returns>read string</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.GetNextString(System.Char[])">
            <summary>
            Gets the next string from buffer.
            </summary>
            <param name="endChars">The arrag of chars used as end marks during reading.</param>
            <returns>read string</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Buffer.GetNextString(System.Boolean)">
            <summary>
            Gets the next string from buffer with optional skipping whitespaces.
            </summary>		
            <returns>read string</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo">
            <summary>
            Hold information about function( name, code, expected arguments count. )
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.VariableArgumentAmountMark">
            <summary>
            Is used to the specify for appropriate functins the variable count of arguments
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.argumentsCount">
            <summary>
            Arguments count value, by default it is initilized with not fixed( variable ) argument count mark.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.ReturnCode">
            <summary>
            Gets the return code.
            </summary>
            <value>The return code.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.Code">
            <summary>
            Gets function code.
            </summary>
            <value>The function code.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.ArgumentsCount">
            <summary>
            Arguments count value, by default it is initilized with not fixed( variable ) argument count mark.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.Name">
            <summary>
            Gets function name.
            </summary>
            <value>Function name.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.IsFixedArgumentCount">
            <summary>
            Gets a value indicating whether function has fixed argument count.
            </summary>
            <value>
            	<c>true</c> if this function has fixed argument count; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.#ctor(System.UInt16,System.String,GemBox.Spreadsheet.Formulas.FormulaTokenCode,GemBox.Spreadsheet.Formulas.FormulaTokenClass)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo"/> class.
            </summary>
            <param name="code">The function code.</param>
            <param name="name">The function name.</param>
            <param name="argumentCode">The argument code.</param>
            <param name="returnCode">The return code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo.#ctor(System.UInt16,System.String,GemBox.Spreadsheet.Formulas.FormulaTokenCode,GemBox.Spreadsheet.Formulas.FormulaTokenClass,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo"/> class.
            </summary>
            <param name="code">The function code.</param>
            <param name="name">The function name.</param>
            <param name="argumentCode">The argument code.</param>
            <param name="returnCode">The return code.</param>
            <param name="argumentsCount">The function's arguments count.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.FormulaFunctionsTable">
            <summary>
            Hold information about all supported functions.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionsTable.Instance">
            <summary>
            Gets the static FormulaFunctionsTable instance. Used to be shared between FormulaFunctionsTable' users.
            </summary>
            <value>The singleton FormulaFunctionTable instance.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionsTable.Item(System.UInt16)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo"/> at the specified index.
            </summary>
            <value><see cref="T:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo"/> instance</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaFunctionsTable.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo"/> at the specified index.
            </summary>
            <value><see cref="T:GemBox.Spreadsheet.Formulas.FormulaFunctionInfo"/> instance</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaFunctionsTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaFunctionsTable"/> class.
            Constructor is private to allow only creation of FormulaFunctionsTable instances only once.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaFunctionsTable.IsFunction(System.String)">
            <summary>
            Determines whether the specified name is function.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the specified name is function; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.FormulaParser.boolList">
            <summary>
            List of allowed values for boolean primitive type
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaParser.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaParser"/> class.
            </summary>
            <param name="sheet">The excel worksheet.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaParser.Parse(System.String)">
            <summary>
            Parses the specified string formula.
            </summary>
            <param name="formula">The string formula.</param>
            <returns>formula token array</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaParser.AddToken(GemBox.Spreadsheet.Formulas.Tokens.FormulaToken)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="token">The token to be added.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaParser.AddToken(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaParser.AddToken(GemBox.Spreadsheet.Formulas.FormulaTokenCode,System.Object)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
            <param name="data">The data to be used as the input for formula token delay initialization.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaParser.AddToken(GemBox.Spreadsheet.Formulas.FormulaTokenCode,System.Object[])">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
            <param name="data">The array of data to be used as the input for formula token delay initialization.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.FormulaTokenClass">
            <summary>
            The set of predefined formula token classes
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.FormulaTokenCode">
            <summary>
            The set of predefined formula token codes
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaTokensFactory.CreateFrom(GemBox.Spreadsheet.ExcelWorksheet,System.Byte[],System.Int32)">
            <summary>
            Creates formula token from rpn bytes and the code read from that bytes.
            </summary>
            <param name="sheet"></param>
            <param name="rpnBytes">The RPN bytes.</param>
            <param name="startIndex">The start index to read code from the RPN bytes.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaTokensFactory.CreateFunctionFromName(System.String,GemBox.Spreadsheet.Formulas.FormulaTokenClass,System.Byte)">
            <summary>
            Creates formula token form the name of the function.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="tokenClass">The token class.</param>
            <param name="argumentsCount">The arguments count for the function.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaTokensFactory.CreateFromCode(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Creates formula token from code.
            </summary>
            <param name="sheet"></param>
            <param name="tokenCode">The token code.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaTokensFactory.CreateFromCode(GemBox.Spreadsheet.ExcelWorksheet,System.Byte)">
            <summary>
            Creates formula token from byte code.
            </summary>
            <param name="sheet"></param>
            <param name="code">The byte code.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaTokensFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaTokensFactory"/> class.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.FormulaTokenType">
            <summary>
            The set of predefined formula token types
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx">
            <summary>
            It is wrapper arodung FormulaTokenType enum to provide high-level bool methods
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx.Type">
            <summary>
            Gets the formula token type.
            </summary>
            <value>The formula token type.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx.IsBinary">
            <summary>
            Gets a value indicating whether this instance is binary.
            </summary>
            <value><c>true</c> if this instance is binary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx.IsUnary">
            <summary>
            Gets a value indicating whether this instance is unary.
            </summary>
            <value><c>true</c> if this instance is unary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx.IsOperand">
            <summary>
            Gets a value indicating whether this instance is operand.
            </summary>
            <value>
            	<c>true</c> if this instance is operand; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx.IsFunction">
            <summary>
            Gets a value indicating whether this instance is function.
            </summary>
            <value>
            	<c>true</c> if this instance is function; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx.IsControl">
            <summary>
            Gets a value indicating whether this instance is control.
            </summary>
            <value>
            	<c>true</c> if this instance is control; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.FormulaTokenTypeEx"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.NumbersParser">
            <summary>
            Class used for controling number format
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.NumbersParser.formatProvider">
            <summary>
            Number format for string conversion
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.NumbersParser.Provider">
            <summary>
            Get number format info instance
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.NumbersParser.#cctor">
            <summary>
            Initialize object
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.NumbersParser.IsUshort(System.Double)">
            <summary>
            Determines whether the specified double value is ushort( integer ).
            </summary>
            <param name="doubleValue">The double value.</param>
            <returns>
            	<c>true</c> if the specified double value is ushort; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.NumbersParser.StrToFloat(System.String)">
            <summary>
            Converts string to float.
            </summary>
            <param name="str">strind data.</param>
            <returns>flot data.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.NumbersParser.StrToInt(System.String)">
            <summary>
            Converts string to int.
            </summary>
            <param name="data">string data.</param>
            <returns>int data.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.NumbersParser.StrToDouble(System.String)">
            <summary>
            Convert string to double.
            </summary>
            <param name="data">string data.</param>
            <returns>double data.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken">
            <summary>
            Formula token for holding 3d reference on internal cell range.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.IsCellRange3DRegex">
            <summary>
            Regular expression used to determinate whether the input string is 3d cell range( 1t case ) or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.refIndex">
            <summary>
            REF entry' index on EXTERNSHEET record( see the Link Table ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode,GemBox.Spreadsheet.ExcelWorksheetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
            <param name="workbook">The workbook.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.IsArea3dToken(System.Byte)">
            <summary>
            Determines whether is the specified code related to area3d token.
            </summary>
            <param name="code">The code to be checked.</param>
            <returns>
            	<c>true</c> if the specified code related to area3d token; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Area3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.AreaErr3dFormulaToken">
            <summary>
            Formula token for holding 3d reference error.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaErr3dFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.AreaErr3dFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaErr3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken">
            <summary>
            Formula token for holding reference on cell range.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.regexOptions">
            <summary>
            Regular expression default settings
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.IsCellRangeRegex">
            <summary>
            Regula expression used to determinate whether the input string is cell range( area ) or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.firstRow">
            <summary>
            first row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.FirstRow">
            <summary>
            Gets the first row.
            </summary>
            <value>The first row.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.AreaNFormulaToken.firstRow">
            <summary>
            first row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.Tokens.AreaNFormulaToken.FirstRow">
            <summary>
            Gets the first row.
            </summary>
            <value>The first row.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaNFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.AreaNFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaNFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaNFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.AreaNFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.ArrayFormulaToken">
            <summary>
            Formula token for holding array.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ArrayFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.ArrayFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ArrayFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ArrayFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ArrayFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.BinaryOperatorFormulaToken">
            <summary>
            Formula token for holding binary operator.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BinaryOperatorFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.BinaryOperatorFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BinaryOperatorFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.BinaryOperatorFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BinaryOperatorFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.BoolFormulaToken">
            <summary>
            Formula token for holding bool.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BoolFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.BoolFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BoolFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BoolFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BoolFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.BoolFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.ControlFormulaToken">
            <summary>
            Formula token for holding control value.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ControlFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.ControlFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ControlFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ControlFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken">
            <summary>
            Formula token for holding error value.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.ErrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken">
            <summary>
            Base formula token class for inheritance
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken.Token">
            <summary>
            Gets the formula token code.
            </summary>
            <value>The formula token code.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="P:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken.Size">
            <summary>
            Gets the size of the formula token.
            </summary>
            <value>The size of the formula token.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to bytes representation.
            </summary>
            <returns>bytes representation of the formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.FunctionFormulaToken">
            <summary>
            Formula token for holding function.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.FunctionFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.FunctionVarFormulaToken">
            <summary>
            Formula token for holding function with variable arguments count.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionVarFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.FunctionVarFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionVarFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionVarFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionVarFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.FunctionVarFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.IntFormulaToken">
            <summary>
            Formula token for holding integer.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.IntFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.IntFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.IntFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.IntFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.IntFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to bytes representation.
            </summary>
            <returns>bytes representation of the formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.IntFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.MissArgFormulaToken">
            <summary>
            Formula token for holding missed argument( argument with no value ) in argument list of function.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.MissArgFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.MissArgFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.MissArgFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.NameFormulaToken">
            <summary>
            Formula token for holding the index to a NAME/EXTERNNAME record.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NameFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NameFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NameFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NameFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.NumFormulaToken">
            <summary>
            Formula token for holding integer.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NumFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.NumFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NumFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NumFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NumFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.NumFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken">
            <summary>
            Formula token for holding 3d reference on internal cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.IsCell3DRegex">
            <summary>
            Regular expression used to determinate whether the input string is 3d cell or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.refIndex">
            <summary>
            REF entry' index on EXTERNSHEET record( see the Link Table ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.#ctor(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken"/> class.
            </summary>
            <param name="sheet"></param>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.IsRef3dToken(System.Byte)">
            <summary>
            Determines whether is the specified code related to ref3d token.
            </summary>
            <param name="code">The code to be checked.</param>
            <returns>
            	<c>true</c> if the specified code related to ref3d token; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.Ref3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.RefErr3dFormulaToken">
            <summary>
            Formula token for holding 3d reference error on internal cell range.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefErr3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.RefErrFormulaToken">
            <summary>
            Formula token for holding reference error.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefErrFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.RefErrFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefErrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken">
            <summary>
            Formula token for holding reference.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.IsColumnRegex">
            <summary>
            Regular expression used to determinate whether the input string is column or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.IsCellRegex">
            <summary>
            Regular expression used to determinate whether the input string is cell or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.AbsoluteCellMark">
            <summary>
            Absolute preffix row\height symbol
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.ColumnBitMask">
            <summary>
            Bit mask for column options.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.RowBitMask">
            <summary>
            Bit mask for row options.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefNFormulaToken.ColumnBitMask">
            <summary>
            Bit mask for column options.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Formulas.Tokens.RefNFormulaToken.RowBitMask">
            <summary>
            Bit mask for row options.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefNFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.RefNFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefNFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefNFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.RefNFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.StrFormulaToken">
            <summary>
            Formula token for holding string.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.StrFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.StrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.StrFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.StrFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.StrFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.StrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Formulas.Tokens.UnaryOperatorFormulaToken">
            <summary>
            Formula token for holding unary operator.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.UnaryOperatorFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.UnaryOperatorFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.UnaryOperatorFormulaToken.#ctor(GemBox.Spreadsheet.Formulas.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Formulas.Tokens.UnaryOperatorFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Formulas.Tokens.UnaryOperatorFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsOptions">
            <summary>
            Options specified when reading XLS files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.None">
            <summary>
            Do not preserve records. Only records fully supported by GemBox.Spreadsheet API will be loaded.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveGlobalRecords">
            <summary>
            Preserve global (workbook) records.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveWorksheetRecords">
            <summary>
            Preserve worksheet records.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveSummaries">
            <summary>
            Preserve summaries.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveMacros">
            <summary>
            Preserve macros and VBA code.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveAll">
            <summary>
            Preserve all possible information.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsUtilities">
            <summary>
            Used as wrapper to XLS-related classes.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.XpsSaveOptions">
            <summary>
            Represents options for saving to XML Paper Specification file format.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to XPS file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveXps" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveXps" />
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.XpsSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to XPS file format.
      </para>
      <code language="c#" source="Examples\CSharp\Samples.cs" region="SaveXps" />
      <code language="vb" source="Examples\Vb\Samples.vb" region="SaveXps" />
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.XpsSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XpsSaveOptions"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> is 1.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XpsSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to XPS file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XpsSaveOptions.ContentType">
            <summary>
            Gets the content-type for XPS file format: <b>application/vnd.ms-xpsdocument</b>.
            </summary>
            <value>
            The content-type for XPS file format.
            </value>
        </member>
        <member name="M:GemBox.Spreadsheet.XpsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BitWriter.RemainingBits">
            <summary>
              Delivers the remaining bits, left-aligned, in a byte.
            </summary>
            <remarks>
              <para>
                This is valid only if NumRemainingBits is less than 8;
                in other words it is valid only after a call to Flush().
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.Reset">
            <summary>
              Reset the BitWriter.
            </summary>
            <remarks>
              <para>
                This is useful when the BitWriter writes into a MemoryStream, and
                is used by a BZip2Compressor, which itself is re-used for multiple
                distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.WriteBits(System.Int32,System.UInt32)">
            <summary>
              Write some number of bits from the given value, into the output.
            </summary>
            <remarks>
              <para>
                The nbits value should be a max of 25, for safety. For performance
                reasons, this method does not check!
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.WriteByte(System.Byte)">
            <summary>
              Write a full 8-bit byte into the output.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.WriteInt(System.UInt32)">
            <summary>
              Write four 8-bit bytes into the output.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.Flush">
            <summary>
              Write all available byte-aligned bytes.
            </summary>
            <remarks>
              <para>
                This method writes no new output, but flushes any accumulated
                bits. At completion, the accumulator may contain up to 7
                bits.
              </para>
              <para>
                This is necessary when re-assembling output from N independent
                compressors, one for each of N blocks. The output of any
                particular compressor will in general have some fragment of a byte
                remaining. This fragment needs to be accumulated into the
                parent BZip2OutputStream.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.FinishAndPad">
            <summary>
              Writes all available bytes, and emits padding for the final byte as
              necessary. This must be the last method invoked on an instance of
              BitWriter.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.BZip2.BZip2Compressor.increments">
            Knuth's increments seem to work better than Incerpi-Sedgewick here.
            Possibly because the number of elems to sort is usually small, typically
            &lt;= 20.
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.#ctor(External.Zip.Internal.BZip2.BitWriter)">
            <summary>
              BZip2Compressor writes its compressed data out via a BitWriter. This
              is necessary because BZip2 does byte shredding.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2Compressor.UncompressedBytes">
            <summary>
              The number of uncompressed bytes being held in the buffer.
            </summary>
            <remarks>
              <para>
                I am thinking this may be useful in a Stream that uses this
                compressor class. In the Close() method on the stream it could
                check this value to see if anything has been written at all.  You
                may think the stream could easily track the number of bytes it
                wrote, which would eliminate the need for this. But, there is the
                case where the stream writes a complete block, and it is full, and
                then writes no more. In that case the stream may want to check.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.Fill(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Accept new bytes into the compressor data buffer
            </summary>
            <remarks>
              <para>
                This method does the first-level (cheap) run-length encoding, and
                stores the encoded data into the rle block.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.write0(System.Byte)">
             <summary>
               Process one input byte into the block.
             </summary>
            
             <remarks>
               <para>
                 To "process" the byte means to do the run-length encoding.
                 There are 3 possible return values:
            
                    0 - the byte was not written, in other words, not
                        encoded into the block. This happens when the
                        byte b would require the start of a new run, and
                        the block has no more room for new runs.
            
                    1 - the byte was written, and the block is not full.
            
                    2 - the byte was written, and the block is full.
            
               </para>
             </remarks>
             <returns>0 if the byte was not written, non-zero if written.</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.AddRunToOutputBlock(System.Boolean)">
             <summary>
               Append one run to the output block.
             </summary>
            
             <remarks>
               <para>
                 This compressor does run-length-encoding before BWT and etc. This
                 method simply appends a run to the output block. The append always
                 succeeds. The return value indicates whether the block is full:
                 false (not full) implies that at least one additional run could be
                 processed.
               </para>
             </remarks>
             <returns>true if the block is now full; otherwise false.</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.CompressAndWrite">
            <summary>
              Compress the data that has been placed (Run-length-encoded) into the
              block. The compressed data goes into the CompressedBytes array.
            </summary>
            <remarks>
              <para>
                Side effects: 1.  fills the CompressedBytes array.  2. sets the
                AvailableBytesOut property.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.mainSimpleSort(External.Zip.Internal.BZip2.BZip2Compressor.CompressionState,System.Int32,System.Int32,System.Int32)">
             This is the most hammered method of this class.
            
             <p>
             This is the version using unrolled loops.
             </p>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.mainQSort3(External.Zip.Internal.BZip2.BZip2Compressor.CompressionState,System.Int32,System.Int32,System.Int32)">
            Method "mainQSort3", file "blocksort.c", BZip2 1.0.2
        </member>
        <member name="F:External.Zip.Internal.BZip2.BZip2Compressor.CompressionState.quadrant">
            Array instance identical to sfmap, both are used only
            temporarily and independently, so we do not need to allocate
            additional memory.
        </member>
        <member name="T:External.Zip.Internal.BZip2.BZip2InputStream">
            <summary>
              A read-only decorator stream that performs BZip2 decompression on Read.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.BZip2.BZip2InputStream.CState">
            <summary>
              Compressor State
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
              Create a BZip2InputStream, wrapping it around the given input Stream.
            </summary>
            <remarks>
              <para>
                The input stream will be closed when the BZip2InputStream is closed.
              </para>
            </remarks>
            <param name='input'>The stream from which to read compressed data</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a BZip2InputStream with the given stream, and
               specifying whether to leave the wrapped stream open when
               the BZip2InputStream is closed.
             </summary>
             <param name='input'>The stream from which to read compressed data</param>
             <param name='leaveOpen'>
               Whether to leave the input stream open, when the BZip2InputStream closes.
             </param>
            
             <example>
            
               This example reads a bzip2-compressed file, decompresses it,
               and writes the decompressed data into a newly created file.
            
               <code>
               var fname = "logfile.log.bz2";
               using (var fs = File.OpenRead(fname))
               {
                   using (var decompressor = new Ionic.BZip2.BZip2InputStream(fs))
                   {
                       var outFname = fname + ".decompressed";
                       using (var output = File.Create(outFname))
                       {
                           byte[] buffer = new byte[2048];
                           int n;
                           while ((n = decompressor.Read(buffer, 0, buffer.Length)) > 0)
                           {
                               output.Write(buffer, 0, n);
                           }
                       }
                   }
               }
               </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read data from the stream.
             </summary>
            
             <remarks>
               <para>
                 To decompress a BZip2 data stream, create a <c>BZip2InputStream</c>,
                 providing a stream that reads compressed data.  Then call Read() on
                 that <c>BZip2InputStream</c>, and the data read will be decompressed
                 as you read.
               </para>
            
               <para>
                 A <c>BZip2InputStream</c> can be used only for <c>Read()</c>, not for <c>Write()</c>.
               </para>
             </remarks>
            
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.ReadByte">
            <summary>
              Read a single byte from the stream.
            </summary>
            <returns>the byte read from the stream, or -1 if EOF</returns>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the
               total number of uncompressed bytes read in.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name='buffer'>this parameter is never used</param>
            <param name='offset'>this parameter is never used</param>
            <param name='count'>this parameter is never used</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Close">
            <summary>
              Close the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.GetBits(System.Int32)">
            <summary>
              Read n bits from input, right justifying the result.
            </summary>
            <remarks>
              <para>
                For example, if you read 1 bit, the result is either 0
                or 1.
              </para>
            </remarks>
            <param name ="n">
              The number of bits to read, always between 1 and 32.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.hbCreateDecodeTables(System.Int32[],System.Int32[],System.Int32[],System.Char[],System.Int32,System.Int32,System.Int32)">
            Called by createHuffmanDecodingTables() exclusively.
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.createHuffmanDecodingTables(System.Int32,System.Int32)">
            Called by recvDecodingTables() exclusively.
        </member>
        <member name="F:External.Zip.Internal.BZip2.BZip2InputStream.DecompressionState.unzftab">
            Freq table collected to save a pass over the data during
            decompression.
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.DecompressionState.initTT(System.Int32)">
             Initializes the tt array.
            
             This method is called when the required length of the array is known.
             I don't initialize it at construction time to avoid unneccessary
             memory allocation when compressing small files.
        </member>
        <member name="T:External.Zip.Internal.BZip2.BZip2OutputStream">
            <summary>
              A write-only decorator stream that compresses data as it is
              written using the BZip2 algorithm.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
             <summary>
               Constructs a new <c>BZip2OutputStream</c>, that sends its
               compressed output to the given output stream.
             </summary>
            
             <param name='output'>
               The destination stream, to which compressed output will be sent.
             </param>
            
             <example>
            
               This example reads a file, then compresses it with bzip2 file,
               and writes the compressed data into a newly created file.
            
               <code>
               var fname = "logfile.log";
               using (var fs = File.OpenRead(fname))
               {
                   var outFname = fname + ".bz2";
                   using (var output = File.Create(outFname))
                   {
                       using (var compressor = new Ionic.BZip2.BZip2OutputStream(output))
                       {
                           byte[] buffer = new byte[2048];
                           int n;
                           while ((n = fs.Read(buffer, 0, buffer.Length)) > 0)
                           {
                               compressor.Write(buffer, 0, n);
                           }
                       }
                   }
               }
               </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
              Constructs a new <c>BZip2OutputStream</c> with specified blocksize.
            </summary>
            <param name = "output">the destination stream.</param>
            <param name = "blockSize">
              The blockSize in units of 100000 bytes.
              The valid range is 1..9.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              Constructs a new <c>BZip2OutputStream</c>.
            </summary>
              <param name = "output">the destination stream.</param>
            <param name = "leaveOpen">
              whether to leave the captive stream open upon closing this stream.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
             <summary>
               Constructs a new <c>BZip2OutputStream</c> with specified blocksize,
               and explicitly specifies whether to leave the wrapped stream open.
             </summary>
            
             <param name = "output">the destination stream.</param>
             <param name = "blockSize">
               The blockSize in units of 100000 bytes.
               The valid range is 1..9.
             </param>
             <param name = "leaveOpen">
               whether to leave the captive stream open upon closing this stream.
             </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Close">
            <summary>
              Close the stream.
            </summary>
            <remarks>
              <para>
                This may or may not close the underlying stream.  Check the
                constructors that accept a bool value.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Flush">
            <summary>
              Flush the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.BlockSize">
            <summary>
              The blocksize parameter specified at construction time.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               Use the <c>BZip2OutputStream</c> to compress data while writing:
               create a <c>BZip2OutputStream</c> with a writable output stream.
               Then call <c>Write()</c> on that <c>BZip2OutputStream</c>, providing
               uncompressed data as input.  The data sent to the output stream will
               be the compressed form of the input data.
             </para>
            
             <para>
               A <c>BZip2OutputStream</c> can be used only for <c>Write()</c> not for <c>Read()</c>.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value is always false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value should always be true, unless and until the
            object is disposed and closed.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the
               total number of uncompressed bytes written through.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name='buffer'>this parameter is never used</param>
            <param name='offset'>this parameter is never used</param>
            <param name='count'>this parameter is never used</param>
            <returns>never returns anything; always throws</returns>
        </member>
        <member name="T:External.Zip.Internal.BZip2.ParallelBZip2OutputStream">
             <summary>
               A write-only decorator stream that compresses data as it is
               written using the BZip2 algorithm. This stream compresses by
               block using multiple threads.
             </summary>
             <para>
               This class performs BZIP2 compression through writing.  For
               more information on the BZIP2 algorithm, see
               <see href="http://en.wikipedia.org/wiki/BZIP2"/>.
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.BZip2.BZip2OutputStream"/>,
               except that this implementation uses an approach that employs multiple
               worker threads to perform the compression.  On a multi-cpu or multi-core
               computer, the performance of this class can be significantly higher than
               the single-threaded BZip2OutputStream, particularly for larger streams.
               How large?  Anything over 10mb is a good candidate for parallel
               compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla <c>BZip2OutputStream</c>. Also, for small files, the
               <c>ParallelBZip2OutputStream</c> can be much slower than the vanilla
               <c>BZip2OutputStream</c>, because of the overhead associated to using the
               thread pool.
             </para>
            
             <seealso cref="T:External.Zip.Internal.BZip2.BZip2OutputStream" />
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream)">
             <summary>
               Constructs a new <c>ParallelBZip2OutputStream</c>, that sends its
               compressed output to the given output stream.
             </summary>
            
             <param name='output'>
               The destination stream, to which compressed output will be sent.
             </param>
            
             <example>
            
               This example reads a file, then compresses it with bzip2 file,
               and writes the compressed data into a newly created file.
            
               <code>
               var fname = "logfile.log";
               using (var fs = File.OpenRead(fname))
               {
                   var outFname = fname + ".bz2";
                   using (var output = File.Create(outFname))
                   {
                       using (var compressor = new Ionic.BZip2.ParallelBZip2OutputStream(output))
                       {
                           byte[] buffer = new byte[2048];
                           int n;
                           while ((n = fs.Read(buffer, 0, buffer.Length)) > 0)
                           {
                               compressor.Write(buffer, 0, n);
                           }
                       }
                   }
               }
               </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
              Constructs a new <c>ParallelBZip2OutputStream</c> with specified blocksize.
            </summary>
            <param name = "output">the destination stream.</param>
            <param name = "blockSize">
              The blockSize in units of 100000 bytes.
              The valid range is 1..9.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              Constructs a new <c>ParallelBZip2OutputStream</c>.
            </summary>
              <param name = "output">the destination stream.</param>
            <param name = "leaveOpen">
              whether to leave the captive stream open upon closing this stream.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
             <summary>
               Constructs a new <c>ParallelBZip2OutputStream</c> with specified blocksize,
               and explicitly specifies whether to leave the wrapped stream open.
             </summary>
            
             <param name = "output">the destination stream.</param>
             <param name = "blockSize">
               The blockSize in units of 100000 bytes.
               The valid range is 1..9.
             </param>
             <param name = "leaveOpen">
               whether to leave the captive stream open upon closing this stream.
             </param>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.MaxWorkers">
             <summary>
               The maximum number of concurrent compression worker threads to use.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of concurrent worker
               threads to employ for compression. The implementation of this stream
               employs multiple threads from the .NET thread pool, via <see
               cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see>, to compress the incoming data by
               block.  As each block of data is compressed, this stream re-orders the
               compressed blocks and writes them to the output stream.
             </para>
            
             <para>
               A higher number of workers enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               By default, DotNetZip allocates 4 workers per CPU core, subject to the
               upper limit specified in this property. For example, suppose the
               application sets this property to 16.  Then, on a machine with 2
               cores, DotNetZip will use 8 workers; that number does not exceed the
               upper limit specified by this property, so the actual number of
               workers used will be 4 * 2 = 8.  On a machine with 4 cores, DotNetZip
               will use 16 workers; again, the limit does not apply. On a machine
               with 8 cores, DotNetZip will use 16 workers, because of the limit.
             </para>
            
             <para>
               For each compression "worker thread" that occurs in parallel, there is
               up to 2mb of memory allocated, for buffering and processing. The
               actual number depends on the <see cref="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.BlockSize"/> property.
             </para>
            
             <para>
               CPU utilization will also go up with additional workers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Close">
            <summary>
              Close the stream.
            </summary>
            <remarks>
              <para>
                This may or may not close the underlying stream.  Check the
                constructors that accept a bool value.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Flush">
            <summary>
              Flush the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.BlockSize">
            <summary>
              The blocksize parameter specified at construction time.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               Use the <c>ParallelBZip2OutputStream</c> to compress data while
               writing: create a <c>ParallelBZip2OutputStream</c> with a writable
               output stream.  Then call <c>Write()</c> on that
               <c>ParallelBZip2OutputStream</c>, providing uncompressed data as
               input.  The data sent to the output stream will be the compressed
               form of the input data.
             </para>
            
             <para>
               A <c>ParallelBZip2OutputStream</c> can be used only for
               <c>Write()</c> not for <c>Read()</c>.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value is always false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the
               total number of uncompressed bytes written through.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.BytesWrittenOut">
            <summary>
            The total number of bytes written out by the stream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name='buffer'>this parameter is never used</param>
            <param name='offset'>this parameter is never used</param>
            <param name='count'>this parameter is never used</param>
            <returns>never returns anything; always throws</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.Rand.Rnums(System.Int32)">
            <summary>
              Returns the "random" number at a specific index.
            </summary>
            <param name='i'>the index</param>
            <returns>the random number</returns>
        </member>
        <member name="T:External.Zip.Internal.ComHelper">
            <summary>
            This class exposes a set of COM-accessible wrappers for static
            methods available on the ZipFile class.  You don't need this
            class unless you are using DotNetZip from a COM environment.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.IsZipFile(System.String)">
            <summary>
             A wrapper for <see cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String)">ZipFile.IsZipFile(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.IsZipFileWithExtract(System.String)">
            <summary>
             A wrapper for <see cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)">ZipFile.IsZipFile(string, bool)</see>
            </summary>
            <remarks>
            We cannot use "overloaded" Method names in COM interop.
            So, here, we use a unique name.
            </remarks>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.CheckZip(System.String)">
             <summary>
              A wrapper for <see cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String)">ZipFile.CheckZip(string)</see>
             </summary>
             <param name="filename">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.CheckZipPassword(System.String,System.String)">
             <summary>
              A COM-friendly wrapper for the static method <see cref="M:External.Zip.Internal.ZipFile.CheckZipPassword(System.String,System.String)"/>.
             </summary>
            
             <param name="filename">The filename to of the zip file to check.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.FixZipDirectory(System.String)">
            <summary>
             A wrapper for <see cref="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)">ZipFile.FixZipDirectory(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to fix.</param>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.GetZipLibraryVersion">
            <summary>
             A wrapper for <see cref="P:External.Zip.Internal.ZipFile.LibraryVersion">ZipFile.LibraryVersion</see>
            </summary>
            <returns>
             the version number on the DotNetZip assembly, formatted as a string.
            </returns>
        </member>
        <member name="T:External.Zip.Internal.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,External.Zip.Internal.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:External.Zip.Internal.Crc.CrcCalculatorStream.Close"/>.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.EncryptionAlgorithm">
             <summary>
             An enum that provides the various encryption algorithms supported by this
             library.
             </summary>
            
             <remarks>
            
             <para>
               <c>PkzipWeak</c> implies the use of Zip 2.0 encryption, which is known to be
               weak and subvertible.
             </para>
            
             <para>
               A note on interoperability: Values of <c>PkzipWeak</c> and <c>None</c> are
               specified in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's zip
               specification</see>, and are considered to be "standard".  Zip archives
               produced using these options will be interoperable with many other zip tools
               and libraries, including Windows Explorer.
             </para>
            
             <para>
               Values of <c>WinZipAes128</c> and <c>WinZipAes256</c> are not part of the Zip
               specification, but rather imply the use of a vendor-specific extension from
               WinZip. If you want to produce interoperable Zip archives, do not use these
               values.  For example, if you produce a zip archive using WinZipAes256, you
               will be able to open it in Windows Explorer on Windows XP and Vista, but you
               will not be able to extract entries; trying this will lead to an "unspecified
               error". For this reason, some people have said that a zip archive that uses
               WinZip's AES encryption is not actually a zip archive at all.  A zip archive
               produced this way will be readable with the WinZip tool (Version 11 and
               beyond).
             </para>
            
             <para>
               There are other third-party tools and libraries, both commercial and
               otherwise, that support WinZip's AES encryption. These will be able to read
               AES-encrypted zip archives produced by DotNetZip, and conversely applications
               that use DotNetZip to read zip archives will be able to read AES-encrypted
               archives produced by those tools or libraries.  Consult the documentation for
               those other tools and libraries to find out if WinZip's AES encryption is
               supported.
             </para>
            
             <para>
               In case you care: According to <see
               href="http://www.winzip.com/aes_info.htm">the WinZip specification</see>, the
               actual AES key used is derived from the <see cref="P:External.Zip.Internal.ZipEntry.Password"/> via an
               algorithm that complies with <see
               href="http://www.ietf.org/rfc/rfc2898.txt">RFC 2898</see>, using an iteration
               count of 1000.  The algorithm is sometimes referred to as PBKDF2, which stands
               for "Password Based Key Derivation Function #2".
             </para>
            
             <para>
               A word about password strength and length: The AES encryption technology is
               very good, but any system is only as secure as the weakest link.  If you want
               to secure your data, be sure to use a password that is hard to guess.  To make
               it harder to guess (increase its "entropy"), you should make it longer.  If
               you use normal characters from an ASCII keyboard, a password of length 20 will
               be strong enough that it will be impossible to guess.  For more information on
               that, I'd encourage you to read <see
               href="http://www.redkestrel.co.uk/Articles/RandomPasswordStrength.html">this
               article.</see>
             </para>
            
             <para>
               The WinZip AES algorithms are not supported with the version of DotNetZip that
               runs on the .NET Compact Framework.  This is because .NET CF lacks the
               HMACSHA1 class that is required for producing the archive.
             </para>
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.EncryptionAlgorithm.Unsupported">
            <summary>
            An encryption algorithm that is not supported by DotNetZip.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.WriteDelegate">
             <summary>
               Delegate in which the application writes the <c>ZipEntry</c> content for the named entry.
             </summary>
            
             <param name="entryName">The name of the entry that must be written.</param>
             <param name="stream">The stream to which the entry data should be written.</param>
            
             <remarks>
               When you add an entry and specify a <c>WriteDelegate</c>, via <see
               cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)"/>, the application
               code provides the logic that writes the entry data directly into the zip file.
             </remarks>
            
             <example>
            
             This example shows how to define a WriteDelegate that obtains a DataSet, and then
             writes the XML for the DataSet into the zip archive.  There's no need to
             save the XML to a disk file first.
            
             <code lang="C#">
             private void WriteEntry (String filename, Stream output)
             {
                 DataSet ds1 = ObtainDataSet();
                 ds1.WriteXml(output);
             }
            
             private void Run()
             {
                 using (var zip = new ZipFile())
                 {
                     zip.AddEntry(zipEntryName, WriteEntry);
                     zip.Save(zipFileName);
                 }
             }
             </code>
            
             <code lang="vb">
             Private Sub WriteEntry (ByVal filename As String, ByVal output As Stream)
                 DataSet ds1 = ObtainDataSet()
                 ds1.WriteXml(stream)
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)"/>
        </member>
        <member name="T:External.Zip.Internal.OpenDelegate">
             <summary>
               Delegate in which the application opens the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should open the stream for.
             </param>
            
             <remarks>
               When you add an entry via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>
        </member>
        <member name="T:External.Zip.Internal.CloseDelegate">
             <summary>
               Delegate in which the application closes the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should close the stream for.
             </param>
            
             <param name="stream">The stream to be closed.</param>
            
             <remarks>
               When you add an entry via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>
        </member>
        <member name="T:External.Zip.Internal.SetCompressionCallback">
             <summary>
               Delegate for the callback by which the application tells the
               library the CompressionLevel to use for a file.
             </summary>
            
             <remarks>
             <para>
               Using this callback, the application can, for example, specify that
               previously-compressed files (.mp3, .png, .docx, etc) should use a
               <c>CompressionLevel</c> of <c>None</c>, or can set the compression level based
               on any other factor.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.SetCompression"/>
        </member>
        <member name="T:External.Zip.Internal.ZipProgressEventType">
            <summary>
              In an EventArgs type, indicates which sort of progress event is being
              reported.
            </summary>
            <remarks>
              There are events for reading, events for saving, and events for
              extracting. This enumeration allows a single EventArgs type to be sued to
              describe one of multiple subevents. For example, a SaveProgress event is
              invoked before, after, and during the saving of a single entry.  The value
              of an enum with this type, specifies which event is being triggered.  The
              same applies to Extraction, Reading and Adding events.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Adding_Started">
            <summary>
            Indicates that a Add() operation has started.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Adding_AfterAddEntry">
            <summary>
            Indicates that an individual entry in the archive has been added.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Adding_Completed">
            <summary>
            Indicates that a Add() operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_Started">
            <summary>
            Indicates that a Read() operation has started.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_BeforeReadEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be read.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_AfterReadEntry">
            <summary>
            Indicates that an individual entry in the archive has just been read.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_Completed">
            <summary>
            Indicates that a Read() operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_ArchiveBytesRead">
            <summary>
            The given event reports the number of bytes read so far
            during a Read() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_Started">
            <summary>
            Indicates that a Save() operation has started.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeWriteEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be written.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterWriteEntry">
            <summary>
            Indicates that an individual entry in the archive has just been saved.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_Completed">
            <summary>
            Indicates that a Save() operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterSaveTempArchive">
            <summary>
            Indicates that the zip archive has been created in a
            temporary location during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeRenameTempArchive">
            <summary>
            Indicates that the temporary file is about to be renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterRenameTempArchive">
            <summary>
            Indicates that the temporary file is has just been renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterCompileSelfExtractor">
            <summary>
            Indicates that the self-extracting archive has been compiled
            during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_EntryBytesRead">
            <summary>
            The given event is reporting the number of source bytes that have run through the compressor so far
            during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_BeforeExtractEntry">
            <summary>
            Indicates that an entry is about to be extracted.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_AfterExtractEntry">
            <summary>
            Indicates that an entry has just been extracted.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite">
            <summary>
              Indicates that extraction of an entry would overwrite an existing
              filesystem file. You must use
              <see cref="F:External.Zip.Internal.ExtractExistingFileAction.InvokeExtractProgressEvent">
              ExtractExistingFileAction.InvokeExtractProgressEvent</see> in the call
              to <c>ZipEntry.Extract()</c> in order to receive this event.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_EntryBytesWritten">
            <summary>
              The given event is reporting the number of bytes written so far for
              the current entry during an Extract() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_BeforeExtractAll">
            <summary>
            Indicates that an ExtractAll operation is about to begin.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_AfterExtractAll">
            <summary>
            Indicates that an ExtractAll operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Error_Saving">
            <summary>
            Indicates that an error has occurred while saving a zip file.
            This generally means the file cannot be opened, because it has been
            removed, or because it is locked by another process.  It can also
            mean that the file cannot be Read, because of a range lock conflict.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipProgressEventArgs">
            <summary>
            Provides information about the progress of a save, read, or extract operation.
            This is a base class; you will probably use one of the classes derived from this one.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.EntriesTotal">
            <summary>
            The total number of entries to be saved or extracted.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.CurrentEntry">
            <summary>
            The name of the last entry saved or extracted.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.Cancel">
            <summary>
            In an event handler, set this to cancel the save or extract
            operation that is in progress.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.EventType">
            <summary>
            The type of event being reported.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.ArchiveName">
            <summary>
            Returns the archive name associated to this event.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes read or written so far for this entry.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Total number of bytes that will be read or written for this entry.
            This number will be -1 if the value cannot be determined.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ReadProgressEventArgs">
            <summary>
            Provides information about the progress of a Read operation.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.AddProgressEventArgs">
            <summary>
            Provides information about the progress of a Add operation.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.SaveProgressEventArgs">
            <summary>
            Provides information about the progress of a save operation.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SaveProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,External.Zip.Internal.ZipEntry)">
            <summary>
            Constructor for the SaveProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesSaved">Number of entries that have been saved.</param>
            <param name="entry">The entry involved in the event.</param>
        </member>
        <member name="P:External.Zip.Internal.SaveProgressEventArgs.EntriesSaved">
            <summary>
            Number of entries saved so far.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ExtractProgressEventArgs">
            <summary>
            Provides information about the progress of the extract operation.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ExtractProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,External.Zip.Internal.ZipEntry,System.String)">
            <summary>
            Constructor for the ExtractProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesExtracted">Number of entries that have been extracted.</param>
            <param name="entry">The entry involved in the event.</param>
            <param name="extractLocation">The location to which entries are extracted.</param>
        </member>
        <member name="P:External.Zip.Internal.ExtractProgressEventArgs.EntriesExtracted">
            <summary>
            Number of entries extracted so far.  This is set only if the
            EventType is Extracting_BeforeExtractEntry or Extracting_AfterExtractEntry, and
            the Extract() is occurring witin the scope of a call to ExtractAll().
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ExtractProgressEventArgs.ExtractLocation">
            <summary>
            Returns the extraction target location, a filesystem path.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipErrorEventArgs">
            <summary>
            Provides information about the an error that occurred while zipping.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipErrorEventArgs.Exception">
            <summary>
            Returns the exception that occurred, if any.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipErrorEventArgs.FileName">
            <summary>
            Returns the name of the file that caused the exception, if any.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.SfxGenerationException">
            <summary>
            Issued when errors occur saving a self-extracting archive.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SfxGenerationException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SfxGenerationException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.SfxGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile
            which has no filename set, you can get this exception.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.ExtractExistingFileAction">
             <summary>
             An enum for the options when extracting an entry would overwrite an existing file. 
             </summary>
             
             <remarks>
               <para>
                 This enum describes the actions that the library can take when an
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> method is called to extract an
                 entry to a filesystem, and the extraction would overwrite an existing filesystem
                 file.
               </para>
             </remarks>
            
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.Throw">
            <summary>
            Throw an exception when extraction would overwrite an existing file. (For
            COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.OverwriteSilently">
            <summary>
            When extraction would overwrite an existing file, overwrite the file silently.
            The overwrite will happen even if the target file is marked as read-only.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.DoNotOverwrite">
            <summary>
            When extraction would overwrite an existing file, don't overwrite the file, silently. 
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.InvokeExtractProgressEvent">
            <summary>
            When extraction would overwrite an existing file, invoke the ExtractProgress
            event, using an event type of <see
            cref="F:External.Zip.Internal.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite"/>.  In
            this way, the application can decide, just-in-time, whether to overwrite the
            file. For example, a GUI application may wish to pop up a dialog to allow
            the user to choose. You may want to examine the <see
            cref="P:External.Zip.Internal.ExtractProgressEventArgs.ExtractLocation"/> property before making
            the decision. If, after your processing in the Extract progress event, you
            want to NOT extract the file, set <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
            on the <c>ZipProgressEventArgs.CurrentEntry</c> to <c>DoNotOverwrite</c>.
            If you do want to extract the file, set <c>ZipEntry.ExtractExistingFile</c>
            to <c>OverwriteSilently</c>.  If you want to cancel the Extraction, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            DoNotOverwrite in that a cancel will not extract any further entries, if
            there are any.  (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.LogicalConjunction">
            <summary>
            Enumerates the options for a logical conjunction. This enum is intended for use
            internally by the FileSelector class.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.FileSelector">
             <summary>
               FileSelector encapsulates logic that selects files from a source - a zip file
               or the filesystem - based on a set of criteria.  This class is used internally
               by the DotNetZip library, in particular for the AddSelectedFiles() methods.
               This class can also be used independently of the zip capability in DotNetZip.
             </summary>
            
             <remarks>
            
             <para>
               The FileSelector class is used internally by the ZipFile class for selecting
               files for inclusion into the ZipFile, when the <see
               cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)"/> method, or one of
               its overloads, is called.  It's also used for the <see
               cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String)"/> methods.  Typically, an
               application that creates or manipulates Zip archives will not directly
               interact with the FileSelector class.
             </para>
            
             <para>
               Some applications may wish to use the FileSelector class directly, to
               select files from disk volumes based on a set of criteria, without creating or
               querying Zip archives.  The file selection criteria include: a pattern to
               match the filename; the last modified, created, or last accessed time of the
               file; the size of the file; and the attributes of the file.
             </para>
            
             <para>
               Consult the documentation for <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/>
               for more information on specifying the selection criteria.
             </para>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.#ctor(System.String)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
            
             <para>
               By default the FileSelector will traverse NTFS Reparse Points.  To
               change this, use <see cref="M:External.Zip.Internal.FileSelector.#ctor(System.String,System.Boolean)">FileSelector(String, bool)</see>.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.#ctor(System.String,System.Boolean)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
             <param name="traverseDirectoryReparsePoints">
             whether to traverse NTFS reparse points (junctions).
             </param>
        </member>
        <member name="P:External.Zip.Internal.FileSelector.SelectionCriteria">
             <summary>
               The string specifying which files to include when retrieving.
             </summary>
             <remarks>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator,
               and a value.  Consider the string "name != *.doc" .  The noun is
               "name".  The operator is "!=", implying "Not Equal".  The value is
               "*.doc".  That criterion, in English, says "all files with a name that
               does not end in the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename;
               "atime", "mtime", and "ctime" for last access time, last modfied time,
               and created time of the file, respectively; "attributes" (or "attrs")
               for the file attributes; "size" (or "length") for the file length
               (uncompressed); and "type" for the type of object, either a file or a
               directory.  The "attributes", "type", and "name" nouns all support =
               and != as operators.  The "size", "atime", "mtime", and "ctime" nouns
               support = and !=, and &gt;, &gt;=, &lt;, &lt;= as well.  The times are
               taken to be expressed in local time.
             </para>
            
             <para>
               Specify values for the file attributes as a string with one or more of
               the characters H,R,S,A,I,L in any order, implying file attributes of
               Hidden, ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint
               (symbolic link) respectively.
             </para>
            
             <para>
               To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as
               the format.  If you omit the HH:mm:ss portion, it is assumed to be
               00:00:00 (midnight).
             </para>
            
             <para>
               The value for a size criterion is expressed in integer quantities of
               bytes, kilobytes (use k or kb after the number), megabytes (m or mb),
               or gigabytes (g or gb).
             </para>
            
             <para>
               The value for a name is a pattern to match against the filename,
               potentially including wildcards.  The pattern follows CMD.exe glob
               rules: * implies one or more of any character, while ?  implies one
               character.  If the name pattern contains any slashes, it is matched to
               the entire filename, including the path; otherwise, it is matched
               against only the filename without the path.  This means a pattern of
               "*\*.*" matches all files one directory level deep, while a pattern of
               "*.*" matches all files in all directories.
             </para>
            
             <para>
               To specify a name pattern that includes spaces, use single quotes
               around the pattern.  A pattern of "'* *.*'" will match all files that
               have spaces in the filename.  The full criteria string for that would
               be "name = '* *.*'" .
             </para>
            
             <para>
               The value for a type criterion is either F (implying a file) or D
               (implying a directory).
             </para>
            
             <para>
               Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime > 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>ctime > 2009/01/01-03:00:00</term>
                 <description>all files with a created time after 3am (local time),
                 on January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size > 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
               You can combine criteria with the conjunctions AND, OR, and XOR. Using
               a string like "name = *.txt AND size &gt;= 100k" for the
               selectionCriteria retrieves entries whose names end in .txt, and whose
               uncompressed size is greater than or equal to 100 kilobytes.
             </para>
            
             <para>
               For more complex combinations of criteria, you can use parenthesis to
               group clauses in the boolean logic.  Absent parenthesis, the
               precedence of the criterion atoms is determined by order of
               appearance.  Unlike the C# language, the AND conjunction does not take
               precendence over the logical OR.  This is important only in strings
               that contain 3 or more criterion atoms.  In other words, "name = *.txt
               and size &gt; 1000 or attributes = H" implies "((name = *.txt AND size
               &gt; 1000) OR attributes = H)" while "attributes = H OR name = *.txt
               and size &gt; 1000" evaluates to "((attributes = H OR name = *.txt)
               AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
               Using time properties requires some extra care. If you want to
               retrieve all entries that were last updated on 2009 February 14,
               specify "mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this
               to say: all files updated after 12:00am on February 14th, until
               12:00am on February 15th.  You can use the same bracketing approach to
               specify any time period - a year, a month, a week, and so on.
             </para>
            
             <para>
               The syntax allows one special case: if you provide a string with no
               spaces, it is treated as a pattern to match for the filename.
               Therefore a string like "*.xls" will be equivalent to specifying "name
               = *.xls".  This "shorthand" notation does not work with compound
               criteria.
             </para>
            
             <para>
               There is no logic in this class that insures that the inclusion
               criteria are internally consistent.  For example, it's possible to
               specify criteria that says the file must have a size of less than 100
               bytes, as well as a size that is greater than 1000 bytes.  Obviously
               no file will ever satisfy such criteria, but this class does not check
               for or detect such inconsistencies.
             </para>
            
             </remarks>
            
             <exception cref="T:System.Exception">
               Thrown in the setter if the value has an invalid syntax.
             </exception>
        </member>
        <member name="P:External.Zip.Internal.FileSelector.TraverseReparsePoints">
            <summary>
             Indicates whether searches will traverse NTFS reparse points, like Junctions.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.ToString">
            <summary>
            Returns a string representation of the FileSelector object.
            </summary>
            <returns>The string representation of the boolean logic statement of the file
            selection criteria for this instance. </returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectFiles(System.String)">
             <summary>
               Returns the names of the files in the specified directory
               that fit the selection criteria specified in the FileSelector.
             </summary>
            
             <remarks>
               This is equivalent to calling <see cref="M:External.Zip.Internal.FileSelector.SelectFiles(System.String,System.Boolean)"/>
               with recurseDirectories = false.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectFiles(System.String,System.Boolean)">
             <summary>
               Returns the names of the files in the specified directory that fit the
               selection criteria specified in the FileSelector, optionally recursing
               through subdirectories.
             </summary>
            
             <remarks>
               This method applies the file selection criteria contained in the
               FileSelector to the files contained in the given directory, and
               returns the names of files that conform to the criteria.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <param name="recurseDirectories">
               Whether to recurse through subdirectories when applying the file
               selection criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectEntries(External.Zip.Internal.ZipFile)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectEntries(External.Zip.Internal.ZipFile,System.String)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             This overload allows the selection of ZipEntry instances from the ZipFile to be restricted
             to entries contained within a particular directory in the ZipFile.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="T:External.Zip.Internal.EnumUtil">
            <summary>
            Summary description for EnumUtil.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.EnumUtil.GetDescription(System.Enum)">
            <summary>
              Returns the value of the DescriptionAttribute if the specified Enum
              value has one.  If not, returns the ToString() representation of the
              Enum value.
            </summary>
            <param name="value">The Enum to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:External.Zip.Internal.EnumUtil.Parse(System.Type,System.String)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.
              Note: use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <returns></returns>
        </member>
        <member name="M:External.Zip.Internal.EnumUtil.Parse(System.Type,System.String,System.Boolean)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.  A
              parameter specified whether the operation is case-sensitive.  Note:
              use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <param name="ignoreCase">
              Whether the operation is case-sensitive or not.</param>
            <returns></returns>
        </member>
        <member name="T:External.Zip.Internal.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.GetFileLength(System.String)">
            private null constructor
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.NormalizePathForUseInZipFile(System.String)">
            <summary>
            Utility routine for transforming path names from filesystem format (on Windows that means backslashes) to
            a format suitable for use within zipfiles. This means trimming the volume letter and colon (if any) And
            swapping backslashes for forward slashes.
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
             <summary>
               Finds a signature in the zip stream. This is useful for finding
               the end of a zip entry, for example, or the beginning of the next ZipEntry.
             </summary>
            
             <remarks>
               <para>
                 Scans through 64k at a time.
               </para>
            
               <para>
                 If the method fails to find the requested signature, the stream Position
                 after completion of this method is unchanged. If the method succeeds in
                 finding the requested signature, the stream position after completion is
                 direct AFTER the signature found in the stream.
               </para>
             </remarks>
            
             <param name="stream">The stream to search</param>
             <param name="SignatureToFind">The 4-byte signature to find</param>
             <returns>The number of bytes read</returns>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.CreateAndOpenUniqueTempFile(System.String,System.IO.Stream@,System.String@)">
            <summary>
              Create a pseudo-random filename, suitable for use as a temporary
              file, and open it.
            </summary>
            <remarks>
            <para>
              The System.IO.Path.GetRandomFileName() method is not available on
              the Compact Framework, so this library provides its own substitute
              on NETCF.
            </para>
            <para>
              This method produces a filename of the form
              DotNetZip-xxxxxxxx.tmp, where xxxxxxxx is replaced by randomly
              chosen characters, and creates that file.
            </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.ReadWithRetry(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Workitem 7889: handle ERROR_LOCK_VIOLATION during read
            </summary>
            <remarks>
            This could be gracefully handled with an extension attribute, but
            This assembly is built for .NET 2.0, so I cannot use them.
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.CountingStream">
            <summary>
              A decorator stream. It wraps another stream, and performs bookkeeping
              to keep track of the stream Position.
            </summary>
            <remarks>
              <para>
                In some cases, it is not possible to get the Position of a stream, let's
                say, on a write-only output stream like ASP.NET's
                <c>Response.OutputStream</c>, or on a different write-only stream
                provided as the destination for the zip by the application.  In this
                case, programmers can use this counting stream to count the bytes read
                or written.
              </para>
              <para>
                Consider the scenario of an application that saves a self-extracting
                archive (SFX), that uses a custom SFX stub.
              </para>
              <para>
                Saving to a filesystem file, the application would open the
                filesystem file (getting a <c>FileStream</c>), save the custom sfx stub
                into it, and then call <c>ZipFile.Save()</c>, specifying the same
                FileStream. <c>ZipFile.Save()</c> does the right thing for the zipentry
                offsets, by inquiring the Position of the <c>FileStream</c> before writing
                any data, and then adding that initial offset into any ZipEntry
                offsets in the zip directory. Everything works fine.
              </para>
              <para>
                Now suppose the application is an ASPNET application and it saves
                directly to <c>Response.OutputStream</c>. It's not possible for DotNetZip to
                inquire the <c>Position</c>, so the offsets for the SFX will be wrong.
              </para>
              <para>
                The workaround is for the application to use this class to wrap
                <c>HttpResponse.OutputStream</c>, then write the SFX stub and the ZipFile
                into that wrapper stream. Because <c>ZipFile.Save()</c> can inquire the
                <c>Position</c>, it will then do the right thing with the offsets.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.WrappedStream">
            <summary>
              Gets the wrapped stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.BytesWritten">
            <summary>
              The count of bytes written out to the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.BytesRead">
            <summary>
              the count of bytes that have been read from the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Adjust(System.Int64)">
             <summary>
                Adjust the byte count on the stream.
             </summary>
            
             <param name='delta'>
               the number of bytes to subtract from the count.
             </param>
            
             <remarks>
               <para>
                 Subtract delta from the count of bytes written to the stream.
                 This is necessary when seeking back, and writing additional data,
                 as happens in some cases when saving Zip files.
               </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The read method.
            </summary>
            <param name="buffer">The buffer to hold the data read from the stream.</param>
            <param name="offset">the offset within the buffer to copy the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
            <returns>the number of bytes read, after decryption and decompression.</returns>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Write data into the stream.
            </summary>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.CanRead">
            <summary>
              Whether the stream can be read.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.CanSeek">
            <summary>
              Whether it is possible to call Seek() on the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.CanWrite">
            <summary>
              Whether it is possible to call Write() on the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Flush">
            <summary>
              Flushes the underlying stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.Length">
            <summary>
              The length of the underlying stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.ComputedPosition">
            <summary>
              Returns the sum of number of bytes written, plus the initial
              offset before writing.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.Position">
            <summary>
              The Position of the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Seek in the stream.
            </summary>
            <param name="offset">the offset point to seek to</param>
            <param name="origin">the reference point from which to seek</param>
            <returns>The new position</returns>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.SetLength(System.Int64)">
             <summary>
               Set the length of the underlying stream.  Be careful with this!
             </summary>
            
             <param name='value'>the length to set on the underlying stream.</param>
        </member>
        <member name="T:External.Zip.Internal.ZipCrypto">
             <summary>
               This class implements the "traditional" or "classic" PKZip encryption,
               which today is considered to be weak. On the other hand it is
               ubiquitous. This class is intended for use only by the DotNetZip
               library.
             </summary>
            
             <remarks>
               Most uses of the DotNetZip library will not involve direct calls into
               the ZipCrypto class.  Instead, the ZipCrypto class is instantiated and
               used by the ZipEntry() class when encryption or decryption on an entry
               is employed.  If for some reason you really wanted to use a weak
               encryption algorithm in some other application, you might use this
               library.  But you would be much better off using one of the built-in
               strong encryption libraries in the .NET Framework, like the AES
               algorithm or SHA.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.#ctor">
             <summary>
               The default constructor for ZipCrypto.
             </summary>
            
             <remarks>
               This class is intended for internal use by the library only. It's
               probably not useful to you. Seriously.  Stop reading this
               documentation.  It's a waste of your time.  Go do something else.
               Check the football scores. Go get an ice cream with a friend.
               Seriously.
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.ZipCrypto.MagicByte">
            <summary>
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
             <summary>
               Call this method on a cipher text to render the plaintext. You must
               first initialize the cipher with a call to InitCipher.
             </summary>
            
             <example>
               <code>
                 var cipher = new ZipCrypto();
                 cipher.InitCipher(Password);
                 // Decrypt the header.  This has a side effect of "further initializing the
                 // encryption keys" in the traditional zip encryption.
                 byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
               </code>
             </example>
            
             <param name="cipherText">The encrypted buffer.</param>
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to CipherText.Length.
             </param>
            
             <returns>The plaintext.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
             <summary>
               This is the converse of DecryptMessage.  It encrypts the plaintext
               and produces a ciphertext.
             </summary>
            
             <param name="plainText">The plain text buffer.</param>
            
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to plainText.Length.
             </param>
            
             <returns>The ciphertext.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.InitCipher(System.String)">
             <summary>
               This initializes the cipher with the given password.
               See AppNote.txt for details.
             </summary>
            
             <param name="passphrase">
               The passphrase for encrypting or decrypting with this cipher.
             </param>
            
             <remarks>
             <code>
             Step 1 - Initializing the encryption keys
             -----------------------------------------
             Start with these keys:
             Key(0) := 305419896 (0x12345678)
             Key(1) := 591751049 (0x23456789)
             Key(2) := 878082192 (0x34567890)
            
             Then, initialize the keys with a password:
            
             loop for i from 0 to length(password)-1
                 update_keys(password(i))
             end loop
            
             Where update_keys() is defined as:
            
             update_keys(char):
               Key(0) := crc32(key(0),char)
               Key(1) := Key(1) + (Key(0) bitwiseAND 000000ffH)
               Key(1) := Key(1) * 134775813 + 1
               Key(2) := crc32(key(2),key(1) rightshift 24)
             end update_keys
            
             Where crc32(old_crc,char) is a routine that given a CRC value and a
             character, returns an updated CRC value after applying the CRC-32
             algorithm described elsewhere in this document.
            
             </code>
            
             <para>
               After the keys are initialized, then you can use the cipher to
               encrypt the plaintext.
             </para>
            
             <para>
               Essentially we encrypt the password with the keys, then discard the
               ciphertext for the password. This initializes the keys for later use.
             </para>
            
             </remarks>
        </member>
        <member name="T:External.Zip.Internal.ZipCipherStream">
            <summary>
              A Stream for reading and concurrently decrypting data from a zip file,
              or for writing and concurrently encrypting data to a zip file.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipCipherStream.#ctor(System.IO.Stream,External.Zip.Internal.ZipCrypto,External.Zip.Internal.CryptoMode)">
            <summary>  The constructor. </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cipher">The pre-initialized ZipCrypto object.</param>
        </member>
        <member name="T:External.Zip.Internal.ZipEntry">
            <summary>
            Represents a single entry in a ZipFile. Typically, applications get a ZipEntry
            by enumerating the entries within a ZipFile, or by adding an entry to a ZipFile.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Info">
            <summary>
            Provides a human-readable string with information about the ZipEntry.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ReadDirEntry(External.Zip.Internal.ZipFile,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
               Reads one entry from the zip directory structure in the zip file.
             </summary>
            
             <param name="zf">
               The zipfile for which a directory entry will be read.  From this param, the
               method gets the ReadStream and the expected text encoding
               (ProvisionalAlternateEncoding) which is used if the entry is not marked
               UTF-8.
             </param>
            
             <param name="previouslySeen">
               a list of previously seen entry names; used to prevent duplicates.
             </param>
            
             <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry.
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Applications should never need to call this directly.  It is exposed to
            support COM Automation environments.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.LastModified">
             <summary>
               The time and date at which the file indicated by the <c>ZipEntry</c> was
               last modified.
             </summary>
            
             <remarks>
             <para>
               The DotNetZip library sets the LastModified value for an entry, equal to
               the Last Modified time of the file in the filesystem.  If an entry is
               added from a stream, the library uses <c>System.DateTime.Now</c> for this
               value, for the given entry.
             </para>
            
             <para>
               This property allows the application to retrieve and possibly set the
               LastModified value on an entry, to an arbitrary value.  <see
               cref="T:System.DateTime"/> values with a <see cref="T:System.DateTimeKind" />
               setting of <c>DateTimeKind.Unspecified</c> are taken to be expressed as
               <c>DateTimeKind.Local</c>.
             </para>
            
             <para>
               Be aware that because of the way <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               Zip specification</see> describes how times are stored in the zip file,
               the full precision of the <c>System.DateTime</c> datatype is not stored
               for the last modified time when saving zip files.  For more information on
               how times are formatted, see the PKZip specification.
             </para>
            
             <para>
               The actual last modified time of a file can be stored in multiple ways in
               the zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               Zip tools and libraries will always at least handle (read or write) the
               DOS time, and may also handle the other time formats.  Keep in mind that
               while the names refer to particular operating systems, there is nothing in
               the time formats themselves that prevents their use on other operating
               systems.
             </para>
            
             <para>
               When reading ZIP files, the DotNetZip library reads the Windows-formatted
               time, if it is stored in the entry, and sets both <c>LastModified</c> and
               <c>ModifiedTime</c> to that value. When writing ZIP files, the DotNetZip
               library by default will write both time quantities. It can also emit the
               Unix-formatted time if desired (See <see
               cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>.)
             </para>
            
             <para>
               The last modified time of the file created upon a call to
               <c>ZipEntry.Extract()</c> may be adjusted during extraction to compensate
               for differences in how the .NET Base Class Library deals with daylight
               saving time (DST) versus how the Windows filesystem deals with daylight
               saving time.  Raymond Chen <see
               href="http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx">provides
               some good context</see>.
             </para>
            
             <para>
               In a nutshell: Daylight savings time rules change regularly.  In 2007, for
               example, the inception week of DST changed.  In 1977, DST was in place all
               year round. In 1945, likewise.  And so on.  Win32 does not attempt to
               guess which time zone rules were in effect at the time in question.  It
               will render a time as "standard time" and allow the app to change to DST
               as necessary.  .NET makes a different choice.
             </para>
            
             <para>
               Compare the output of FileInfo.LastWriteTime.ToString("f") with what you
               see in the Windows Explorer property sheet for a file that was last
               written to on the other side of the DST transition. For example, suppose
               the file was last modified on October 17, 2003, during DST but DST is not
               currently in effect. Explorer's file properties reports Thursday, October
               17, 2003, 8:45:38 AM, but .NETs FileInfo reports Thursday, October 17,
               2003, 9:45 AM.
             </para>
            
             <para>
               Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note: Pacific
               STANDARD Time. Even though October 17 of that year occurred during Pacific
               Daylight Time, Win32 displays the time as standard time because that's
               what time it is NOW.
             </para>
            
             <para>
               .NET BCL assumes that the current DST rules were in place at the time in
               question.  So, .NET says, "Well, if the rules in effect now were also in
               effect on October 17, 2003, then that would be daylight time" so it
               displays "Thursday, October 17, 2003, 9:45 AM PDT" - daylight time.
             </para>
            
             <para>
               So .NET gives a value which is more intuitively correct, but is also
               potentially incorrect, and which is not invertible. Win32 gives a value
               which is intuitively incorrect, but is strictly correct.
             </para>
            
             <para>
               Because of this funkiness, this library adds one hour to the LastModified
               time on the extracted file, if necessary.  That is to say, if the time in
               question had occurred in what the .NET Base Class Library assumed to be
               DST. This assumption may be wrong given the constantly changing DST rules,
               but it is the best we can do.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ModifiedTime">
             <summary>
             Last Modified time for the file represented by the entry.
             </summary>
            
             <remarks>
            
             <para>
               This value corresponds to the "last modified" time in the NTFS file times
               as described in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>.  When getting this property, the value may be
               different from <see cref="P:External.Zip.Internal.ZipEntry.LastModified" />.  When setting the property,
               the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property also gets set, but with a lower
               precision.
             </para>
            
             <para>
               Let me explain. It's going to take a while, so get
               comfortable. Originally, waaaaay back in 1989 when the ZIP specification
               was originally described by the esteemed Mr. Phil Katz, the dominant
               operating system of the time was MS-DOS. MSDOS stored file times with a
               2-second precision, because, c'mon, <em>who is ever going to need better
               resolution than THAT?</em> And so ZIP files, regardless of the platform on
               which the zip file was created, store file times in exactly <see
               href="http://www.vsft.com/hal/dostime.htm">the same format that DOS used
               in 1989</see>.
             </para>
            
             <para>
               Since then, the ZIP spec has evolved, but the internal format for file
               timestamps remains the same.  Despite the fact that the way times are
               stored in a zip file is rooted in DOS heritage, any program on any
               operating system can format a time in this way, and most zip tools and
               libraries DO - they round file times to the nearest even second and store
               it just like DOS did 25+ years ago.
             </para>
            
             <para>
               PKWare extended the ZIP specification to allow a zip file to store what
               are called "NTFS Times" and "Unix(tm) times" for a file.  These are the
               <em>last write</em>, <em>last access</em>, and <em>file creation</em>
               times of a particular file. These metadata are not actually specific
               to NTFS or Unix. They are tracked for each file by NTFS and by various
               Unix filesystems, but they are also tracked by other filesystems, too.
               The key point is that the times are <em>formatted in the zip file</em>
               in the same way that NTFS formats the time (ticks since win32 epoch),
               or in the same way that Unix formats the time (seconds since Unix
               epoch). As with the DOS time, any tool or library running on any
               operating system is capable of formatting a time in one of these ways
               and embedding it into the zip file.
             </para>
            
             <para>
               These extended times are higher precision quantities than the DOS time.
               As described above, the (DOS) LastModified has a precision of 2 seconds.
               The Unix time is stored with a precision of 1 second. The NTFS time is
               stored with a precision of 0.0000001 seconds. The quantities are easily
               convertible, except for the loss of precision you may incur.
             </para>
            
             <para>
               A zip archive can store the {C,A,M} times in NTFS format, in Unix format,
               or not at all.  Often a tool running on Unix or Mac will embed the times
               in Unix format (1 second precision), while WinZip running on Windows might
               embed the times in NTFS format (precision of of 0.0000001 seconds).  When
               reading a zip file with these "extended" times, in either format,
               DotNetZip represents the values with the
               <c>ModifiedTime</c>, <c>AccessedTime</c> and <c>CreationTime</c>
               properties on the <c>ZipEntry</c>.
             </para>
            
             <para>
               While any zip application or library, regardless of the platform it
               runs on, could use any of the time formats allowed by the ZIP
               specification, not all zip tools or libraries do support all these
               formats.  Storing the higher-precision times for each entry is
               optional for zip files, and many tools and libraries don't use the
               higher precision quantities at all. The old DOS time, represented by
               <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/>, is guaranteed to be present, though it
               sometimes unset.
             </para>
            
             <para>
               Ok, getting back to the question about how the <c>LastModified</c>
               property relates to this <c>ModifiedTime</c>
               property... <c>LastModified</c> is always set, while
               <c>ModifiedTime</c> is not. (The other times stored in the <em>NTFS
               times extension</em>, <c>CreationTime</c> and <c>AccessedTime</c> also
               may not be set on an entry that is read from an existing zip file.)
               When reading a zip file, then <c>LastModified</c> takes the DOS time
               that is stored with the file. If the DOS time has been stored as zero
               in the zipfile, then this library will use <c>DateTime.Now</c> for the
               <c>LastModified</c> value.  If the ZIP file was created by an evolved
               tool, then there will also be higher precision NTFS or Unix times in
               the zip file.  In that case, this library will read those times, and
               set <c>LastModified</c> and <c>ModifiedTime</c> to the same value, the
               one corresponding to the last write time of the file.  If there are no
               higher precision times stored for the entry, then <c>ModifiedTime</c>
               remains unset (likewise <c>AccessedTime</c> and <c>CreationTime</c>),
               and <c>LastModified</c> keeps its DOS time.
             </para>
            
             <para>
               When creating zip files with this library, by default the extended time
               properties (<c>ModifiedTime</c>, <c>AccessedTime</c>, and
               <c>CreationTime</c>) are set on the ZipEntry instance, and these data are
               stored in the zip archive for each entry, in NTFS format. If you add an
               entry from an actual filesystem file, then the entry gets the actual file
               times for that file, to NTFS-level precision.  If you add an entry from a
               stream, or a string, then the times get the value <c>DateTime.Now</c>.  In
               this case <c>LastModified</c> and <c>ModifiedTime</c> will be identical,
               to 2 seconds of precision.  You can explicitly set the
               <c>CreationTime</c>, <c>AccessedTime</c>, and <c>ModifiedTime</c> of an
               entry using the property setters.  If you want to set all of those
               quantities, it's more efficient to use the <see
               cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/> method.  Those
               changes are not made permanent in the zip file until you call <see
               cref="M:External.Zip.Internal.ZipFile.Save"/> or one of its cousins.
             </para>
            
             <para>
               When creating a zip file, you can override the default behavior of
               this library for formatting times in the zip file, disabling the
               embedding of file times in NTFS format or enabling the storage of file
               times in Unix format, or both.  You may want to do this, for example,
               when creating a zip file on Windows, that will be consumed on a Mac,
               by an application that is not hip to the "NTFS times" format. To do
               this, use the <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and
               <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> properties.  A valid zip
               file may store the file times in both formats.  But, there are no
               guarantees that a program running on Mac or Linux will gracefully
               handle the NTFS-formatted times when Unix times are present, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. DotNetZip will always do something
               reasonable; other libraries or tools may not. When in doubt, test.
             </para>
            
             <para>
               I'll bet you didn't think one person could type so much about time, eh?
               And reading it was so enjoyable, too!  Well, in appreciation, <see
               href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">maybe you
               should donate</see>?
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.LastModified"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AccessedTime">
            <summary>
            Last Access time for the file represented by the entry.
            </summary>
            <remarks>
            This value may or may not be meaningful.  If the <c>ZipEntry</c> was read from an existing
            Zip archive, this information may not be available. For an explanation of why, see
            <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>.
            </remarks>
            <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
            <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
            <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CreationTime">
             <summary>
             The file creation time for the file represented by the entry.
             </summary>
            
             <remarks>
             This value may or may not be meaningful.  If the <c>ZipEntry</c> was read
             from an existing zip archive, and the creation time was not set on the entry
             when the zip file was created, then this property may be meaningless. For an
             explanation of why, see <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>.
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)">
             <summary>
               Sets the NTFS Creation, Access, and Modified times for the given entry.
             </summary>
            
             <remarks>
             <para>
               When adding an entry from a file or directory, the Creation, Access, and
               Modified times for the given entry are automatically set from the
               filesystem values. When adding an entry from a stream or string, the
               values are implicitly set to DateTime.Now.  The application may wish to
               set these values to some arbitrary value, before saving the archive, and
               can do so using the various setters.  If you want to set all of the times,
               this method is more efficient.
             </para>
            
             <para>
               The values you set here will be retrievable with the <see
               cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/> and <see
               cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/> properties.
             </para>
            
             <para>
               When this method is called, if both <see
               cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and <see
               cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> are false, then the
               <c>EmitTimesInWindowsFormatWhenSaving</c> flag is automatically set.
             </para>
            
             <para>
               DateTime values provided here without a DateTimeKind are assumed to be Local Time.
             </para>
            
             </remarks>
             <param name="created">the creation time of the entry.</param>
             <param name="accessed">the last access time of the entry.</param>
             <param name="modified">the last modified time of the entry.</param>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving" />
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving" />
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in "Windows format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Windows. The default value of
               this property is <c>true</c>.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see
               cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)" />.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since January 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all zip tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see
               cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see
               cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see
               cref="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving">ZipFile.EmitTimesInWindowsFormatWhenSaving</see>
               property, to specify the behavior for all entries in a zip, rather than
               the property on each individual entry.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in &quot;Unix(tm) format&quot; when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Unix. By default this flag is
               <c>false</c>, meaning the Unix-format times are not stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see
               cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see
               cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see
               cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see
               cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving">ZipFile.EmitTimesInUnixFormatWhenSaving</see>
               property, to specify the behavior for all entries, rather than the
               property on each individual entry.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Timestamp">
             <summary>
             The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
             This property is valid only for a ZipEntry that was read from a zip archive.
             It indicates the type of timestamp attached to the entry.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Attributes">
             <summary>
               The file attributes for the entry.
             </summary>
            
             <remarks>
            
             <para>
               The <see cref="T:System.IO.FileAttributes">attributes</see> in NTFS include
               ReadOnly, Archive, Hidden, System, and Indexed.  When adding a
               <c>ZipEntry</c> to a ZipFile, these attributes are set implicitly when
               adding an entry from the filesystem.  When adding an entry from a stream
               or string, the Attributes are not set implicitly.  Regardless of the way
               an entry was added to a <c>ZipFile</c>, you can set the attributes
               explicitly if you like.
             </para>
            
             <para>
               When reading a <c>ZipEntry</c> from a <c>ZipFile</c>, the attributes are
               set according to the data stored in the <c>ZipFile</c>. If you extract the
               entry from the archive to a filesystem file, DotNetZip will set the
               attributes on the resulting file accordingly.
             </para>
            
             <para>
               The attributes can be set explicitly by the application.  For example the
               application may wish to set the <c>FileAttributes.ReadOnly</c> bit for all
               entries added to an archive, so that on unpack, this attribute will be set
               on the extracted file.  Any changes you make to this property are made
               permanent only when you call a <c>Save()</c> method on the <c>ZipFile</c>
               instance that contains the ZipEntry.
             </para>
            
             <para>
               For example, an application may wish to zip up a directory and set the
               ReadOnly bit on every file in the archive, so that upon later extraction,
               the resulting files will be marked as ReadOnly.  Not every extraction tool
               respects these attributes, but if you unpack with DotNetZip, as for
               example in a self-extracting archive, then the attributes will be set as
               they are stored in the <c>ZipFile</c>.
             </para>
            
             <para>
               These attributes may not be interesting or useful if the resulting archive
               is extracted on a non-Windows platform.  How these attributes get used
               upon extraction depends on the platform and tool used.
             </para>
            
             <para>
               This property is only partially supported in the Silverlight version
               of the library: applications can read attributes on entries within
               ZipFiles. But extracting entries within Silverlight will not set the
               attributes on the extracted files.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.LocalFileName">
             <summary>
               The name of the filesystem file, referred to by the ZipEntry.
             </summary>
            
             <remarks>
              <para>
                This property specifies the thing-to-be-zipped on disk, and is set only
                when the <c>ZipEntry</c> is being created from a filesystem file.  If the
                <c>ZipFile</c> is instantiated by reading an existing .zip archive, then
                the LocalFileName will be <c>null</c> (<c>Nothing</c> in VB).
              </para>
            
              <para>
                When it is set, the value of this property may be different than <see
                cref="P:External.Zip.Internal.ZipEntry.FileName"/>, which is the path used in the archive itself.  If you
                call <c>Zip.AddFile("foop.txt", AlternativeDirectory)</c>, then the path
                used for the <c>ZipEntry</c> within the zip archive will be different
                than this path.
              </para>
            
              <para>
               If the entry is being added from a stream, then this is null (Nothing in VB).
              </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.FileName"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.FileName">
             <summary>
               The name of the file contained in the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               This is the name of the entry in the <c>ZipFile</c> itself.  When creating
               a zip archive, if the <c>ZipEntry</c> has been created from a filesystem
               file, via a call to <see cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/> or <see
               cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>, or a related overload, the value
               of this property is derived from the name of that file. The
               <c>FileName</c> property does not include drive letters, and may include a
               different directory path, depending on the value of the
               <c>directoryPathInArchive</c> parameter used when adding the entry into
               the <c>ZipFile</c>.
             </para>
            
             <para>
               In some cases there is no related filesystem file - for example when a
               <c>ZipEntry</c> is created using <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)"/> or one of the similar overloads.  In this case, the value of
               this property is derived from the fileName and the directory path passed
               to that method.
             </para>
            
             <para>
               When reading a zip file, this property takes the value of the entry name
               as stored in the zip file. If you extract such an entry, the extracted
               file will take the name given by this property.
             </para>
            
             <para>
               Applications can set this property when creating new zip archives or when
               reading existing archives. When setting this property, the actual value
               that is set will replace backslashes with forward slashes, in accordance
               with <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, for compatibility with Unix(tm) and ... get
               this.... Amiga!
             </para>
            
             <para>
               If an application reads a <c>ZipFile</c> via <see
               cref="M:External.Zip.Internal.ZipFile.Read(System.String)"/> or a related overload, and then explicitly
               sets the FileName on an entry contained within the <c>ZipFile</c>, and
               then calls <see cref="M:External.Zip.Internal.ZipFile.Save"/>, the application will effectively
               rename the entry within the zip archive.
             </para>
            
             <para>
               If an application sets the value of <c>FileName</c>, then calls
               <c>Extract()</c> on the entry, the entry is extracted to a file using the
               newly set value as the filename.  The <c>FileName</c> value is made
               permanent in the zip archive only <em>after</em> a call to one of the
               <c>ZipFile.Save()</c> methods on the <c>ZipFile</c> that contains the
               ZipEntry.
             </para>
            
             <para>
               If an application attempts to set the <c>FileName</c> to a value that
               would result in a duplicate entry in the <c>ZipFile</c>, an exception is
               thrown.
             </para>
            
             <para>
               When a <c>ZipEntry</c> is contained within a <c>ZipFile</c>, applications
               cannot rename the entry within the context of a <c>foreach</c> (<c>For
               Each</c> in VB) loop, because of the way the <c>ZipFile</c> stores
               entries.  If you need to enumerate through all the entries and rename one
               or more of them, use <see
               cref="P:External.Zip.Internal.ZipFile.EntriesSorted">ZipFile.EntriesSorted</see> as the
               collection.  See also, <see
               cref="M:External.Zip.Internal.ZipFile.GetEnumerator">ZipFile.GetEnumerator()</see>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.InputStream">
             <summary>
             The stream that provides content for the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The application can use this property to set the input stream for an
               entry on a just-in-time basis. Imagine a scenario where the application
               creates a <c>ZipFile</c> comprised of content obtained from hundreds of
               files, via calls to <c>AddFile()</c>. The DotNetZip library opens streams
               on these files on a just-in-time basis, only when writing the entry out to
               an external store within the scope of a <c>ZipFile.Save()</c> call.  Only
               one input stream is opened at a time, as each entry is being written out.
             </para>
            
             <para>
               Now imagine a different application that creates a <c>ZipFile</c>
               with content obtained from hundreds of streams, added through <see
               cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/>.  Normally the
               application would supply an open stream to that call.  But when large
               numbers of streams are being added, this can mean many open streams at one
               time, unnecessarily.
             </para>
            
             <para>
               To avoid this, call <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/> and specify delegates that open and close the stream at
               the time of Save.
             </para>
            
            
             <para>
               Setting the value of this property when the entry was not added from a
               stream (for example, when the <c>ZipEntry</c> was added with <see
               cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/> or <see
               cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>, or when the entry was added by
               reading an existing zip archive) will throw an exception.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.InputStreamWasJitProvided">
             <summary>
               A flag indicating whether the InputStream was provided Just-in-time.
             </summary>
            
             <remarks>
            
             <para>
               When creating a zip archive, an application can obtain content for one or
               more of the <c>ZipEntry</c> instances from streams, using the <see
               cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/> method.  At the time
               of calling that method, the application can supply null as the value of
               the stream parameter.  By doing so, the application indicates to the
               library that it will provide a stream for the entry on a just-in-time
               basis, at the time one of the <c>ZipFile.Save()</c> methods is called and
               the data for the various entries are being compressed and written out.
             </para>
            
             <para>
               In this case, the application can set the <see cref="P:External.Zip.Internal.ZipEntry.InputStream"/>
               property, typically within the SaveProgress event (event type: <see
               cref="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeWriteEntry"/>) for that entry.
             </para>
            
             <para>
               The application will later want to call Close() and Dispose() on that
               stream.  In the SaveProgress event, when the event type is <see
               cref="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterWriteEntry"/>, the application can
               do so.  This flag indicates that the stream has been provided by the
               application on a just-in-time basis and that it is the application's
               responsibility to call Close/Dispose on that stream.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.InputStream"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Source">
            <summary>
            An enum indicating the source of the ZipEntry.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.VersionNeeded">
             <summary>
             The version of the zip engine needed to read the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property, indicating the version of <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> that the extracting tool or library must support to
               extract the given entry.  Generally higher versions indicate newer
               features.  Older zip engines obviously won't know about new features, and
               won't be able to extract entries that depend on those newer features.
             </para>
            
             <list type="table">
             <listheader>
             <term>value</term>
             <description>Features</description>
             </listheader>
            
             <item>
             <term>20</term>
             <description>a basic Zip Entry, potentially using PKZIP encryption.
             </description>
             </item>
            
             <item>
             <term>45</term>
             <description>The ZIP64 extension is used on the entry.
             </description>
             </item>
            
             <item>
             <term>46</term>
             <description> File is compressed using BZIP2 compression*</description>
             </item>
            
             <item>
             <term>50</term>
             <description> File is encrypted using PkWare's DES, 3DES, (broken) RC2 or RC4</description>
             </item>
            
             <item>
             <term>51</term>
             <description> File is encrypted using PKWare's AES encryption or corrected RC2 encryption.</description>
             </item>
            
             <item>
             <term>52</term>
             <description> File is encrypted using corrected RC2-64 encryption**</description>
             </item>
            
             <item>
             <term>61</term>
             <description> File is encrypted using non-OAEP key wrapping***</description>
             </item>
            
             <item>
             <term>63</term>
             <description> File is compressed using LZMA, PPMd+, Blowfish, or Twofish</description>
             </item>
            
             </list>
            
             <para>
               There are other values possible, not listed here. DotNetZip supports
               regular PKZip encryption, and ZIP64 extensions.  DotNetZip cannot extract
               entries that require a zip engine higher than 45.
             </para>
            
             <para>
               This value is set upon reading an existing zip file, or after saving a zip
               archive.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               Each entry in a zip file can optionally have a comment associated to
               it. The comment might be displayed by a zip tool during extraction, for
               example.
             </para>
            
             <para>
               By default, the <c>Comment</c> is encoded in IBM437 code page. You can
               specify an alternative with <see cref="P:External.Zip.Internal.ZipEntry.AlternateEncoding"/> and
              <see cref="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage"/>.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AlternateEncoding"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.RequiresZip64">
             <summary>
             Indicates whether the entry requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para>
               This property is null (Nothing in VB) until a <c>Save()</c> method on the
               containing <see cref="T:External.Zip.Internal.ZipFile"/> instance has been called. The property is
               non-null (<c>HasValue</c> is true) only after a <c>Save()</c> method has
               been called.
             </para>
            
             <para>
               After the containing <c>ZipFile</c> has been saved, the Value of this
               property is true if any of the following three conditions holds: the
               uncompressed size of the entry is larger than 0xFFFFFFFF; the compressed
               size of the entry is larger than 0xFFFFFFFF; the relative offset of the
               entry within the zip archive is larger than 0xFFFFFFFF.  These quantities
               are not known until a <c>Save()</c> is attempted on the zip archive and
               the compression is applied.
             </para>
            
             <para>
               If none of the three conditions holds, then the <c>Value</c> is false.
             </para>
            
             <para>
               A <c>Value</c> of false does not indicate that the entry, as saved in the
               zip archive, does not use ZIP64.  It merely indicates that ZIP64 is
               <em>not required</em>.  An entry may use ZIP64 even when not required if
               the <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:External.Zip.Internal.Zip64Option.Always"/>, or if
               the <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/>
               and the output stream was not seekable.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.OutputUsedZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.OutputUsedZip64">
             <summary>
               Indicates whether the entry actually used ZIP64 extensions, as it was most
               recently written to the output file or stream.
             </summary>
            
             <remarks>
            
             <para>
               This Nullable property is null (Nothing in VB) until a <c>Save()</c>
               method on the containing <see cref="T:External.Zip.Internal.ZipFile"/> instance has been
               called. <c>HasValue</c> is true only after a <c>Save()</c> method has been
               called.
             </para>
            
             <para>
               The value of this property for a particular <c>ZipEntry</c> may change
               over successive calls to <c>Save()</c> methods on the containing ZipFile,
               even if the file that corresponds to the <c>ZipEntry</c> does not. This
               may happen if other entries contained in the <c>ZipFile</c> expand,
               causing the offset for this particular entry to exceed 0xFFFFFFFF.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.RequiresZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.BitField">
             <summary>
               The bitfield for the entry as defined in the zip spec. You probably
               never need to look at this.
             </summary>
            
             <remarks>
             <para>
               You probably do not need to concern yourself with the contents of this
               property, but in case you do:
             </para>
            
             <list type="table">
             <listheader>
             <term>bit</term>
             <description>meaning</description>
             </listheader>
            
             <item>
             <term>0</term>
             <description>set if encryption is used.</description>
             </item>
            
             <item>
             <term>1-2</term>
             <description>
             set to determine whether normal, max, fast deflation.  DotNetZip library
             always leaves these bits unset when writing (indicating "normal"
             deflation"), but can read an entry with any value here.
             </description>
             </item>
            
             <item>
             <term>3</term>
             <description>
             Indicates that the Crc32, Compressed and Uncompressed sizes are zero in the
             local header.  This bit gets set on an entry during writing a zip file, when
             it is saved to a non-seekable output stream.
             </description>
             </item>
            
            
             <item>
             <term>4</term>
             <description>reserved for "enhanced deflating". This library doesn't do enhanced deflating.</description>
             </item>
            
             <item>
             <term>5</term>
             <description>set to indicate the zip is compressed patched data.  This library doesn't do that.</description>
             </item>
            
             <item>
             <term>6</term>
             <description>
             set if PKWare's strong encryption is used (must also set bit 1 if bit 6 is
             set). This bit is not set if WinZip's AES encryption is set.</description>
             </item>
            
             <item>
             <term>7</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>8</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>9</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>10</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>11</term>
             <description>
             Language encoding flag (EFS).  If this bit is set, the filename and comment
             fields for this file must be encoded using UTF-8. This library currently
             does not support UTF-8.
             </description>
             </item>
            
             <item>
             <term>12</term>
             <description>Reserved by PKWARE for enhanced compression.</description>
             </item>
            
             <item>
             <term>13</term>
             <description>
               Used when encrypting the Central Directory to indicate selected data
               values in the Local Header are masked to hide their actual values.  See
               the section in <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> describing the Strong Encryption Specification for
               details.
             </description>
             </item>
            
             <item>
             <term>14</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             <item>
             <term>15</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressionMethod">
             <summary>
               The compression method employed for this ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               Zip specification</see> allows a variety of compression methods.  This
               library supports just two: 0x08 = Deflate.  0x00 = Store (no compression),
               for reading or writing.
             </para>
            
             <para>
               When reading an entry from an existing zipfile, the value you retrieve
               here indicates the compression method used on the entry by the original
               creator of the zip.  When writing a zipfile, you can specify either 0x08
               (Deflate) or 0x00 (None).  If you try setting something else, you will get
               an exception.
             </para>
            
             <para>
               You may wish to set <c>CompressionMethod</c> to <c>CompressionMethod.None</c> (0)
               when zipping already-compressed data like a jpg, png, or mp3 file.
               This can save time and cpu cycles.
             </para>
            
             <para>
               When setting this property on a <c>ZipEntry</c> that is read from an
               existing zip file, calling <c>ZipFile.Save()</c> will cause the new
               CompressionMethod to be used on the entry in the newly saved zip file.
             </para>
            
             <para>
               Setting this property may have the side effect of modifying the
               <c>CompressionLevel</c> property. If you set the <c>CompressionMethod</c> to a
               value other than <c>None</c>, and <c>CompressionLevel</c> is previously
               set to <c>None</c>, then <c>CompressionLevel</c> will be set to
               <c>Default</c>.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.CompressionMethod"/>
            
             <example>
               In this example, the first entry added to the zip archive uses the default
               behavior - compression is used where it makes sense.  The second entry,
               the MP3 file, is added to the archive without being compressed.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToCreate))
             {
               ZipEntry e1= zip.AddFile(@"notes\Readme.txt");
               ZipEntry e2= zip.AddFile(@"music\StopThisTrain.mp3");
               e2.CompressionMethod = CompressionMethod.None;
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile(ZipFileToCreate)
               zip.AddFile("notes\Readme.txt")
               Dim e2 as ZipEntry = zip.AddFile("music\StopThisTrain.mp3")
               e2.CompressionMethod = CompressionMethod.None
               zip.Save
             End Using
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressionLevel">
             <summary>
               Sets the compression level to be used for the entry when saving the zip
               archive. This applies only for CompressionMethod = DEFLATE.
             </summary>
            
             <remarks>
              <para>
                When using the DEFLATE compression method, Varying the compression
                level used on entries can affect the size-vs-speed tradeoff when
                compression and decompressing data streams or files.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
            
              <para>
                When setting this property on a <c>ZipEntry</c> that is read from an
                existing zip file, calling <c>ZipFile.Save()</c> will cause the new
                <c>CompressionLevel</c> to be used on the entry in the newly saved zip file.
              </para>
            
              <para>
                Setting this property may have the side effect of modifying the
                <c>CompressionMethod</c> property. If you set the <c>CompressionLevel</c>
                to a value other than <c>None</c>, <c>CompressionMethod</c> will be set
                to <c>Deflate</c>, if it was previously <c>None</c>.
              </para>
            
              <para>
                Setting this property has no effect if the <c>CompressionMethod</c> is something
                other than <c>Deflate</c> or <c>None</c>.
              </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.CompressionMethod"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressedSize">
             <summary>
               The compressed size of the file, in bytes, within the zip archive.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the compressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.UncompressedSize"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.UncompressedSize">
             <summary>
               The size of the file, in bytes, before compression, or after extraction.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the uncompressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.CompressedSize"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a ratio of the compressed size to the uncompressed size of the
               entry, expressed as a double in the range of 0 to 100+. A value of 100
               indicates no compression at all.  It could be higher than 100 when the
               compression algorithm actually inflates the data, as may occur for small
               files, or uncompressible data that is encrypted.
             </para>
            
             <para>
               You could format it for presentation to a user via a format string of
               "{3,5:F0}%" to see it as a percentage.
             </para>
            
             <para>
               If the size of the original uncompressed file is 0, implying a
               denominator of 0, the return value will be zero.
             </para>
            
             <para>
               This property is valid after reading in an existing zip file, or after
               saving the <c>ZipFile</c> that contains the ZipEntry. You cannot know the
               effect of a compression transform until you try it.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Crc">
             <summary>
             The 32-bit CRC (Cyclic Redundancy Check) on the contents of the ZipEntry.
             </summary>
            
             <remarks>
            
             <para> You probably don't need to concern yourself with this. It is used
             internally by DotNetZip to verify files or streams upon extraction.  </para>
            
             <para> The value is a <see href="http://en.wikipedia.org/wiki/CRC32">32-bit
             CRC</see> using 0xEDB88320 for the polynomial. This is the same CRC-32 used in
             PNG, MPEG-2, and other protocols and formats.  It is a read-only property; when
             creating a Zip archive, the CRC for each entry is set only after a call to
             <c>Save()</c> on the containing ZipFile. When reading an existing zip file, the value
             of this property reflects the stored CRC for the entry.  </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file).
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.UsesEncryption">
             <summary>
             A derived property that is <c>true</c> if the entry uses encryption.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property on the entry.  When reading a zip file,
               the value for the <c>ZipEntry</c> is determined by the data read
               from the zip file.  After saving a ZipFile, the value of this
               property for each <c>ZipEntry</c> indicates whether encryption was
               actually used (which will have been true if the <see
               cref="P:External.Zip.Internal.ZipEntry.Password"/> was set and the <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/> property
               was something other than <see cref="F:External.Zip.Internal.EncryptionAlgorithm.None"/>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Encryption">
             <summary>
               Set this to specify which encryption algorithm to use for the entry when
               saving it to a zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Set this property in order to encrypt the entry when the <c>ZipFile</c> is
               saved. When setting this property, you must also set a <see
               cref="P:External.Zip.Internal.ZipEntry.Password"/> on the entry.  If you set a value other than <see
               cref="F:External.Zip.Internal.EncryptionAlgorithm.None"/> on this property and do not set a
               <c>Password</c> then the entry will not be encrypted. The <c>ZipEntry</c>
               data is encrypted as the <c>ZipFile</c> is saved, when you call <see
               cref="M:External.Zip.Internal.ZipFile.Save"/> or one of its cousins on the containing
               <c>ZipFile</c> instance. You do not need to specify the <c>Encryption</c>
               when extracting entries from an archive.
             </para>
            
             <para>
               The Zip specification from PKWare defines a set of encryption algorithms,
               and the data formats for the zip archive that support them, and PKWare
               supports those algorithms in the tools it produces. Other vendors of tools
               and libraries, such as WinZip or Xceed, typically support <em>a
               subset</em> of the algorithms specified by PKWare. These tools can
               sometimes support additional different encryption algorithms and data
               formats, not specified by PKWare. The AES Encryption specified and
               supported by WinZip is the most popular example. This library supports a
               subset of the complete set of algorithms specified by PKWare and other
               vendors.
             </para>
            
             <para>
               There is no common, ubiquitous multi-vendor standard for strong encryption
               within zip files. There is broad support for so-called "traditional" Zip
               encryption, sometimes called Zip 2.0 encryption, as <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specified
               by PKWare</see>, but this encryption is considered weak and
               breakable. This library currently supports the Zip 2.0 "weak" encryption,
               and also a stronger WinZip-compatible AES encryption, using either 128-bit
               or 256-bit key strength. If you want DotNetZip to support an algorithm
               that is not currently supported, call the author of this library and maybe
               we can talk business.
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class also has a <see
               cref="P:External.Zip.Internal.ZipFile.Encryption"/> property.  In most cases you will use
               <em>that</em> property when setting encryption. This property takes
               precedence over any <c>Encryption</c> set on the <c>ZipFile</c> itself.
               Typically, you would use the per-entry Encryption when most entries in the
               zip archive use one encryption algorithm, and a few entries use a
               different one.  If all entries in the zip file use the same Encryption,
               then it is simpler to just set this property on the ZipFile itself, when
               creating a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you can
               modify the Encryption on an encrypted entry: you can remove encryption
               from an entry that was encrypted; you can encrypt an entry that was not
               encrypted previously; or, you can change the encryption algorithm.  The
               changes in encryption are not made permanent until you call Save() on the
               <c>ZipFile</c>.  To effect changes in encryption, the entry content is
               streamed through several transformations, depending on the modification
               the application has requested. For example if the entry is not encrypted
               and the application sets <c>Encryption</c> to <c>PkzipWeak</c>, then at
               the time of <c>Save()</c>, the original entry is read and decompressed,
               then re-compressed and encrypted.  Conversely, if the original entry is
               encrypted with <c>PkzipWeak</c> encryption, and the application sets the
               <c>Encryption</c> property to <c>WinZipAes128</c>, then at the time of
               <c>Save()</c>, the original entry is decrypted via PKZIP encryption and
               decompressed, then re-compressed and re-encrypted with AES.  This all
               happens automatically within the library, but it can be time-consuming for
               large entries.
             </para>
            
             <para>
               Additionally, when updating archives, it is not possible to change the
               password when changing the encryption algorithm.  To change both the
               algorithm and the password, you need to Save() the zipfile twice.  First
               set the <c>Encryption</c> to None, then call <c>Save()</c>.  Then set the
               <c>Encryption</c> to the new value (not "None"), then call <c>Save()</c>
               once again.
             </para>
            
             <para>
               The WinZip AES encryption algorithms are not supported on the .NET Compact
               Framework.
             </para>
             </remarks>
            
             <example>
             <para>
               This example creates a zip archive that uses encryption, and then extracts
               entries from the archive.  When creating the zip archive, the ReadMe.txt
               file is zipped without using a password or encryption.  The other file
               uses encryption.
             </para>
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt")
                 ZipEntry e1= zip.AddFile("2008-Regional-Sales-Report.pdf");
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256;
                 e1.Password= "Top.Secret.No.Peeking!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 // Specify the password that is used during extraction, for
                 // all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.AddFile("ReadMe.txt")
                 Dim e1 as ZipEntry
                 e1= zip.AddFile("2008-Regional-Sales-Report.pdf")
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256
                 e1.Password= "Top.Secret.No.Peeking!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 ' Specify the password that is used during extraction, for
                 ' all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown in the setter if EncryptionAlgorithm.Unsupported is specified.
             </exception>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.Password">ZipEntry.Password</seealso>
             <seealso cref="P:External.Zip.Internal.ZipFile.Encryption">ZipFile.Encryption</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Password">
             <summary>
             The Password to be used when encrypting a <c>ZipEntry</c> upon
             <c>ZipFile.Save()</c>, or when decrypting an entry upon Extract().
             </summary>
            
             <remarks>
             <para>
               This is a write-only property on the entry. Set this to request that the
               entry be encrypted when writing the zip archive, or set it to specify the
               password to be used when extracting an existing entry that is encrypted.
             </para>
            
             <para>
               The password set here is implicitly used to encrypt the entry during the
               <see cref="M:External.Zip.Internal.ZipFile.Save"/> operation, or to decrypt during the <see
               cref="M:External.Zip.Internal.ZipEntry.Extract"/> or <see cref="M:External.Zip.Internal.ZipEntry.OpenReader"/> operation.  If you set
               the Password on a <c>ZipEntry</c> after calling <c>Save()</c>, there is no
               effect.
             </para>
            
             <para>
               Consider setting the <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/> property when using a
               password. Answering concerns that the standard password protection
               supported by all zip tools is weak, WinZip has extended the ZIP
               specification with a way to use AES Encryption to protect entries in the
               Zip file. Unlike the "PKZIP 2.0" encryption specified in the PKZIP
               specification, <see href=
               "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES
               Encryption</see> uses a standard, strong, tested, encryption
               algorithm. DotNetZip can create zip archives that use WinZip-compatible
               AES encryption, if you set the <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/> property. But,
               archives created that use AES encryption may not be readable by all other
               tools and libraries. For example, Windows Explorer cannot read a
               "compressed folder" (a zip file) that uses AES encryption, though it can
               read a zip file that uses "PKZIP encryption."
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class also has a <see cref="P:External.Zip.Internal.ZipFile.Password"/>
               property.  This property takes precedence over any password set on the
               ZipFile itself.  Typically, you would use the per-entry Password when most
               entries in the zip archive use one password, and a few entries use a
               different password.  If all entries in the zip file use the same password,
               then it is simpler to just set this property on the ZipFile itself,
               whether creating a zip archive or extracting a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you
               cannot modify the password on any encrypted entry, except by extracting
               the entry with the original password (if any), removing the original entry
               via <see cref="M:External.Zip.Internal.ZipFile.RemoveEntry(External.Zip.Internal.ZipEntry)"/>, and then adding a new
               entry with a new Password.
             </para>
            
             <para>
               For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the Password property on that <c>ZipEntry</c> and then
               calling <c>Save()</c> on the <c>ZipFile</c> does not update the password
               on that entry in the archive.  Neither is an exception thrown. Instead,
               what happens during the <c>Save()</c> is the existing entry is copied
               through to the new zip archive, in its original encrypted form. Upon
               re-reading that archive, the entry can be decrypted with its original
               password.
             </para>
            
             <para>
               If you read a ZipFile, and there is an un-encrypted entry, you can set the
               <c>Password</c> on the entry and then call Save() on the ZipFile, and get
               encryption on that entry.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip file with two entries, and then extracts the
               entries from the zip file.  When creating the zip file, the two files are
               added to the zip file using password protection. Each entry uses a
               different password.  During extraction, each file is extracted with the
               appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 ZipEntry entry;
                 entry= zip.AddFile("Declaration.txt");
                 entry.Password= "123456!";
                 entry = zip.AddFile("Report.xls");
                 entry.Password= "1Secret!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 ZipEntry entry;
                 entry = zip["Declaration.txt"];
                 entry.Password = "123456!";
                 entry.Extract("extractDir");
                 entry = zip["Report.xls"];
                 entry.Password = "1Secret!";
                 entry.Extract("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim entry as ZipEntry
                 entry= zip.AddFile("Declaration.txt")
                 entry.Password= "123456!"
                 entry = zip.AddFile("Report.xls")
                 entry.Password= "1Secret!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 Dim entry as ZipEntry
                 entry = zip("Declaration.txt")
                 entry.Password = "123456!"
                 entry.Extract("extractDir")
                 entry = zip("Report.xls")
                 entry.Password = "1Secret!"
                 entry.Extract("extractDir")
             End Using
            
             </code>
            
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.Encryption"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.Password">ZipFile.Password</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ExtractExistingFile">
             <summary>
             The action the library should take when extracting a file that already exists.
             </summary>
            
             <remarks>
               <para>
                 This property affects the behavior of the Extract methods (one of the
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
                 extraction would would overwrite an existing filesystem file. If you do
                 not set this property, the library throws an exception when extracting
                 an entry would overwrite an existing file.
               </para>
            
               <para>
                 This property has no effect when extracting to a stream, or when the file to be
                 extracted does not already exist.
               </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>
            
             <example>
               This example shows how to set the <c>ExtractExistingFile</c> property in
               an <c>ExtractProgress</c> event, in response to user input. The
               <c>ExtractProgress</c> event is invoked if and only if the
               <c>ExtractExistingFile</c> property was previously set to
               <c>ExtractExistingFileAction.InvokeExtractProgressEvent</c>.
             <code lang="C#">
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
                     Console.WriteLine("extract {0} ", e.CurrentEntry.FileName);
            
                 else if (e.EventType == ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite)
                 {
                     ZipEntry entry = e.CurrentEntry;
                     string response = null;
                     // Ask the user if he wants overwrite the file
                     do
                     {
                         Console.Write("Overwrite {0} in {1} ? (y/n/C) ", entry.FileName, e.ExtractLocation);
                         response = Console.ReadLine();
                         Console.WriteLine();
            
                     } while (response != null &amp;&amp; response[0]!='Y' &amp;&amp;
                              response[0]!='N' &amp;&amp; response[0]!='C');
            
                     if  (response[0]=='C')
                         e.Cancel = true;
                     else if (response[0]=='Y')
                         entry.ExtractExistingFile = ExtractExistingFileAction.OverwriteSilently;
                     else
                         entry.ExtractExistingFile= ExtractExistingFileAction.DoNotOverwrite;
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ZipErrorAction">
             <summary>
               The action to take when an error is encountered while
               opening or reading files as they are saved into a zip archive.
             </summary>
            
             <remarks>
              <para>
                 Errors can occur within a call to <see
                 cref="M:External.Zip.Internal.ZipFile.Save">ZipFile.Save</see>, as the various files contained
                 in a ZipFile are being saved into the zip archive.  During the
                 <c>Save</c>, DotNetZip will perform a <c>File.Open</c> on the file
                 associated to the ZipEntry, and then will read the entire contents of
                 the file as it is zipped. Either the open or the Read may fail, because
                 of lock conflicts or other reasons.  Using this property, you can
                 specify the action to take when such errors occur.
              </para>
            
              <para>
                 Typically you will NOT set this property on individual ZipEntry
                 instances.  Instead, you will set the <see
                 cref="P:External.Zip.Internal.ZipFile.ZipErrorAction">ZipFile.ZipErrorAction</see> property on
                 the ZipFile instance, before adding any entries to the
                 <c>ZipFile</c>. If you do this, errors encountered on behalf of any of
                 the entries in the ZipFile will be handled the same way.
              </para>
            
              <para>
                 But, if you use a <see cref="E:External.Zip.Internal.ZipFile.ZipError"/> handler, you will want
                 to set this property on the <c>ZipEntry</c> within the handler, to
                 communicate back to DotNetZip what you would like to do with the
                 particular error.
              </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ZipError"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.IncludedInMostRecentSave">
            <summary>
            Indicates whether the entry was included in the most recent save.
            </summary>
            <remarks>
            An entry can be excluded or skipped from a save if there is an error
            opening or reading the entry.
            </remarks>
            <seealso cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.SetCompression">
             <summary>
               A callback that allows the application to specify the compression to use
               for a given entry that is about to be added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               See <see cref="P:External.Zip.Internal.ZipFile.SetCompression" />
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.UseUnicodeAsNecessary">
             <summary>
               Set to indicate whether to use UTF-8 encoding for filenames and comments.
             </summary>
            
             <remarks>
            
             <para>
               If this flag is set, the comment and filename for the entry will be
               encoded with UTF-8, as described in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, if necessary. "Necessary" means, the filename or
               entry comment (if any) cannot be reflexively encoded and decoded using the
               default code page, IBM437.
             </para>
            
             <para>
               Setting this flag to true is equivalent to setting <see
               cref="P:External.Zip.Internal.ZipEntry.ProvisionalAlternateEncoding"/> to <c>System.Text.Encoding.UTF8</c>.
             </para>
            
             <para>
               This flag has no effect or relation to the text encoding used within the
               file itself.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use for the FileName and Comment on this ZipEntry,
               when the default encoding is insufficient.
             </summary>
            
             <remarks>
            
             <para>
               Don't use this property.  See <see cref='P:External.Zip.Internal.ZipEntry.AlternateEncoding'/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AlternateEncoding">
            <summary>
              Specifies the alternate text encoding used by this ZipEntry
            </summary>
            <remarks>
              <para>
                The default text encoding used in Zip files for encoding filenames and
                comments is IBM437, which is something like a superset of ASCII.  In
                cases where this is insufficient, applications can specify an
                alternate encoding.
              </para>
              <para>
                When creating a zip file, the usage of the alternate encoding is
                governed by the <see cref="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage"/> property.
                Typically you would set both properties to tell DotNetZip to employ an
                encoding that is not IBM437 in the zipfile you are creating.
              </para>
              <para>
                Keep in mind that because the ZIP specification states that the only
                valid encodings to use are IBM437 and UTF-8, if you use something
                other than that, then zip tools and libraries may not be able to
                successfully read the zip archive you generate.
              </para>
              <para>
                The zip specification states that applications should presume that
                IBM437 is in use, except when a special bit is set, which indicates
                UTF-8. There is no way to specify an arbitrary code page, within the
                zip file itself. When you create a zip file encoded with gb2312 or
                ibm861 or anything other than IBM437 or UTF-8, then the application
                that reads the zip file needs to "know" which code page to use. In
                some cases, the code page used when reading is chosen implicitly. For
                example, WinRar uses the ambient code page for the host desktop
                operating system. The pitfall here is that if you create a zip in
                Copenhagen and send it to Tokyo, the reader of the zipfile may not be
                able to decode successfully.
              </para>
            </remarks>
            <example>
              This example shows how to create a zipfile encoded with a
              language-specific encoding:
            <code>
              using (var zip = new ZipFile())
              {
                 zip.AlternateEnoding = System.Text.Encoding.GetEncoding("ibm861");
                 zip.AlternateEnodingUsage = ZipOption.Always;
                 zip.AddFileS(arrayOfFiles);
                 zip.Save("Myarchive-Encoded-in-IBM861.zip");
              }
            </code>
            </example>
            <seealso cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage" />
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage">
            <summary>
              Describes if and when this instance should apply
              AlternateEncoding to encode the FileName and Comment, when
              saving.
            </summary>
            <seealso cref="P:External.Zip.Internal.ZipFile.AlternateEncoding" />
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.IsText">
             <summary>
               Indicates whether an entry is marked as a text file. Be careful when
               using on this property. Unless you have a good reason, you should
               probably ignore this property.
             </summary>
            
             <remarks>
             <para>
               The ZIP format includes a provision for specifying whether an entry in
               the zip archive is a text or binary file.  This property exposes that
               metadata item. Be careful when using this property: It's not clear
               that this property as a firm meaning, across tools and libraries.
             </para>
            
             <para>
               To be clear, when reading a zip file, the property value may or may
               not be set, and its value may or may not be valid.  Not all entries
               that you may think of as "text" entries will be so marked, and entries
               marked as "text" are not guaranteed in any way to be text entries.
               Whether the value is set and set correctly depends entirely on the
               application that produced the zip file.
             </para>
            
             <para>
               There are many zip tools available, and when creating zip files, some
               of them "respect" the IsText metadata field, and some of them do not.
               Unfortunately, even when an application tries to do "the right thing",
               it's not always clear what "the right thing" is.
             </para>
            
             <para>
               There's no firm definition of just what it means to be "a text file",
               and the zip specification does not help in this regard. Twenty years
               ago, text was ASCII, each byte was less than 127. IsText meant, all
               bytes in the file were less than 127.  These days, it is not the case
               that all text files have all bytes less than 127.  Any unicode file
               may have bytes that are above 0x7f.  The zip specification has nothing
               to say on this topic. Therefore, it's not clear what IsText really
               means.
             </para>
            
             <para>
               This property merely tells a reading application what is stored in the
               metadata for an entry, without guaranteeing its validity or its
               meaning.
             </para>
            
             <para>
               When DotNetZip is used to create a zipfile, it attempts to set this
               field "correctly." For example, if a file ends in ".txt", this field
               will be set. Your application may override that default setting.  When
               writing a zip file, you must set the property before calling
               <c>Save()</c> on the ZipFile.
             </para>
            
             <para>
               When reading a zip file, a more general way to decide just what kind
               of file is contained in a particular entry is to use the file type
               database stored in the operating system.  The operating system stores
               a table that says, a file with .jpg extension is a JPG image file, a
               file with a .xml extension is an XML document, a file with a .txt is a
               pure ASCII text document, and so on.  To get this information on
               Windows, <see
               href="http://www.codeproject.com/KB/cs/GetFileTypeAndIcon.aspx"> you
               need to read and parse the registry.</see> </para>
             </remarks>
            
             <example>
             <code>
             using (var zip = new ZipFile())
             {
                 var e = zip.UpdateFile("Descriptions.mme", "");
                 e.IsText = true;
                 zip.Save(zipPath);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim e2 as ZipEntry = zip.AddFile("Descriptions.mme", "")
                 e.IsText= True
                 zip.Save(zipPath)
             End Using
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract">
             <summary>
               Extract the entry to the filesystem, starting at the current
               working directory.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to
               be the right one for you... If you don't like these, check
               out the <c>ExtractWithPassword()</c> methods.
             </overloads>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.Extract(External.Zip.Internal.ExtractExistingFileAction)"/>
            
             <remarks>
            
             <para>
               This method extracts an entry from a zip file into the current
               working directory.  The path of the entry as extracted is the full
               path as specified in the zip archive, relative to the current
               working directory.  After the file is extracted successfully, the
               file attributes and timestamps are set.
             </para>
            
             <para>
               The action taken when extraction an entry would overwrite an
               existing file is determined by the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"
               /> property.
             </para>
            
             <para>
               Within the call to <c>Extract()</c>, the content for the entry is
               written into a filesystem file, and then the last modified time of the
               file is set according to the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property on
               the entry. See the remarks the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property for
               some details about the last modified time.
             </para>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
               Extract the entry to a file in the filesystem, using the specified
               behavior when extraction would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the file is set after
               extraction.
             </para>
             </remarks>
            
             <param name="extractExistingFile">
               The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(System.IO.Stream)">
             <summary>
               Extracts the entry to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see
               cref="T:System.IO.FileStream"/>, a <see
               cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory.
             </summary>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files,
             into a directory called "textfiles".
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                 {
                   zip[s1].Extract("textfiles");
                 }
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
            
             <remarks>
            
             <para>
               Using this method, existing entries in the filesystem will not be
               overwritten. If you would like to force the overwrite of existing
               files, see the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/> property, or call
               <see cref="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <example>
             <code lang="C#">
             String sZipPath = "Airborne.zip";
             String sFilePath = "Readme.txt";
             String sRootFolder = "Digado";
             using (ZipFile zip = ZipFile.Read(sZipPath))
             {
               if (zip.EntryFileNames.Contains(sFilePath))
               {
                 // use the string indexer on the zip file
                 zip[sFileName].Extract(sRootFolder,
                                        ExtractExistingFileAction.OverwriteSilently);
               }
             }
             </code>
            
             <code lang="VB">
             Dim sZipPath as String = "Airborne.zip"
             Dim sFilePath As String = "Readme.txt"
             Dim sRootFolder As String = "Digado"
             Using zip As ZipFile = ZipFile.Read(sZipPath)
               If zip.EntryFileNames.Contains(sFilePath)
                 ' use the string indexer on the zip file
                 zip(sFilePath).Extract(sRootFolder, _
                                        ExtractExistingFileAction.OverwriteSilently)
               End If
             End Using
             </code>
             </example>
            
             <param name="baseDirectory">the pathname of the base directory</param>
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String)">
             <summary>
               Extract the entry to the filesystem, using the current working directory
               and the specified password.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to be
               the right one for you...
             </overloads>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
            
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see
               cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>property, or call
               <see
               cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property for some
               details about how the "last modified" time of the created file is
               set.
             </para>
             </remarks>
            
             <example>
               In this example, entries that use encryption are extracted using a
               particular password.
             <code>
             using (var zip = ZipFile.Read(FilePath))
             {
                 foreach (ZipEntry e in zip)
                 {
                     if (e.UsesEncryption)
                         e.ExtractWithPassword("Secret!");
                     else
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.UsesEncryption)
                       e.ExtractWithPassword("Secret!")
                     Else
                       e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified password.
             </summary>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String,External.Zip.Internal.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see
               cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>property, or call
               <see
               cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="baseDirectory">The pathname of the base directory.</param>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to a file in the filesystem, relative to the
               current directory, using the specified behavior when extraction
               would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="password">The Password to use for decrypting the entry.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String,External.Zip.Internal.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </remarks>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <param name="extractExistingFile">The action to take if extraction would
             overwrite an existing file.</param>
            
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.IO.Stream,System.String)">
             <summary>
               Extracts the entry to the specified stream, using the specified
               Password.  For example, the caller could extract to Console.Out, or
               to a MemoryStream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see
               cref="T:System.IO.FileStream"/>, a <see
               cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
             <param name="password">
               The password to use for decrypting the entry.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.OpenReader">
             <summary>
               Opens a readable stream corresponding to the zip entry in the
               archive.  The stream decompresses and decrypts as necessary, as it
               is read.
             </summary>
            
             <remarks>
            
             <para>
               DotNetZip offers a variety of ways to extract entries from a zip
               file.  This method allows an application to extract an entry by
               reading a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               The return value is of type <see
               cref="T:External.Zip.Internal.Crc.CrcCalculatorStream"/>.  Use it as you would any
               stream for reading.  When an application calls <see
               cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> on that stream, it will
               receive data from the zip entry that is decrypted and decompressed
               as necessary.
             </para>
            
             <para>
               <c>CrcCalculatorStream</c> adds one additional feature: it keeps a
               CRC32 checksum on the bytes of the stream as it is read.  The CRC
               value is available in the <see
               cref="P:External.Zip.Internal.Crc.CrcCalculatorStream.Crc"/> property on the
               <c>CrcCalculatorStream</c>.  When the read is complete, your
               application
               <em>should</em> check this CRC against the <see cref="P:External.Zip.Internal.ZipEntry.Crc"/>
               property on the <c>ZipEntry</c> to validate the content of the
               ZipEntry. You don't have to validate the entry using the CRC, but
               you should, to verify integrity. Check the example for how to do
               this.
             </para>
            
             <para>
               If the entry is protected with a password, then you need to provide
               a password prior to calling <see cref="M:External.Zip.Internal.ZipEntry.OpenReader"/>, either by
               setting the <see cref="P:External.Zip.Internal.ZipEntry.Password"/> property on the entry, or the
               <see cref="P:External.Zip.Internal.ZipFile.Password"/> property on the <c>ZipFile</c>
               itself. Or, you can use <see cref="M:External.Zip.Internal.ZipEntry.OpenReader(System.String)" />, the
               overload of OpenReader that accepts a password parameter.
             </para>
            
             <para>
               If you want to extract entry data into a write-able stream that is
               already opened, like a <see cref="T:System.IO.FileStream"/>, do not
               use this method. Instead, use <see cref="M:External.Zip.Internal.ZipEntry.Extract(System.IO.Stream)"/>.
             </para>
            
             <para>
               Your application may use only one stream created by OpenReader() at
               a time, and you should not call other Extract methods before
               completing your reads on a stream obtained from OpenReader().  This
               is because there is really only one source stream for the compressed
               content.  A call to OpenReader() seeks in the source stream, to the
               beginning of the compressed content.  A subsequent call to
               OpenReader() on a different entry will seek to a different position
               in the source stream, as will a call to Extract() or one of its
               overloads.  This will corrupt the state for the decompressing stream
               from the original call to OpenReader().
             </para>
            
             <para>
                The <c>OpenReader()</c> method works only when the ZipEntry is
                obtained from an instance of <c>ZipFile</c>. This method will throw
                an exception if the ZipEntry is obtained from a <see
                cref="T:External.Zip.Internal.ZipInputStream"/>.
             </para>
             </remarks>
            
             <example>
               This example shows how to open a zip archive, then read in a named
               entry via a stream. After the read loop is complete, the code
               compares the calculated during the read loop with the expected CRC
               on the <c>ZipEntry</c>, to verify the extraction.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               ZipEntry e1= zip["Elevation.mp3"];
               using (Ionic.Zlib.CrcCalculatorStream s = e1.OpenReader())
               {
                 byte[] buffer = new byte[4096];
                 int n, totalBytesRead= 0;
                 do {
                   n = s.Read(buffer,0, buffer.Length);
                   totalBytesRead+=n;
                 } while (n&gt;0);
                  if (s.Crc32 != e1.Crc32)
                   throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                  if (totalBytesRead != e1.UncompressedSize)
                   throw new Exception(string.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
               }
             }
             </code>
             <code lang="VB">
               Using zip As New ZipFile(ZipFileToRead)
                   Dim e1 As ZipEntry = zip.Item("Elevation.mp3")
                   Using s As Ionic.Zlib.CrcCalculatorStream = e1.OpenReader
                       Dim n As Integer
                       Dim buffer As Byte() = New Byte(4096) {}
                       Dim totalBytesRead As Integer = 0
                       Do
                           n = s.Read(buffer, 0, buffer.Length)
                           totalBytesRead = (totalBytesRead + n)
                       Loop While (n &gt; 0)
                       If (s.Crc32 &lt;&gt; e1.Crc32) Then
                           Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                       End If
                       If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                           Throw New Exception(String.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                       End If
                   End Using
               End Using
             </code>
             </example>
             <seealso cref="M:External.Zip.Internal.ZipEntry.Extract(System.IO.Stream)"/>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.OpenReader(System.String)">
             <summary>
               Opens a readable stream for an encrypted zip entry in the archive.
               The stream decompresses and decrypts as necessary, as it is read.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipEntry.OpenReader"/> method for
               full details. This overload allows the application to specify a
               password for the <c>ZipEntry</c> to be read.
             </para>
             </remarks>
            
             <param name="password">The password to use for decrypting the entry.</param>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ValidateOutput(System.String,System.IO.Stream,System.String@)">
            <summary>
            Validates that the args are consistent.
            </summary>
            <remarks>
            Only one of {baseDir, outStream} can be non-null.
            If baseDir is non-null, then the outputFile is created.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ReadEntry(External.Zip.Internal.ZipContainer,System.Boolean)">
            <summary>
              Reads one <c>ZipEntry</c> from the given stream.  The content for
              the entry does not get decompressed or decrypted.  This method
              basically reads metadata, and seeks.
            </summary>
            <param name="zc">the ZipContainer this entry belongs to.</param>
            <param name="first">
              true of this is the first entry being read from the stream.
            </param>
            <returns>the <c>ZipEntry</c> read from the stream.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.FindExtraFieldSegment(System.Byte[],System.Int32,System.UInt16)">
            <summary>
              Finds a particular segment in the given extra field.
              This is used when modifying a previously-generated
              extra field, in particular when removing the AES crypto
              segment in the extra field.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ProcessExtraField(System.IO.Stream,System.Int16)">
            <summary>
              At current cursor position in the stream, read the extra
              field, and set the properties on the ZipEntry instance
              appropriately.  This can be called when processing the
              Extra field in the Central Directory, or in the local
              header.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.GetEncodedFileNameBytes">
            <summary>
              generate and return a byte array that encodes the filename
              for the entry.
            </summary>
            <remarks>
              <para>
                side effects: generate and store into _CommentBytes the
                byte array for any comment attached to the entry. Also
                sets _actualEncoding to indicate the actual encoding
                used. The same encoding is used for both filename and
                comment.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.PrepSourceStream">
             <summary>
               Stores the position of the entry source stream, or, if the position is
               already stored, seeks to that position.
             </summary>
            
             <remarks>
             <para>
               This method is called in prep for reading the source stream.  If PKZIP
               encryption is used, then we need to calc the CRC32 before doing the
               encryption, because the CRC is used in the 12th byte of the PKZIP
               encryption header.  So, we need to be able to seek backward in the source
               when saving the ZipEntry. This method is called from the place that
               calculates the CRC, and also from the method that does the encryption of
               the file data.
             </para>
            
             <para>
               The first time through, this method sets the _sourceStreamOriginalPosition
               field. Subsequent calls to this method seek to that position.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.CopyMetaData(External.Zip.Internal.ZipEntry)">
            <summary>
            Copy metadata that may have been changed by the app.  We do this when
            resetting the zipFile instance.  If the app calls Save() on a ZipFile, then
            tries to party on that file some more, we may need to Reset() it , which
            means re-reading the entries and then copying the metadata.  I think.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
              Set the input stream and get its length, if possible.  The length is
              used for progress updates, AND, to allow an optimization in case of
              a stream/file of zero length. In that case we skip the Encrypt and
              compression Stream. (like DeflateStream or BZip2OutputStream)
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.PrepOutputStream(System.IO.Stream,System.Int64,External.Zip.Internal.CountingStream@,System.IO.Stream@,System.IO.Stream@,External.Zip.Internal.Crc.CrcCalculatorStream@)">
            <summary>
              Prepare the given stream for output - wrap it in a CountingStream, and
              then in a CRC stream, and an encryptor and deflator as appropriate.
            </summary>
            <remarks>
              <para>
                Previously this was used in ZipEntry.Write(), but in an effort to
                introduce some efficiencies in that method I've refactored to put the
                code inline.  This method still gets called by ZipOutputStream.
              </para>
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.ZipEntryTimestamp">
             <summary>
               An enum that specifies the type of timestamp available on the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The last modified time of a file can be stored in multiple ways in
               a zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               This bit field describes which of the formats were found in a <c>ZipEntry</c> that was read.
             </para>
            
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.DOS">
            <summary>
            A DOS timestamp with 2-second precision.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.Windows">
            <summary>
            A Windows timestamp with 100-ns precision.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.Unix">
            <summary>
            A Unix timestamp with 1-second precision.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.InfoZip1">
            <summary>
            A Unix timestamp with 1-second precision, stored in InfoZip v1 format.  This
            format is outdated and is supported for reading archives only.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.CompressionMethod">
             <summary>
               The method of compression to use for a particular ZipEntry.
             </summary>
            
             <remarks>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               ZIP Specification</see> describes a number of distinct
               cmopression methods that can be used within a zip
               file. DotNetZip supports a subset of them.
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.CompressionMethod.None">
            <summary>
            No compression at all. For COM environments, the value is 0 (zero).
            </summary>
        </member>
        <member name="F:External.Zip.Internal.CompressionMethod.Deflate">
            <summary>
              DEFLATE compression, as described in <see
              href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC
              1951</see>.  This is the "normal" compression used in zip
              files. For COM environments, the value is 8.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipEntrySource">
            <summary>
            An enum that specifies the source of the ZipEntry. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.None">
            <summary>
            Default value.  Invalid on a bonafide ZipEntry.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.FileSystem">
            <summary>
            The entry was instantiated by calling AddFile() or another method that 
            added an entry from the filesystem.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.Stream">
            <summary>
            The entry was instantiated via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)"/> or
            <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/> .
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.ZipFile">
            <summary>
            The ZipEntry was instantiated by reading a zipfile.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.WriteDelegate">
            <summary>
            The content for the ZipEntry will be or was provided by the WriteDelegate.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.JitStream">
            <summary>
            The content for the ZipEntry will be obtained from the stream dispensed by the <c>OpenDelegate</c>.
            The entry was instantiated via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.ZipOutputStream">
            <summary>
            The content for the ZipEntry will be or was obtained from a <c>ZipOutputStream</c>.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipErrorAction">
             <summary>
             An enum providing the options when an error occurs during opening or reading
             of a file or directory that is being saved to a zip file. 
             </summary>
            
             <remarks>
              <para>
                This enum describes the actions that the library can take when an error occurs
                opening or reading a file, as it is being saved into a Zip archive. 
              </para>
            
              <para>
                 In some cases an error will occur when DotNetZip tries to open a file to be
                 added to the zip archive.  In other cases, an error might occur after the
                 file has been successfully opened, while DotNetZip is reading the file.
              </para>
             
              <para>
                The first problem might occur when calling AddDirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened by another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.Throw">
            <summary>
            Throw an exception when an error occurs while zipping.  This is the default
            behavior.  (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.Skip">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            skip the file causing the error, and continue zipping.  (For COM clients,
            this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.Retry">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            retry the operation that caused the error. Be careful with this option. If
            the error is not temporary, the library will retry forever.  (For COM
            clients, this is a 2.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.InvokeErrorEvent">
            <summary>
            When an error occurs, invoke the zipError event.  The event type used is
            <see cref="F:External.Zip.Internal.ZipProgressEventType.Error_Saving"/>.  A typical use of this option:
            a GUI application may wish to pop up a dialog to allow the user to view the
            error that occurred, and choose an appropriate action.  After your
            processing in the error event, if you want to skip the file, set <see
            cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/> on the
            <c>ZipProgressEventArgs.CurrentEntry</c> to <c>Skip</c>.  If you want the
            exception to be thrown, set <c>ZipErrorAction</c> on the <c>CurrentEntry</c>
            to <c>Throw</c>.  If you want to cancel the zip, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            Skip in that a cancel will not save any further entries, if there are any.
            (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipFile">
             <summary>
               The ZipFile type represents a zip archive file.
             </summary>
            
             <remarks>
             <para>
               This is the main type in the DotNetZip class library. This class reads and
               writes zip files, as defined in the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides a general purpose zip file capability.  Use it to read,
               create, or update zip files.  When you want to create zip files using a
               <c>Stream</c> type to write the zip file, you may want to consider the <see
               cref="T:External.Zip.Internal.ZipOutputStream"/> class.
             </para>
            
             <para>
               Both the <c>ZipOutputStream</c> class and the <c>ZipFile</c> class can
               be used to create zip files. Both of them support many of the common zip
               features, including Unicode, different compression methods and levels,
               and ZIP64. They provide very similar performance when creating zip
               files.
             </para>
            
             <para>
               The <c>ZipFile</c> class is generally easier to use than
               <c>ZipOutputStream</c> and should be considered a higher-level interface.  For
               example, when creating a zip file via calls to the <c>PutNextEntry()</c> and
               <c>Write()</c> methods on the <c>ZipOutputStream</c> class, the caller is
               responsible for opening the file, reading the bytes from the file, writing
               those bytes into the <c>ZipOutputStream</c>, setting the attributes on the
               <c>ZipEntry</c>, and setting the created, last modified, and last accessed
               timestamps on the zip entry. All of these things are done automatically by a
               call to <see cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)">ZipFile.AddFile()</see>.
               For this reason, the <c>ZipOutputStream</c> is generally recommended for use
               only when your application emits arbitrary data, not necessarily data from a
               filesystem file, directly into a zip file, and does so using a <c>Stream</c>
               metaphor.
             </para>
            
             <para>
               Aside from the differences in programming model, there are other
               differences in capability between the two classes.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to read and extract zip files, in addition to
                 creating zip files. <c>ZipOutputStream</c> cannot read zip files. If you want
                 to use a stream to read zip files, check out the <see cref="T:External.Zip.Internal.ZipInputStream"/> class.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> does not support the creation of segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> cannot produce a self-extracting archive.
               </item>
             </list>
            
             <para>
               Be aware that the <c>ZipFile</c> class implements the <see
               cref="T:System.IDisposable"/> interface.  In order for <c>ZipFile</c> to
               produce a valid zip file, you use use it within a using clause (<c>Using</c>
               in VB), or call the <c>Dispose()</c> method explicitly.  See the examples
               for how to employ a using clause.
             </para>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddItem(System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method is handy if you are adding things to zip archive and don't
               want to bother distinguishing between directories or files.  Any files are
               added as single entries.  A directory added through this method is added
               recursively: all files and subdirectories contained within the directory
               are added to the <c>ZipFile</c>.
             </para>
            
             <para>
               The name of the item may be a relative path or a fully-qualified
               path. Remember, the items contained in <c>ZipFile</c> instance get written
               to the disk only when you call <see cref="M:External.Zip.Internal.ZipFile.Save"/> or a similar
               save method.
             </para>
            
             <para>
               The directory name used for the file within the archive is the same
               as the directory name (potentially a relative path) specified in the
               <paramref name="fileOrDirectoryName"/>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)"/>
            
             <overloads>This method has two overloads.</overloads>
             <param name="fileOrDirectoryName">
             the name of the file or directory to add.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive,
               explicitly specifying the directory path to be used in the archive.
             </summary>
            
             <remarks>
             <para>
               If adding a directory, the add is recursive on all files and
               subdirectories contained within it.
             </para>
             <para>
               The name of the item may be a relative path or a fully-qualified path.
               The item added by this call to the <c>ZipFile</c> is not read from the
               disk nor written to the zip file archive until the application calls
               Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive, which would override the
               "natural" path of the filesystem file.
             </para>
            
             <para>
               Encryption will be used on the file data if the <c>Password</c> has
               been set on the <c>ZipFile</c> object, prior to calling this method.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
               Thrown if the file or directory passed in does not exist.
             </exception>
            
             <param name="fileOrDirectoryName">the name of the file or directory to add.
             </param>
            
             <param name="directoryPathInArchive">
               The name of the directory path to use within the zip archive.  This path
               need not refer to an extant directory in the current filesystem.  If the
               files within the zip are later extracted, this is the path used for the
               extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the
               path on the fileOrDirectoryName.  Passing the empty string ("") will
               insert the item at the root path within the archive.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <example>
               This example shows how to zip up a set of files into a flat hierarchy,
               regardless of where in the filesystem the files originated. The resulting
               zip archive will contain a toplevel directory named "flat", which itself
               will contain files Readme.txt, MyProposal.docx, and Image1.jpg.  A
               subdirectory under "flat" called SupportFiles will contain all the files
               in the "c:\SupportFiles" directory on disk.
            
             <code>
             String[] itemnames= {
               "c:\\fixedContent\\Readme.txt",
               "MyProposal.docx",
               "c:\\SupportFiles",  // a directory
               "images\\Image1.jpg"
             };
            
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 for (int i = 1; i &lt; itemnames.Length; i++)
                 {
                   // will add Files or Dirs, recurses and flattens subdirectories
                   zip.AddItem(itemnames[i],"flat");
                 }
                 zip.Save(ZipToCreate);
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Dim itemnames As String() = _
                 New String() { "c:\fixedContent\Readme.txt", _
                                "MyProposal.docx", _
                                "SupportFiles", _
                                "images\Image1.jpg" }
               Try
                   Using zip As New ZipFile
                       Dim i As Integer
                       For i = 1 To itemnames.Length - 1
                           ' will add Files or Dirs, recursing and flattening subdirectories.
                           zip.AddItem(itemnames(i), "flat")
                       Next i
                       zip.Save(ZipToCreate)
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString())
               End Try
             </code>
             </example>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFile(System.String)">
             <summary>
               Adds a File to a Zip file archive.
             </summary>
             <remarks>
            
             <para>
               This call collects metadata for the named file in the filesystem,
               including the file attributes and the timestamp, and inserts that metadata
               into the resulting ZipEntry.  Only when the application calls Save() on
               the <c>ZipFile</c>, does DotNetZip read the file from the filesystem and
               then write the content to the zip file archive.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called photos\personal.  The pdf file
               will be included into a folder within the zip called Desktop.
             </para>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("c:\\photos\\personal\\7440-N49th.png");
                    zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf");
                    zip.AddFile("ReadMe.txt");
            
                    zip.Save("Package.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: " + ex1);
                }
             </code>
            
             <code lang="VB">
              Try
                   Using zip As ZipFile = New ZipFile
                       zip.AddFile("c:\photos\personal\7440-N49th.png")
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf")
                       zip.AddFile("ReadMe.txt")
                       zip.Save("Package.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
            
             <overloads>This method has two overloads.</overloads>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)"/>
            
             <param name="fileName">
               The name of the file to add. It should refer to a file in the filesystem.
               The name of the file may be a relative path or a fully-qualified path.
             </param>
             <returns>The <c>ZipEntry</c> corresponding to the File added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)">
             <summary>
               Adds a File to a Zip file archive, potentially overriding the path to be
               used within the zip archive.
             </summary>
            
             <remarks>
             <para>
               The file added by this call to the <c>ZipFile</c> is not written to the
               zip file archive until the application calls Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called images.  The pdf file will be
               included into a folder within the zip called files\docs, and will be
               encrypted with the given password.
             </para>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add.  The name of the file may be a relative path
               or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the fileName.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on the fileName, if any.  Passing the empty string
               ("") will insert the item at the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> corresponding to the file added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{External.Zip.Internal.ZipEntry})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>.
             </summary>
            
             <param name="entriesToRemove">
               A collection of ZipEntry instances from this zip file to be removed. For
               example, you can pass in an array of ZipEntry instances; or you can call
               SelectEntries(), and then add or remove entries from that
               ICollection&lt;ZipEntry&gt; (ICollection(Of ZipEntry) in VB), and pass
               that ICollection to this method.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.SelectEntries(System.String)" />
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)" />
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{System.String})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>, by name.
             </summary>
            
             <param name="entriesToRemove">
               A collection of strings that refer to names of entries to be removed
               from the <c>ZipFile</c>.  For example, you can pass in an array or a
               List of Strings that provide the names of entries to be removed.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.SelectEntries(System.String)" />
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)" />
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               This method adds a set of files to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Use this method to add a set of files to the zip archive, in one call.
               For example, a list of files received from
               <c>System.IO.Directory.GetFiles()</c> can be added to a zip archive in one
               call.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to add. Each string should refer to a
               file in the filesystem. The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <example>
               This example shows how to create a zip file, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               Adds or updates a set of files in the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to update. Each string should refer to a file in
               the filesystem. The name of the file may be a relative path or a fully-qualified path.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the
               specified directory path in the archive.
             </summary>
            
             <remarks>
             <para>
               Any directory structure that may be present in the
               filenames contained in the list is "flattened" in the
               archive.  Each file in the list is added to the archive in
               the specified top-level directory.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see
               cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see
               cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see
               cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their respective values at the
               time of this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to
               a file in the filesystem.  The name of the file may be a
               relative path or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               Th is path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the specified directory
               path in the archive, and preserving the full directory structure in the
               filenames.
             </summary>
            
             <remarks>
            
             <para>
               Think of the <paramref name="directoryPathInArchive"/> as a "root" or
               base directory used in the archive for the files that get added.  when
               <paramref name="preserveDirHierarchy"/> is true, the hierarchy of files
               found in the filesystem will be placed, with the hierarchy intact,
               starting at that root in the archive. When <c>preserveDirHierarchy</c>
               is false, the path hierarchy of files is flattned, and the flattened
               set of files gets placed in the root within the archive as specified in
               <c>directoryPathInArchive</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use as a prefix for each entry name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="preserveDirHierarchy">
               whether the entries in the zip archive will reflect the directory
               hierarchy that is present in the various filenames.  For example, if
               <paramref name="fileNames"/> includes two paths,
               \Animalia\Chordata\Mammalia\Info.txt and
               \Plantae\Magnoliophyta\Dicotyledon\Info.txt, then calling this method
               with <paramref name="preserveDirHierarchy"/> = <c>false</c> will
               result in an exception because of a duplicate entry name, while
               calling this method with <paramref name="preserveDirHierarchy"/> =
               <c>true</c> will result in the full direcory paths being included in
               the entries added to the ZipFile.
             </param>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds or updates a set of files to the <c>ZipFile</c>, using the specified
               directory path in the archive.
             </summary>
            
             <remarks>
            
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add or update. Each string should refer to a
               file in the filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.  The <c>UpdateFile</c> method might more accurately be
               called "AddOrUpdateFile".
             </para>
            
             <para>
               Upon success, there is no way for the application to learn whether the file
               was added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <example>
            
               This example shows how to Update an existing entry in a zipfile. The first
               call to UpdateFile adds the file to the newly-created zip archive.  The
               second call to UpdateFile updates the content for that file in the zip
               archive.
            
             <code>
             using (ZipFile zip1 = new ZipFile())
             {
               // UpdateFile might more accurately be called "AddOrUpdateFile"
               zip1.UpdateFile("MyDocuments\\Readme.txt");
               zip1.UpdateFile("CustomerList.csv");
               zip1.Comment = "This zip archive has been created.";
               zip1.Save("Content.zip");
             }
            
             using (ZipFile zip2 = ZipFile.Read("Content.zip"))
             {
               zip2.UpdateFile("Updates\\Readme.txt");
               zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed.";
               zip2.Save();
             }
            
             </code>
             <code lang="VB">
               Using zip1 As New ZipFile
                   ' UpdateFile might more accurately be called "AddOrUpdateFile"
                   zip1.UpdateFile("MyDocuments\Readme.txt")
                   zip1.UpdateFile("CustomerList.csv")
                   zip1.Comment = "This zip archive has been created."
                   zip1.Save("Content.zip")
               End Using
            
               Using zip2 As ZipFile = ZipFile.Read("Content.zip")
                   zip2.UpdateFile("Updates\Readme.txt")
                   zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed."
                   zip2.Save
               End Using
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.  The entry to be added or
               updated is found by using the specified directory path, combined with the
               basename of the specified filename.
             </para>
            
             <para>
               Upon success, there is no way for the application to learn if the file was
               added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>fileName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>fileName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)">
             <summary>
               Add or update a directory in a zip archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated in
               the zip archive.
             </param>
            
             <returns>
             The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)">
             <summary>
               Add or update a directory in the zip archive at the specified root
               directory in the archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated
               in the zip archive.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>directoryName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>directoryName</c>, if any.  Passing the empty string ("") will insert
               the item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)">
             <summary>
               Add or update a file or directory in the zip archive.
             </summary>
            
             <remarks>
             <para>
               This is useful when the application is not sure or does not care if the
               item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c> if an entry by the same name
               already exists, followed calling by <c>AddItem()</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)"/>
            
             <param name="itemName">
              the path to the file or directory to be added or updated.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)">
             <summary>
               Add or update a file or directory.
             </summary>
            
             <remarks>
             <para>
               This method is useful when the application is not sure or does not care if
               the item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c>, if an entry by that name
               exists, and then calling <c>AddItem()</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used for the item being added to the archive.  The
               entry or entries that are added or updated will use the specified
               <c>DirectoryPathInArchive</c>. Extracting the entry from the archive will
               result in a file stored in that directory path.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="itemName">
               The path for the File or Directory to be added or updated.
             </param>
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>itemName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>itemName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string.
             </summary>
            
             <remarks>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only. The content for the entry is encoded using the default text
               encoding for the machine, or on Silverlight, using UTF-8.
             </remarks>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="entryName">
               The name, including any path, to use for the entry within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
             <example>
            
             This example shows how to add an entry to the zipfile, using a string as
             content for that entry.
            
             <code lang="C#">
             string Content = "This string will be the content of the Readme.txt file in the zip archive.";
             using (ZipFile zip1 = new ZipFile())
             {
               zip1.AddFile("MyDocuments\\Resume.doc", "files");
               zip1.AddEntry("Readme.txt", Content);
               zip1.Comment = "This zip file was created at " + System.DateTime.Now.ToString("G");
               zip1.Save("Content.zip");
             }
            
             </code>
             <code lang="VB">
             Public Sub Run()
               Dim Content As String = "This string will be the content of the Readme.txt file in the zip archive."
               Using zip1 As ZipFile = New ZipFile
                 zip1.AddEntry("Readme.txt", Content)
                 zip1.AddFile("MyDocuments\Resume.doc", "files")
                 zip1.Comment = ("This zip file was created at " &amp; DateTime.Now.ToString("G"))
                 zip1.Save("Content.zip")
               End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string, and using the specified text encoding.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only.
             </para>
            
             <para>
               The content for the entry, a string value, is encoded using the given
               text encoding. A BOM (byte-order-mark) is emitted into the file, if the
               Encoding parameter is set for that.
             </para>
            
             <para>
               Most Encoding classes support a constructor that accepts a boolean,
               indicating whether to emit a BOM or not. For example see <see
               cref="M:System.Text.UTF8Encoding.#ctor(System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the fileName, as specified
               in <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding" />.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)">
             <summary>
               Create an entry in the <c>ZipFile</c> using the given <c>Stream</c>
               as input.  The entry will have the given filename.
             </summary>
            
             <remarks>
            
             <para>
               The application should provide an open, readable stream; in this case it
               will be read during the call to <see cref="M:External.Zip.Internal.ZipFile.Save"/> or one of
               its overloads.
             </para>
            
             <para>
               The passed stream will be read from its current position. If
               necessary, callers should set the position in the stream before
               calling AddEntry(). This might be appropriate when using this method
               with a MemoryStream, for example.
             </para>
            
             <para>
               In cases where a large number of streams will be added to the
               <c>ZipFile</c>, the application may wish to avoid maintaining all of the
               streams open simultaneously.  To handle this situation, the application
               should use the <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>
               overload.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example adds a single entry to a <c>ZipFile</c> via a <c>Stream</c>.
             </para>
            
             <code lang="C#">
             String zipToCreate = "Content.zip";
             String fileNameInArchive = "Content-From-Stream.bin";
             using (System.IO.Stream streamToRead = MyStreamOpener())
             {
               using (ZipFile zip = new ZipFile())
               {
                 ZipEntry entry= zip.AddEntry(fileNameInArchive, streamToRead);
                 zip.AddFile("Readme.txt");
                 zip.Save(zipToCreate);  // the stream is read implicitly here
               }
             }
             </code>
            
             <code lang="VB">
             Dim zipToCreate As String = "Content.zip"
             Dim fileNameInArchive As String = "Content-From-Stream.bin"
             Using streamToRead as System.IO.Stream = MyStreamOpener()
               Using zip As ZipFile = New ZipFile()
                 Dim entry as ZipEntry = zip.AddEntry(fileNameInArchive, streamToRead)
                 zip.AddFile("Readme.txt")
                 zip.Save(zipToCreate)  '' the stream is read implicitly, here
               End Using
             End Using
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.IO.Stream)"/>
            
             <param name="entryName">
               The name, including any path, which is shown in the zip file for the added
               entry.
             </param>
             <param name="stream">
               The input stream from which to grab content for the file
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)">
             <summary>
               Add a ZipEntry for which content is written directly by the application.
             </summary>
            
             <remarks>
             <para>
               When the application needs to write the zip entry data, use this
               method to add the ZipEntry. For example, in the case that the
               application wishes to write the XML representation of a DataSet into
               a ZipEntry, the application can use this method to do so.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             <para>
               About progress events: When using the WriteDelegate, DotNetZip does
               not issue any SaveProgress events with <c>EventType</c> = <see
               cref="F:External.Zip.Internal.ZipProgressEventType.Saving_EntryBytesRead">
               Saving_EntryBytesRead</see>. (This is because it is the
               application's code that runs in WriteDelegate - there's no way for
               DotNetZip to know when to issue a EntryBytesRead event.)
               Applications that want to update a progress bar or similar status
               indicator should do so from within the WriteDelegate
               itself. DotNetZip will issue the other SaveProgress events,
               including <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_Started">
               Saving_Started</see>,
               <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeWriteEntry">
               Saving_BeforeWriteEntry</see>, and <see
               cref="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterWriteEntry">
               Saving_AfterWriteEntry</see>.
             </para>
            
             <para>
               Note: When you use PKZip encryption, it's normally necessary to
               compute the CRC of the content to be encrypted, before compressing or
               encrypting it. Therefore, when using PKZip encryption with a
               WriteDelegate, the WriteDelegate CAN BE called twice: once to compute
               the CRC, and the second time to potentially compress and
               encrypt. Surprising, but true. This is because PKWARE specified that
               the encryption initialization data depends on the CRC.
               If this happens, for each call of the delegate, your
               application must stream the same entry data in its entirety. If your
               application writes different data during the second call, it will
               result in a corrupt zip file.
             </para>
            
             <para>
               The double-read behavior happens with all types of entries, not only
               those that use WriteDelegate. It happens if you add an entry from a
               filesystem file, or using a string, or a stream, or an opener/closer
               pair. But in those cases, DotNetZip takes care of reading twice; in
               the case of the WriteDelegate, the application code gets invoked
               twice. Be aware.
             </para>
            
             <para>
               As you can imagine, this can cause performance problems for large
               streams, and it can lead to correctness problems when you use a
               <c>WriteDelegate</c>. This is a pretty big pitfall.  There are two
               ways to avoid it.  First, and most preferred: don't use PKZIP
               encryption.  If you use the WinZip AES encryption, this problem
               doesn't occur, because the encryption protocol doesn't require the CRC
               up front. Second: if you do choose to use PKZIP encryption, write out
               to a non-seekable stream (like standard output, or the
               Response.OutputStream in an ASP.NET application).  In this case,
               DotNetZip will use an alternative encryption protocol that does not
               rely on the CRC of the content.  This also implies setting bit 3 in
               the zip entry, which still presents problems for some zip tools.
             </para>
            
             <para>
               In the future I may modify DotNetZip to *always* use bit 3 when PKZIP
               encryption is in use.  This seems like a win overall, but there will
               be some work involved.  If you feel strongly about it, visit the
               DotNetZip forums and vote up <see
               href="http://dotnetzip.codeplex.com/workitem/13686">the Workitem
               tracking this issue</see>.
             </para>
            
             </remarks>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="writer">the delegate which will write the entry content</param>
             <returns>the ZipEntry added</returns>
            
             <example>
            
               This example shows an application filling a DataSet, then saving the
               contents of that DataSet as XML, into a ZipEntry in a ZipFile, using an
               anonymous delegate in C#. The DataSet XML is never saved to a disk file.
            
             <code lang="C#">
             var c1= new System.Data.SqlClient.SqlConnection(connstring1);
             var da = new System.Data.SqlClient.SqlDataAdapter()
                 {
                     SelectCommand=  new System.Data.SqlClient.SqlCommand(strSelect, c1)
                 };
            
             DataSet ds1 = new DataSet();
             da.Fill(ds1, "Invoices");
            
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName, (name,stream) => ds1.WriteXml(stream) );
                 zip.Save(zipFileName);
             }
             </code>
             </example>
            
             <example>
            
             This example uses an anonymous method in C# as the WriteDelegate to provide
             the data for the ZipEntry. The example is a bit contrived - the
             <c>AddFile()</c> method is a simpler way to insert the contents of a file
             into an entry in a zip file. On the other hand, if there is some sort of
             processing or transformation of the file contents required before writing,
             the application could use the <c>WriteDelegate</c> to do it, in this way.
            
             <code lang="C#">
             using (var input = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ))
             {
                 using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                 {
                     zip.AddEntry(zipEntryName, (name,output) =>
                         {
                             byte[] buffer = new byte[BufferSize];
                             int n;
                             while ((n = input.Read(buffer, 0, buffer.Length)) != 0)
                             {
                                 // could transform the data here...
                                 output.Write(buffer, 0, n);
                                 // could update a progress bar here
                             }
                         });
            
                     zip.Save(zipFileName);
                 }
             }
             </code>
             </example>
            
             <example>
            
             This example uses a named delegate in VB to write data for the given
             ZipEntry (VB9 does not have anonymous delegates). The example here is a bit
             contrived - a simpler way to add the contents of a file to a ZipEntry is to
             simply use the appropriate <c>AddFile()</c> method.  The key scenario for
             which the <c>WriteDelegate</c> makes sense is saving a DataSet, in XML
             format, to the zip file. The DataSet can write XML to a stream, and the
             WriteDelegate is the perfect place to write into the zip file.  There may be
             other data structures that can write to a stream, but cannot be read as a
             stream.  The <c>WriteDelegate</c> would be appropriate for those cases as
             well.
            
             <code lang="VB">
             Private Sub WriteEntry (ByVal name As String, ByVal output As Stream)
                 Using input As FileStream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                     Dim n As Integer = -1
                     Dim buffer As Byte() = New Byte(BufferSize){}
                     Do While n &lt;&gt; 0
                         n = input.Read(buffer, 0, buffer.Length)
                         output.Write(buffer, 0, n)
                     Loop
                 End Using
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)">
             <summary>
               Add an entry, for which the application will provide a stream
               containing the entry data, on a just-in-time basis.
             </summary>
            
             <remarks>
             <para>
               In cases where the application wishes to open the stream that
               holds the content for the ZipEntry, on a just-in-time basis, the
               application can use this method.  The application provides an
               opener delegate that will be called by the DotNetZip library to
               obtain a readable stream that can be read to get the bytes for
               the given entry.  Typically, this delegate opens a stream.
               Optionally, the application can provide a closer delegate as
               well, which will be called by DotNetZip when all bytes have been
               read from the entry.
             </para>
            
             <para>
               These delegates are called from within the scope of the call to
               ZipFile.Save().
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses anonymous methods in C# to open and close the
               source stream for the content for a zip entry.
            
             <code lang="C#">
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName,
                              (name) =>  File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ),
                              (name, stream) =>  stream.Close()
                              );
            
                 zip.Save(zipFileName);
             }
             </code>
            
             </example>
            
             <example>
            
               This example uses delegates in VB.NET to open and close the
               the source stream for the content for a zip entry.  VB 9.0 lacks
               support for "Sub" lambda expressions, and so the CloseDelegate must
               be an actual, named Sub.
            
             <code lang="VB">
            
             Function MyStreamOpener(ByVal entryName As String) As Stream
                 '' This simply opens a file.  You probably want to do somethinig
                 '' more involved here: open a stream to read from a database,
                 '' open a stream on an HTTP connection, and so on.
                 Return File.OpenRead(entryName)
             End Function
            
             Sub MyStreamCloser(entryName As String, stream As Stream)
                 stream.Close()
             End Sub
            
             Public Sub Run()
                 Dim dirToZip As String = "fodder"
                 Dim zipFileToCreate As String = "Archive.zip"
                 Dim opener As OpenDelegate = AddressOf MyStreamOpener
                 Dim closer As CloseDelegate = AddressOf MyStreamCloser
                 Dim numFilestoAdd As Int32 = 4
                 Using zip As ZipFile = New ZipFile
                     Dim i As Integer
                     For i = 0 To numFilesToAdd - 1
                         zip.AddEntry(String.Format("content-{0:000}.txt"), opener, closer)
                     Next i
                     zip.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="opener">
              the delegate that will be invoked by ZipFile.Save() to get the
              readable stream for the given entry. ZipFile.Save() will call
              read on this stream to obtain the data for the entry. This data
              will then be compressed and written to the newly created zip
              file.
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream. This may
              be null (Nothing in VB), in which case no call is makde to close
              the stream.
             </param>
             <returns>the ZipEntry added</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.String)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given
               string as content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for
               the given file name and directory path, if it exists, and then calling
               <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)" />.  See the documentation for
               that method for further explanation. The string content is encoded
               using the default encoding for the machine, or on Silverlight, using
               UTF-8. This encoding is distinct from the encoding used for the
               filename itself.  See <see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given string as
               content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see
               cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the filename. See <see
               cref="P:External.Zip.Internal.ZipFile.AlternateEncoding" />.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,External.Zip.Internal.WriteDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegate
               as the source for content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see
               cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="writer">the delegate which will write the entry content.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegates
               to open and close the stream that provides the content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see
               cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="opener">
              the delegate that will be invoked to open the stream
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream
             </param>
            
             <returns>The <c>ZipEntry</c> added or updated.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.IO.Stream)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given stream as
               input, and the given filename and given directory Path.
             </summary>
            
             <remarks>
             <para>
               Calling the method is equivalent to calling <c>RemoveEntry()</c> if an
               entry by the same name already exists, and then calling <c>AddEntry()</c>
               with the given <c>fileName</c> and stream.
             </para>
            
             <para>
               The stream must be open and readable during the call to
               <c>ZipFile.Save</c>.  You can dispense the stream on a just-in-time basis
               using the <see cref="P:External.Zip.Internal.ZipEntry.InputStream"/> property. Check the
               documentation of that property for more information.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.InputStream"/>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="stream">The input stream from which to read file data.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.Byte[])">
             <summary>
               Add an entry into the zip archive using the given filename and
               directory path within the archive, and the given content for the
               file. No file is created in the filesystem.
             </summary>
            
             <param name="byteContent">The data to use for the entry.</param>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.Byte[])">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given byte
               array as content for the entry.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c>
               for the given filename and directory path, if it exists, and then
               calling <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.Byte[])" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="byteContent">The content to use for the <c>ZipEntry</c>.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive.
             </summary>
            
             <remarks>
            
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. Any files within the named directory are added to the archive.  Any
               subdirectories within the named directory are also added to the archive,
               recursively.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               If you want the entries to appear in a containing directory in the zip
               archive itself, then you should call the AddDirectory() overload that
               allows you to explicitly specify a directory path for use in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
            
             <overloads>This method has 2 overloads.</overloads>
            
             <param name="directoryName">The name of the directory to add.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive,
               overriding the path to be used for entries in the archive.
             </summary>
            
             <remarks>
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. The add operation is recursive, so that any files or subdirectories
               within the name directory are also added to the archive.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this code, calling the ZipUp() method with a value of "c:\reports" for
               the directory parameter will result in a zip file structure in which all
               entries are contained in a toplevel "reports" directory.
             </para>
            
             <code lang="C#">
             public void ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile())
               {
                 zip.AddDirectory(directory, System.IO.Path.GetFileName(directory));
                 zip.Save(targetZip);
               }
             }
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="directoryName">The name of the directory to add.</param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               DirectoryName.  This path may, or may not, correspond to a real directory
               in the current filesystem.  If the zip is later extracted, this is the
               path used for the extracted file or directory.  Passing <c>null</c>
               (<c>Nothing</c> in VB) or the empty string ("") will insert the items at
               the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddDirectoryByName(System.String)">
             <summary>
               Creates a directory in the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Use this when you want to create a directory in the archive but there is
               no corresponding filesystem representation for that directory.
             </para>
            
             <para>
               You will probably not need to do this in your code. One of the only times
               you will want to do this is if you want an empty directory in the zip
               archive.  The reason: if you add a file to a zip archive that is stored
               within a multi-level directory, all of the directory tree is implicitly
               created in the zip archive.
             </para>
            
             </remarks>
            
             <param name="directoryNameInArchive">
               The name of the directory to create in the archive.
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.CheckZip(System.String)">
             <summary>
               Checks a zip file to see if its directory is consistent.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out
               of synch with the entries in the zip file.  This method checks the
               given zip file and returns true if this has occurred.
             </para>
            
             <para> This method may take a long time to run for large zip files.  </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see
               cref="M:External.Zip.Internal.ComHelper.CheckZip(System.String)">ComHelper.CheckZip(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)">
             <summary>
               Checks a zip file to see if its directory is consistent,
               and optionally fixes the directory if necessary.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out of
               synch with the entries in the zip file.  This method checks the given
               zip file, and returns true if this has occurred. It also optionally
               fixes the zipfile, saving the fixed copy in <em>Name</em>_Fixed.zip.
             </para>
            
             <para>
               This method may take a long time to run for large zip files.  It
               will take even longer if the file actually needs to be fixed, and if
               <c>fixIfNecessary</c> is true.
             </para>
            
             <para>
               This method is not supported in the Reduced or Compact
               Framework versions of DotNetZip.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <param name="fixIfNecessary">If true, the method will fix the zip file if
                 necessary.</param>
            
             <param name="writer">
             a TextWriter in which messages generated while checking will be written.
             </param>
            
             <returns>true if the named zip is OK; false if the file needs to be fixed.</returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)">
             <summary>
               Rewrite the directory within a zipfile.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory in a zip file can get out of
               synch with the entries in the zip file.  This method attempts to fix
               the zip file if this has occurred.
             </para>
            
             <para> This can take a long time for large zip files. </para>
            
             <para> This won't work if the zip file uses a non-standard
             code page - neither IBM437 nor UTF-8. </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see
               cref="M:External.Zip.Internal.ComHelper.FixZipDirectory(System.String)">ComHelper.FixZipDirectory(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.CheckZipPassword(System.String,System.String)">
             <summary>
               Verify the password on a zip file.
             </summary>
            
             <remarks>
               <para>
                 Keep in mind that passwords in zipfiles are applied to
                 zip entries, not to the entire zip file. So testing a
                 zipfile for a particular password doesn't work in the
                 general case. On the other hand, it's often the case
                 that a single password will be used on all entries in a
                 zip file. This method works for that case.
               </para>
               <para>
                 There is no way to check a password without doing the
                 decryption. So this code decrypts and extracts the given
                 zipfile into <see cref="F:System.IO.Stream.Null"/>
               </para>
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>a bool indicating whether the password matches.</returns>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Info">
             <summary>
               Provides a human-readable string with information about the ZipFile.
             </summary>
            
             <remarks>
               <para>
                 The information string contains 10 lines or so, about each ZipEntry,
                 describing whether encryption is in use, the compressed and uncompressed
                 length of the entry, the offset of the entry, and so on. As a result the
                 information string can be very long for zip files that contain many
                 entries.
               </para>
               <para>
                 This information is mostly useful for diagnostic purposes.
               </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.FullScan">
             <summary>
             Indicates whether to perform a full scan of the zip file when reading it.
             </summary>
            
             <remarks>
            
             <para>
               You almost never want to use this property.
             </para>
            
             <para>
               When reading a zip file, if this flag is <c>true</c> (<c>True</c> in
               VB), the entire zip archive will be scanned and searched for entries.
               For large archives, this can take a very, long time. The much more
               efficient default behavior is to read the zip directory, which is
               stored at the end of the zip file. But, in some cases the directory is
               corrupted and you need to perform a full scan of the zip file to
               determine the contents of the zip file. This property lets you do
               that, when necessary.
             </para>
            
             <para>
               This flag is effective only when calling <see
               cref="M:External.Zip.Internal.ZipFile.Initialize(System.String)"/>. Normally you would read a ZipFile with the
               static <see cref="M:External.Zip.Internal.ZipFile.Read(System.String)">ZipFile.Read</see>
               method. But you can't set the <c>FullScan</c> property on the
               <c>ZipFile</c> instance when you use a static factory method like
               <c>ZipFile.Read</c>.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to read a zip file using the full scan approach,
               and then save it, thereby producing a corrected zip file.
            
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.FullScan = true;
                 zip.Initialize(zipFileName);
                 zip.Save(newName);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.FullScan = True
                 zip.Initialize(zipFileName)
                 zip.Save(newName)
             End Using
             </code>
             </example>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.SortEntriesBeforeSaving">
             <summary>
               Whether to sort the ZipEntries before saving the file.
             </summary>
            
             <remarks>
               The default is false.  If you have a large number of zip entries, the sort
               alone can consume significant time.
             </remarks>
            
             <example>
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.AddFiles(filesToAdd);
                 zip.SortEntriesBeforeSaving = true;
                 zip.Save(name);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFiles(filesToAdd)
                 zip.SortEntriesBeforeSaving = True
                 zip.Save(name)
             End Using
             </code>
             </example>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.AddDirectoryWillTraverseReparsePoints">
             <summary>
               Indicates whether NTFS Reparse Points, like junctions, should be
               traversed during calls to <c>AddDirectory()</c>.
             </summary>
            
             <remarks>
               By default, calls to AddDirectory() will traverse NTFS reparse
               points, like mounted volumes, and directory junctions.  An example
               of a junction is the "My Music" directory in Windows Vista.  In some
               cases you may not want DotNetZip to traverse those directories.  In
               that case, set this property to false.
             </remarks>
            
             <example>
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.AddDirectoryWillTraverseReparsePoints = false;
                 zip.AddDirectory(dirToZip,"fodder");
                 zip.Save(zipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.BufferSize">
             <summary>
               Size of the IO buffer used while saving.
             </summary>
            
             <remarks>
            
             <para>
               First, let me say that you really don't need to bother with this.  It is
               here to allow for optimizations that you probably won't make! It will work
               fine if you don't set or get this property at all. Ok?
             </para>
            
             <para>
               Now that we have <em>that</em> out of the way, the fine print: This
               property affects the size of the buffer that is used for I/O for each
               entry contained in the zip file. When a file is read in to be compressed,
               it uses a buffer given by the size here.  When you update a zip file, the
               data for unmodified entries is copied from the first zip file to the
               other, through a buffer given by the size here.
             </para>
            
             <para>
               Changing the buffer size affects a few things: first, for larger buffer
               sizes, the memory used by the <c>ZipFile</c>, obviously, will be larger
               during I/O operations.  This may make operations faster for very much
               larger files.  Last, for any given entry, when you use a larger buffer
               there will be fewer progress events during I/O operations, because there's
               one progress event generated for each time the buffer is filled and then
               emptied.
             </para>
            
             <para>
               The default buffer size is 8k.  Increasing the buffer size may speed
               things up as you compress larger files.  But there are no hard-and-fast
               rules here, eh?  You won't know til you test it.  And there will be a
               limit where ever larger buffers actually slow things down.  So as I said
               in the beginning, it's probably best if you don't set or get this property
               at all.
             </para>
            
             </remarks>
            
             <example>
             This example shows how you might set a large buffer size for efficiency when
             dealing with zip entries that are larger than 1gb.
             <code lang="C#">
             using (ZipFile zip = new ZipFile())
             {
                 zip.SaveProgress += this.zip1_SaveProgress;
                 zip.AddDirectory(directoryToZip, "");
                 zip.UseZip64WhenSaving = Zip64Option.Always;
                 zip.BufferSize = 65536*8; // 65536 * 8 = 512k
                 zip.Save(ZipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during compression.
             </summary>
            
             <remarks>
               <para>
                 When doing ZLIB or Deflate compression, the library fills a buffer,
                 then passes it to the compressor for compression. Then the library
                 reads out the compressed bytes. This happens repeatedly until there
                 is no more uncompressed data to compress. This property sets the
                 size of the buffer that will be used for chunk-wise compression. In
                 order for the setting to take effect, your application needs to set
                 this property before calling one of the <c>ZipFile.Save()</c>
                 overloads.
               </para>
               <para>
                 Setting this affects the performance and memory efficiency of
                 compression and decompression. For larger files, setting this to a
                 larger size may improve compression performance, but the exact
                 numbers vary depending on available memory, the size of the streams
                 you are compressing, and a bunch of other variables. I don't have
                 good firm recommendations on how to set it.  You'll have to test it
                 yourself. Or just leave it alone and accept the default.
               </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.FlattenFoldersOnExtract">
             <summary>
               Indicates whether extracted files should keep their paths as
               stored in the zip archive.
             </summary>
            
             <remarks>
              <para>
                This property affects Extraction.  It is not used when creating zip
                archives.
              </para>
            
              <para>
                With this property set to <c>false</c>, the default, extracting entries
                from a zip file will create files in the filesystem that have the full
                path associated to the entry within the zip file.  With this property set
                to <c>true</c>, extracting entries from the zip file results in files
                with no path: the folders are "flattened."
              </para>
            
              <para>
                An example: suppose the zip file contains entries /directory1/file1.txt and
                /directory2/file2.txt.  With <c>FlattenFoldersOnExtract</c> set to false,
                the files created will be \directory1\file1.txt and \directory2\file2.txt.
                With the property set to true, the files created are file1.txt and file2.txt.
              </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Strategy">
             <summary>
               The compression strategy to use for all entries.
             </summary>
            
             <remarks>
               Set the Strategy used by the ZLIB-compatible compressor, when
               compressing entries using the DEFLATE method. Different compression
               strategies work better on different sorts of data. The strategy
               parameter can affect the compression ratio and the speed of
               compression but not the correctness of the compresssion.  For more
               information see <see
               cref="T:External.Zip.Internal.Zlib.CompressionStrategy">Ionic.Zlib.CompressionStrategy</see>.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Name">
             <summary>
               The name of the <c>ZipFile</c>, on disk.
             </summary>
            
             <remarks>
            
             <para>
               When the <c>ZipFile</c> instance was created by reading an archive using
               one of the <c>ZipFile.Read</c> methods, this property represents the name
               of the zip file that was read.  When the <c>ZipFile</c> instance was
               created by using the no-argument constructor, this value is <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
            
             <para>
               If you use the no-argument constructor, and you then explicitly set this
               property, when you call <see cref="M:External.Zip.Internal.ZipFile.Save"/>, this name will
               specify the name of the zip file created.  Doing so is equivalent to
               calling <see cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/>.  When instantiating a
               <c>ZipFile</c> by reading from a stream or byte array, the <c>Name</c>
               property remains <c>null</c>.  When saving to a stream, the <c>Name</c>
               property is implicitly set to <c>null</c>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CompressionLevel">
             <summary>
               Sets the compression level to be used for entries subsequently added to
               the zip archive.
             </summary>
            
             <remarks>
              <para>
                Varying the compression level used on entries can affect the
                size-vs-speed tradeoff when compression and decompressing data streams
                or files.
              </para>
            
              <para>
                As with some other properties on the <c>ZipFile</c> class, like <see
                cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, and <see
                cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, setting this property on a <c>ZipFile</c>
                instance will cause the specified <c>CompressionLevel</c> to be used on all
                <see cref="T:External.Zip.Internal.ZipEntry"/> items that are subsequently added to the
                <c>ZipFile</c> instance. If you set this property after you have added
                items to the <c>ZipFile</c>, but before you have called <c>Save()</c>,
                those items will not use the specified compression level.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CompressionMethod">
            <summary>
              The compression method for the zipfile.
            </summary>
            <remarks>
              <para>
                By default, the compression method is <c>CompressionMethod.Deflate.</c>
              </para>
            </remarks>
            <seealso cref="T:External.Zip.Internal.CompressionMethod" />
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Comment">
             <summary>
               A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               This property is read/write. It allows the application to specify a
               comment for the <c>ZipFile</c>, or read the comment for the
               <c>ZipFile</c>.  After setting this property, changes are only made
               permanent when you call a <c>Save()</c> method.
             </para>
            
             <para>
               According to <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see>, the comment is not encrypted, even if there is a
               password set on the zip file.
             </para>
            
             <para>
               The specification does not describe how to indicate the encoding used
               on a comment string. Many "compliant" zip tools and libraries use
               IBM437 as the code page for comments; DotNetZip, too, follows that
               practice.  On the other hand, there are situations where you want a
               Comment to be encoded with something else, for example using code page
               950 "Big-5 Chinese". To fill that need, DotNetZip will encode the
               comment following the same procedure it follows for encoding
               filenames: (a) if <see cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/> is
               <c>Never</c>, it uses the default encoding (IBM437). (b) if <see
               cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/> is <c>Always</c>, it always uses the
               alternate encoding (<see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/>). (c) if <see
               cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/> is <c>AsNecessary</c>, it uses the
               alternate encoding only if the default encoding is not sufficient for
               encoding the comment - in other words if decoding the result does not
               produce the original string.  This decision is taken at the time of
               the call to <c>ZipFile.Save()</c>.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding" /> between each
               entry you add, and between adding entries and the call to
               <c>Save()</c>. Don't do this.  It will likely result in a zip file that is
               not readable by any tool or application.  For best interoperability, leave
               <see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/> alone, or specify it only
               once, before adding any entries to the <c>ZipFile</c> instance.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for entries
               added to the zip file will be emitted in &#147;Windows format&#148;
               when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entries should or should not be stored
               in the zip archive in the format used by Windows. By default this flag is
               <c>true</c>, meaning the Windows-format times are stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see
               cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified (<see
               cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are
               automatically set from the filesystem values. When adding an entry from a
               stream or string, all three values are implicitly set to
               <c>DateTime.Now</c>.  Applications can also explicitly set those times by
               calling <see cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since January 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since January 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455, although you probably don't need to know that.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe <see href="http://www.info-zip.org/">the Infozip
               tools</see> can read the Unix format timestamps. Some tools and libraries
               may be able to read only one or the other. DotNetZip can read or write
               times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see
               cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               The value set here applies to all entries subsequently added to the
               <c>ZipFile</c>.
             </para>
            
             <para>
               This property is not mutually exclusive of the <see
               cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving" /> property. It is possible and
               legal and valid to produce a zip file that contains timestamps encoded in
               the Unix format as well as in the Windows format, in addition to the <see
               cref="P:External.Zip.Internal.ZipEntry.LastModified">LastModified</see> time attached to each
               entry in the archive, a time that is always stored in "DOS format". And,
               notwithstanding the names PKWare uses for these time formats, any of them
               can be read and written by any computer, on any operating system.  But,
               there are no guarantees that a program running on Mac or Linux will
               gracefully handle a zip file with "Windows" formatted times, or that an
               application that does not use DotNetZip but runs on Windows will be able to
               handle file times in Unix format.
             </para>
            
             <para>
               When in doubt, test.  Sorry, I haven't got a complete list of tools and
               which sort of timestamps they can use and will tolerate.  If you get any
               good information and would like to pass it on, please do so and I will
               include that information in this documentation.
             </para>
             </remarks>
            
             <example>
               This example shows how to save a zip file that contains file timestamps
               in a format normally used by Unix.
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 // produce a zip file the Mac will like
                 zip.EmitTimesInWindowsFormatWhenSaving = false;
                 zip.EmitTimesInUnixFormatWhenSaving = true;
                 zip.AddDirectory(directoryToZip, "files");
                 zip.Save(outputFile);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 '' produce a zip file the Mac will like
                 zip.EmitTimesInWindowsFormatWhenSaving = False
                 zip.EmitTimesInUnixFormatWhenSaving = True
                 zip.AddDirectory(directoryToZip, "files")
                 zip.Save(outputFile)
             End Using
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving" />
             <seealso cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving" />
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving">
             <summary>
             Specifies whether the Creation, Access, and Modified times
             for entries added to the zip file will be emitted in "Unix(tm)
             format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entries should or should not be stored
               in the zip archive in the format used by Unix. By default this flag is
               <c>false</c>, meaning the Unix-format times are not stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see
               cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified (<see
               cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are
               automatically set from the filesystem values. When adding an entry from a
               stream or string, all three values are implicitly set to DateTime.Now.
               Applications can also explicitly set those times by calling <see
               cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since January 1, 1601 UTC.  The other is a format Unix applications
               typically use: seconds since January 1, 1970 UTC.  Each format can be
               stored in an "extra field" in the zip entry when saving the zip
               archive. The former uses an extra field with a Header Id of 0x000A, while
               the latter uses a header ID of 0x5455, although you probably don't need to
               know that.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Some tools and libraries may be
               able to read only one or the other.  DotNetZip can read or write times in
               either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see
               cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive of the <see
               cref="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving" /> property. It is possible and
               legal and valid to produce a zip file that contains timestamps encoded in
               the Unix format as well as in the Windows format, in addition to the <see
               cref="P:External.Zip.Internal.ZipEntry.LastModified">LastModified</see> time attached to each
               entry in the zip archive, a time that is always stored in "DOS
               format". And, notwithstanding the names PKWare uses for these time
               formats, any of them can be read and written by any computer, on any
               operating system.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle a zip file with "Windows" formatted
               times, or that an application that does not use DotNetZip but runs on
               Windows will be able to handle file times in Unix format.
             </para>
            
             <para>
               When in doubt, test.  Sorry, I haven't got a complete list of tools and
               which sort of timestamps they can use and will tolerate.  If you get any
               good information and would like to pass it on, please do so and I will
               include that information in this documentation.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving" />
             <seealso cref="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving" />
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Verbose">
             <summary>
               Indicates whether verbose output is sent to the <see
               cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/> during <c>AddXxx()</c> and
               <c>ReadXxx()</c> operations.
             </summary>
            
             <remarks>
               This is a <em>synthetic</em> property.  It returns true if the <see
               cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/> is non-null.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name exists in the ZipFile.
             </summary>
            
             <param name='name'>the name of the entry to find</param>
             <returns>true if an entry with the given name exists; otherwise false.
             </returns>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CaseSensitiveRetrieval">
             <summary>
               Indicates whether to perform case-sensitive matching on the filename when
               retrieving entries in the zipfile via the string-based indexer.
             </summary>
            
             <remarks>
               The default value is <c>false</c>, which means don't do case-sensitive
               matching. In other words, retrieving zip["ReadMe.Txt"] is the same as
               zip["readme.txt"].  It really makes sense to set this to <c>true</c> only
               if you are not running on Windows, which has case-insensitive
               filenames. But since this library is not built for non-Windows platforms,
               in most cases you should just leave this property alone.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.UseUnicodeAsNecessary">
             <summary>
               Indicates whether to encode entry filenames and entry comments using Unicode
               (UTF-8).
             </summary>
            
             <remarks>
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               PKWare zip specification</see> provides for encoding file names and file
               comments in either the IBM437 code page, or in UTF-8.  This flag selects
               the encoding according to that specification.  By default, this flag is
               false, and filenames and comments are encoded into the zip file in the
               IBM437 codepage.  Setting this flag to true will specify that filenames
               and comments that cannot be encoded with IBM437 will be encoded with
               UTF-8.
             </para>
            
             <para>
               Zip files created with strict adherence to the PKWare specification with
               respect to UTF-8 encoding can contain entries with filenames containing
               any combination of Unicode characters, including the full range of
               characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many other
               alphabets.  However, because at this time, the UTF-8 portion of the PKWare
               specification is not broadly supported by other zip libraries and
               utilities, such zip files may not be readable by your favorite zip tool or
               archiver. In other words, interoperability will decrease if you set this
               flag to true.
             </para>
            
             <para>
               In particular, Zip files created with strict adherence to the PKWare
               specification with respect to UTF-8 encoding will not work well with
               Explorer in Windows XP or Windows Vista, because Windows compressed
               folders, as far as I know, do not support UTF-8 in zip files.  Vista can
               read the zip files, but shows the filenames incorrectly. Unpacking from
               Windows Vista Explorer will result in filenames that have rubbish
               characters in place of the high-order UTF-8 bytes.
             </para>
            
             <para>
               Also, zip files that use UTF-8 encoding will not work well with Java
               applications that use the java.util.zip classes, as of v5.0 of the Java
               runtime. The Java runtime does not correctly implement the PKWare
               specification in this regard.
             </para>
            
             <para>
               As a result, we have the unfortunate situation that "correct" behavior by
               the DotNetZip library with regard to Unicode encoding of filenames during
               zip creation will result in zip files that are readable by strictly
               compliant and current tools (for example the most recent release of the
               commercial WinZip tool); but these zip files will not be readable by
               various other tools or libraries, including Windows Explorer.
             </para>
            
             <para>
               The DotNetZip library can read and write zip files with UTF8-encoded
               entries, according to the PKware spec.  If you use DotNetZip for both
               creating and reading the zip file, and you use UTF-8, there will be no
               loss of information in the filenames. For example, using a self-extractor
               created by this library will allow you to unpack files correctly with no
               loss of information in the filenames.
             </para>
            
             <para>
               If you do not set this flag, it will remain false.  If this flag is false,
               your <c>ZipFile</c> will encode all filenames and comments using the
               IBM437 codepage.  This can cause "loss of information" on some filenames,
               but the resulting zipfile will be more interoperable with other
               utilities. As an example of the loss of information, diacritics can be
               lost.  The o-tilde character will be down-coded to plain o.  The c with a
               cedilla (Unicode 0xE7) used in Portugese will be downcoded to a c.
               Likewise, the O-stroke character (Unicode 248), used in Danish and
               Norwegian, will be down-coded to plain o. Chinese characters cannot be
               represented in codepage IBM437; when using the default encoding, Chinese
               characters in filenames will be represented as ?. These are all examples
               of "information loss".
             </para>
            
             <para>
               The loss of information associated to the use of the IBM437 encoding is
               inconvenient, and can also lead to runtime errors. For example, using
               IBM437, any sequence of 4 Chinese characters will be encoded as ????.  If
               your application creates a <c>ZipFile</c>, then adds two files, each with
               names of four Chinese characters each, this will result in a duplicate
               filename exception.  In the case where you add a single file with a name
               containing four Chinese characters, calling Extract() on the entry that
               has question marks in the filename will result in an exception, because
               the question mark is not legal for use within filenames on Windows.  These
               are just a few examples of the problems associated to loss of information.
             </para>
            
             <para>
               This flag is independent of the encoding of the content within the entries
               in the zip file. Think of the zip file as a container - it supports an
               encoding.  Within the container are other "containers" - the file entries
               themselves.  The encoding within those entries is independent of the
               encoding of the zip archive container for those entries.
             </para>
            
             <para>
               Rather than specify the encoding in a binary fashion using this flag, an
               application can specify an arbitrary encoding via the <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> property.  Setting the encoding
               explicitly when creating zip archives will result in non-compliant zip
               files that, curiously, are fairly interoperable.  The challenge is, the
               PKWare specification does not provide for a way to specify that an entry
               in a zip archive uses a code page that is neither IBM437 nor UTF-8.
               Therefore if you set the encoding explicitly when creating a zip archive,
               you must take care upon reading the zip archive to use the same code page.
               If you get it wrong, the behavior is undefined and may result in incorrect
               filenames, exceptions, stomach upset, hair loss, and acne.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving">
             <summary>
               Specify whether to use ZIP64 extensions when saving a zip archive.
             </summary>
            
             <remarks>
            
             <para>
               When creating a zip file, the default value for the property is <see
               cref="F:External.Zip.Internal.Zip64Option.Never"/>. <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> is
               safest, in the sense that you will not get an Exception if a pre-ZIP64
               limit is exceeded.
             </para>
            
             <para>
               You may set the property at any time before calling Save().
             </para>
            
             <para>
               When reading a zip file via the <c>Zipfile.Read()</c> method, DotNetZip
               will properly read ZIP64-endowed zip archives, regardless of the value of
               this property.  DotNetZip will always read ZIP64 archives.  This property
               governs only whether DotNetZip will write them. Therefore, when updating
               archives, be careful about setting this property after reading an archive
               that may use ZIP64 extensions.
             </para>
            
             <para>
               An interesting question is, if you have set this property to
               <c>AsNecessary</c>, and then successfully saved, does the resulting
               archive use ZIP64 extensions or not?  To learn this, check the <see
               cref="P:External.Zip.Internal.ZipFile.OutputUsedZip64"/> property, after calling <c>Save()</c>.
             </para>
            
             <para>
               Have you thought about
               <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">donating</see>?
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.RequiresZip64">
             <summary>
               Indicates whether the archive requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para>
               This property is <c>null</c> (or <c>Nothing</c> in VB) if the archive has
               not been saved, and there are fewer than 65334 <c>ZipEntry</c> items
               contained in the archive.
             </para>
            
             <para>
               The <c>Value</c> is true if any of the following four conditions holds:
               the uncompressed size of any entry is larger than 0xFFFFFFFF; the
               compressed size of any entry is larger than 0xFFFFFFFF; the relative
               offset of any entry within the zip archive is larger than 0xFFFFFFFF; or
               there are more than 65534 entries in the archive.  (0xFFFFFFFF =
               4,294,967,295).  The result may not be known until a <c>Save()</c> is attempted
               on the zip archive.  The Value of this <see cref="T:System.Nullable"/>
               property may be set only AFTER one of the Save() methods has been called.
             </para>
            
             <para>
               If none of the four conditions holds, and the archive has been saved, then
               the <c>Value</c> is false.
             </para>
            
             <para>
               A <c>Value</c> of false does not indicate that the zip archive, as saved,
               does not use ZIP64.  It merely indicates that ZIP64 is not required.  An
               archive may use ZIP64 even when not required if the <see
               cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property is set to <see
               cref="F:External.Zip.Internal.Zip64Option.Always"/>, or if the <see
               cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property is set to <see
               cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> and the output stream was not
               seekable. Use the <see cref="P:External.Zip.Internal.ZipFile.OutputUsedZip64"/> property to determine if
               the most recent <c>Save()</c> method resulted in an archive that utilized
               the ZIP64 extensions.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.OutputUsedZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.OutputUsedZip64">
             <summary>
               Indicates whether the most recent <c>Save()</c> operation used ZIP64 extensions.
             </summary>
            
             <remarks>
             <para>
               The use of ZIP64 extensions within an archive is not always necessary, and
               for interoperability concerns, it may be desired to NOT use ZIP64 if
               possible.  The <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property can be
               set to use ZIP64 extensions only when necessary.  In those cases,
               Sometimes applications want to know whether a Save() actually used ZIP64
               extensions.  Applications can query this read-only property to learn
               whether ZIP64 has been used in a just-saved <c>ZipFile</c>.
             </para>
            
             <para>
               The value is <c>null</c> (or <c>Nothing</c> in VB) if the archive has not
               been saved.
             </para>
            
             <para>
               Non-null values (<c>HasValue</c> is true) indicate whether ZIP64
               extensions were used during the most recent <c>Save()</c> operation.  The
               ZIP64 extensions may have been used as required by any particular entry
               because of its uncompressed or compressed size, or because the archive is
               larger than 4294967295 bytes, or because there are more than 65534 entries
               in the archive, or because the <c>UseZip64WhenSaving</c> property was set
               to <see cref="F:External.Zip.Internal.Zip64Option.Always"/>, or because the
               <c>UseZip64WhenSaving</c> property was set to <see
               cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> and the output stream was not seekable.
               The value of this property does not indicate the reason the ZIP64
               extensions were used.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.InputUsesZip64">
             <summary>
               Indicates whether the most recent <c>Read()</c> operation read a zip file that uses
               ZIP64 extensions.
             </summary>
            
             <remarks>
               This property will return null (Nothing in VB) if you've added an entry after reading
               the zip file.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when writing new entries to the <c>ZipFile</c>,
               for those entries that cannot be encoded with the default (IBM437)
               encoding; or, the text encoding that was used when reading the entries
               from the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to write zip archives that will be read by one of
               these other archivers, set this property to specify the code page to use
               when encoding the <see cref="P:External.Zip.Internal.ZipEntry.FileName"/> and <see
               cref="P:External.Zip.Internal.ZipEntry.Comment"/> for each <c>ZipEntry</c> in the zip file, for
               values that cannot be encoded with the default codepage for zip files,
               IBM437.  This is why this property is "provisional".  In all cases, IBM437
               is used where possible, in other words, where no loss of data would
               result. It is possible, therefore, to have a given entry with a
               <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with the
               specified "provisional" codepage.
             </para>
            
             <para>
               Be aware that a zip file created after you've explicitly set the <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding" /> property to a value other than
               IBM437 may not be compliant to the PKWare specification, and may not be
               readable by compliant archivers.  On the other hand, many (most?)
               archivers are non-compliant and can read zip files created in arbitrary
               code pages.  The trick is to use or specify the proper codepage when
               reading the zip.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding" /> between each
               entry you add, and between adding entries and the call to
               <c>Save()</c>. Don't do this. It will likely result in a zipfile that is
               not readable.  For best interoperability, either leave <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding" /> alone, or specify it only once,
               before adding any entries to the <c>ZipFile</c> instance.  There is one
               exception to this recommendation, described later.
             </para>
            
             <para>
               When using an arbitrary, non-UTF8 code page for encoding, there is no
               standard way for the creator application - whether DotNetZip, WinZip,
               WinRar, or something else - to formally specify in the zip file which
               codepage has been used for the entries. As a result, readers of zip files
               are not able to inspect the zip file and determine the codepage that was
               used for the entries contained within it.  It is left to the application
               or user to determine the necessary codepage when reading zip files encoded
               this way.  In other words, if you explicitly specify the codepage when you
               create the zipfile, you must explicitly specify the same codepage when
               reading the zipfile.
             </para>
            
             <para>
               The way you specify the code page to use when reading a zip file varies
               depending on the tool or library you use to read the zip.  In DotNetZip,
               you use a ZipFile.Read() method that accepts an encoding parameter.  It
               isn't possible with Windows Explorer, as far as I know, to specify an
               explicit codepage to use when reading a zip.  If you use an incorrect
               codepage when reading a zipfile, you will get entries with filenames that
               are incorrect, and the incorrect filenames may even contain characters
               that are not legal for use within filenames in Windows. Extracting entries
               with illegal characters in the filenames will lead to exceptions. It's too
               bad, but this is just the way things are with code pages in zip
               files. Caveat Emptor.
             </para>
            
             <para>
               Example: Suppose you create a zipfile that contains entries with
               filenames that have Danish characters.  If you use <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding" /> equal to "iso-8859-1" (cp 28591),
               the filenames will be correctly encoded in the zip.  But, to read that
               zipfile correctly, you have to specify the same codepage at the time you
               read it. If try to read that zip file with Windows Explorer or another
               application that is not flexible with respect to the codepage used to
               decode filenames in zipfiles, you will get a filename like "Inf°.txt".
             </para>
            
             <para>
               When using DotNetZip to read a zip archive, and the zip archive uses an
               arbitrary code page, you must specify the encoding to use before or when
               the <c>Zipfile</c> is READ.  This means you must use a <c>ZipFile.Read()</c>
               method that allows you to specify a System.Text.Encoding parameter.  Setting
               the ProvisionalAlternateEncoding property after your application has read in
               the zip archive will not affect the entry names of entries that have already
               been read in.
             </para>
            
             <para>
               And now, the exception to the rule described above.  One strategy for
               specifying the code page for a given zip file is to describe the code page
               in a human-readable form in the Zip comment. For example, the comment may
               read "Entries in this archive are encoded in the Big5 code page".  For
               maximum interoperability, the zip comment in this case should be encoded
               in the default, IBM437 code page.  In this case, the zip comment is
               encoded using a different page than the filenames.  To do this, Specify
               <c>ProvisionalAlternateEncoding</c> to your desired region-specific code
               page, once before adding any entries, and then reset
               <c>ProvisionalAlternateEncoding</c> to IBM437 before setting the <see
               cref="P:External.Zip.Internal.ZipFile.Comment"/> property and calling Save().
             </para>
             </remarks>
            
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page
             (950), and extract each entry in the zip file.  For this code to work as
             desired, the <c>Zipfile</c> must have been created using the big5 code page
             (CP950). This is typical, for example, when using WinRar on a machine with
             CP950 set as the default code page.  In that case, the names of entries
             within the Zip archive will be stored in that code page, and reading the zip
             archive must be done using that code page.  If the application did not use
             the correct code page in <c>ZipFile.Read()</c>, then names of entries within the
             zip archive would not be correctly retrieved.
             <code>
             using (var zip = ZipFile.Read(zipFileName, System.Text.Encoding.GetEncoding("big5")))
             {
                 // retrieve and extract an entry using a name encoded with CP950
                 zip[MyDesiredEntry].Extract("unpack");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipToExtract, System.Text.Encoding.GetEncoding("big5"))
                 ' retrieve and extract an entry using a name encoded with CP950
                 zip(MyDesiredEntry).Extract("unpack")
             End Using
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.DefaultEncoding">DefaultEncoding</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.AlternateEncoding">
            <summary>
              A Text Encoding to use when encoding the filenames and comments for
              all the ZipEntry items, during a ZipFile.Save() operation.
            </summary>
            <remarks>
              <para>
                Whether the encoding specified here is used during the save depends
                on <see cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/>.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage">
            <summary>
              A flag that tells if and when this instance should apply
              AlternateEncoding to encode the filenames and comments associated to
              of ZipEntry objects contained within this instance.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also
            known as IBM437.
            </summary>
            <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter">
             <summary>
             Gets or sets the <c>TextWriter</c> to which status messages are delivered
             for the instance.
             </summary>
            
             <remarks>
               If the TextWriter is set to a non-null value, then verbose output is sent
               to the <c>TextWriter</c> during <c>Add</c><c>, Read</c><c>, Save</c> and
               <c>Extract</c> operations.  Typically, console applications might use
               <c>Console.Out</c> and graphical or headless applications might use a
               <c>System.IO.StringWriter</c>. The output of this is suitable for viewing
               by humans.
             </remarks>
            
             <example>
             <para>
               In this example, a console application instantiates a <c>ZipFile</c>, then
               sets the <c>StatusMessageTextWriter</c> to <c>Console.Out</c>.  At that
               point, all verbose status messages for that <c>ZipFile</c> are sent to the
               console.
             </para>
            
             <code lang="C#">
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= System.Console.Out;
               // messages are sent to the console during extraction
               zip.ExtractAll();
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= System.Console.Out
               'Status Messages will be sent to the console during extraction
               zip.ExtractAll()
             End Using
             </code>
            
             <para>
               In this example, a Windows Forms application instantiates a
               <c>ZipFile</c>, then sets the <c>StatusMessageTextWriter</c> to a
               <c>StringWriter</c>.  At that point, all verbose status messages for that
               <c>ZipFile</c> are sent to the <c>StringWriter</c>.
             </para>
            
             <code lang="C#">
             var sw = new System.IO.StringWriter();
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= sw;
               zip.ExtractAll();
             }
             Console.WriteLine("{0}", sw.ToString());
             </code>
            
             <code lang="VB">
             Dim sw as New System.IO.StringWriter
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= sw
               zip.ExtractAll()
             End Using
             'Status Messages are now available in sw
            
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.TempFileFolder">
             <summary>
               Gets or sets the name for the folder to store the temporary file
               this library writes when saving a zip archive.
             </summary>
            
             <remarks>
             <para>
               This library will create a temporary file when saving a Zip archive to a
               file.  This file is written when calling one of the <c>Save()</c> methods
               that does not save to a stream, or one of the <c>SaveSelfExtractor()</c>
               methods.
             </para>
            
             <para>
               By default, the library will create the temporary file in the directory
               specified for the file itself, via the <see cref="P:External.Zip.Internal.ZipFile.Name"/> property or via
               the <see cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/> method.
             </para>
            
             <para>
               Setting this property allows applications to override this default
               behavior, so that the library will create the temporary file in the
               specified folder. For example, to have the library create the temporary
               file in the current working directory, regardless where the <c>ZipFile</c>
               is saved, specfy ".".  To revert to the default behavior, set this
               property to <c>null</c> (<c>Nothing</c> in VB).
             </para>
            
             <para>
               When setting the property to a non-null value, the folder specified must
               exist; if it does not an exception is thrown.  The application should have
               write and delete permissions on the folder.  The permissions are not
               explicitly checked ahead of time; if the application does not have the
               appropriate rights, an exception will be thrown at the time <c>Save()</c>
               is called.
             </para>
            
             <para>
               There is no temporary file created when reading a zip archive.  When
               saving to a Stream, there is no temporary file created.  For example, if
               the application is an ASP.NET application and calls <c>Save()</c>
               specifying the <c>Response.OutputStream</c> as the output stream, there is
               no temporary file created.
             </para>
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
             Thrown when setting the property if the directory does not exist.
             </exception>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Password">
             <summary>
             Sets the password to be used on the <c>ZipFile</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When writing a zip archive, this password is applied to the entries, not
               to the zip archive itself. It applies to any <c>ZipEntry</c> subsequently
               added to the <c>ZipFile</c>, using one of the <c>AddFile</c>,
               <c>AddDirectory</c>, <c>AddEntry</c>, or <c>AddItem</c> methods, etc.
               When reading a zip archive, this property applies to any entry
               subsequently extracted from the <c>ZipFile</c> using one of the Extract
               methods on the <c>ZipFile</c> class.
             </para>
            
             <para>
               When writing a zip archive, keep this in mind: though the password is set
               on the ZipFile object, according to the Zip spec, the "directory" of the
               archive - in other words the list of entries or files contained in the archive - is
               not encrypted with the password, or protected in any way.  If you set the
               Password property, the password actually applies to individual entries
               that are added to the archive, subsequent to the setting of this property.
               The list of filenames in the archive that is eventually created will
               appear in clear text, but the contents of the individual files are
               encrypted.  This is how Zip encryption works.
             </para>
            
             <para>
               One simple way around this limitation is to simply double-wrap sensitive
               filenames: Store the files in a zip file, and then store that zip file
               within a second, "outer" zip file.  If you apply a password to the outer
               zip file, then readers will be able to see that the outer zip file
               contains an inner zip file.  But readers will not be able to read the
               directory or file list of the inner zip file.
             </para>
            
             <para>
               If you set the password on the <c>ZipFile</c>, and then add a set of files
               to the archive, then each entry is encrypted with that password.  You may
               also want to change the password between adding different entries. If you
               set the password, add an entry, then set the password to <c>null</c>
               (<c>Nothing</c> in VB), and add another entry, the first entry is
               encrypted and the second is not.  If you call <c>AddFile()</c>, then set
               the <c>Password</c> property, then call <c>ZipFile.Save</c>, the file
               added will not be password-protected, and no warning will be generated.
             </para>
            
             <para>
               When setting the Password, you may also want to explicitly set the <see
               cref="P:External.Zip.Internal.ZipFile.Encryption"/> property, to specify how to encrypt the entries added
               to the ZipFile.  If you set the Password to a non-null value and do not
               set <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.
               This encryption is relatively weak but is very interoperable. If you set
               the password to a <c>null</c> value (<c>Nothing</c> in VB), Encryption is
               reset to None.
             </para>
            
             <para>
               All of the preceding applies to writing zip archives, in other words when
               you use one of the Save methods.  To use this property when reading or an
               existing ZipFile, do the following: set the Password property on the
               <c>ZipFile</c>, then call one of the Extract() overloads on the <see
               cref="T:External.Zip.Internal.ZipEntry" />. In this case, the entry is extracted using the
               <c>Password</c> that is specified on the <c>ZipFile</c> instance. If you
               have not set the <c>Password</c> property, then the password is
               <c>null</c>, and the entry is extracted with no password.
             </para>
            
             <para>
               If you set the Password property on the <c>ZipFile</c>, then call
               <c>Extract()</c> an entry that has not been encrypted with a password, the
               password is not used for that entry, and the <c>ZipEntry</c> is extracted
               as normal. In other words, the password is used only if necessary.
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.ZipEntry"/> class also has a <see
               cref="P:External.Zip.Internal.ZipEntry.Password">Password</see> property.  It takes precedence
               over this property on the <c>ZipFile</c>.  Typically, you would use the
               per-entry Password when most entries in the zip archive use one password,
               and a few entries use a different password.  If all entries in the zip
               file use the same password, then it is simpler to just set this property
               on the <c>ZipFile</c> itself, whether creating a zip archive or extracting
               a zip archive.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip file, using password protection for the
               entries, and then extracts the entries from the zip file.  When creating
               the zip file, the Readme.txt file is not protected with a password, but
               the other two are password-protected as they are saved. During extraction,
               each file is extracted with the appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Password= "!Secret1";
                 zip.AddFile("MapToTheSite-7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "!Secret1";
                 zip.ExtractAll("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFile("ReadMe.txt")
                 zip.Password = "123456!"
                 zip.AddFile("MapToTheSite-7440-N49th.png")
                 zip.Password= "!Secret1";
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "!Secret1"
                 zip.ExtractAll("extractDir")
             End Using
            
             </code>
            
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Encryption">ZipFile.Encryption</seealso>
             <seealso cref="P:External.Zip.Internal.ZipEntry.Password">ZipEntry.Password</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ExtractExistingFile">
             <summary>
               The action the library should take when extracting a file that already
               exists.
             </summary>
            
             <remarks>
             <para>
               This property affects the behavior of the Extract methods (one of the
               <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
               extraction would would overwrite an existing filesystem file. If you do
               not set this property, the library throws an exception when extracting an
               entry would overwrite an existing file.
             </para>
            
             <para>
               This property has no effect when extracting to a stream, or when the file
               to be extracted does not already exist.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ZipErrorAction">
             <summary>
               The action the library should take when an error is encountered while
               opening or reading files as they are saved into a zip archive.
             </summary>
            
             <remarks>
              <para>
                Errors can occur as a file is being saved to the zip archive.  For
                example, the File.Open may fail, or a File.Read may fail, because of
                lock conflicts or other reasons.
              </para>
            
              <para>
                The first problem might occur after having called AddDirectory() on a
                directory that contains a Clipper .dbf file; the file is locked by
                Clipper and cannot be opened for read by another process. An example of
                the second problem might occur when trying to zip a .pst file that is in
                use by Microsoft Outlook. Outlook locks a range on the file, which allows
                other processes to open the file, but not read it in its entirety.
              </para>
            
              <para>
                This property tells DotNetZip what you would like to do in the case of
                these errors.  The primary options are: <c>ZipErrorAction.Throw</c> to
                throw an exception (this is the default behavior if you don't set this
                property); <c>ZipErrorAction.Skip</c> to Skip the file for which there
                was an error and continue saving; <c>ZipErrorAction.Retry</c> to Retry
                the entry that caused the problem; or
                <c>ZipErrorAction.InvokeErrorEvent</c> to invoke an event handler.
              </para>
            
              <para>
                This property is implicitly set to <c>ZipErrorAction.InvokeErrorEvent</c>
                if you add a handler to the <see cref="E:External.Zip.Internal.ZipFile.ZipError" /> event.  If you set
                this property to something other than
                <c>ZipErrorAction.InvokeErrorEvent</c>, then the <c>ZipError</c>
                event is implicitly cleared.  What it means is you can set one or the
                other (or neither), depending on what you want, but you never need to set
                both.
              </para>
            
              <para>
                As with some other properties on the <c>ZipFile</c> class, like <see
                cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, and <see
                cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, setting this property on a <c>ZipFile</c>
                instance will cause the specified <c>ZipErrorAction</c> to be used on all
                <see cref="T:External.Zip.Internal.ZipEntry"/> items that are subsequently added to the
                <c>ZipFile</c> instance. If you set this property after you have added
                items to the <c>ZipFile</c>, but before you have called <c>Save()</c>,
                those items will not use the specified error handling action.
              </para>
            
              <para>
                If you want to handle any errors that occur with any entry in the zip
                file in the same way, then set this property once, before adding any
                entries to the zip archive.
              </para>
            
              <para>
                If you set this property to <c>ZipErrorAction.Skip</c> and you'd like to
                learn which files may have been skipped after a <c>Save()</c>, you can
                set the <see cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter" /> on the ZipFile before
                calling <c>Save()</c>. A message will be emitted into that writer for
                each skipped file, if any.
              </para>
            
             </remarks>
            
             <example>
               This example shows how to tell DotNetZip to skip any files for which an
               error is generated during the Save().
             <code lang="VB">
             Public Sub SaveZipFile()
                 Dim SourceFolder As String = "fodder"
                 Dim DestFile As String =  "eHandler.zip"
                 Dim sw as New StringWriter
                 Using zipArchive As ZipFile = New ZipFile
                     ' Tell DotNetZip to skip any files for which it encounters an error
                     zipArchive.ZipErrorAction = ZipErrorAction.Skip
                     zipArchive.StatusMessageTextWriter = sw
                     zipArchive.AddDirectory(SourceFolder)
                     zipArchive.Save(DestFile)
                 End Using
                 ' examine sw here to see any messages
             End Sub
            
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ZipError"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Encryption">
             <summary>
               The Encryption to use for entries added to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Set this when creating a zip archive, or when updating a zip archive. The
               specified Encryption is applied to the entries subsequently added to the
               <c>ZipFile</c> instance.  Applications do not need to set the
               <c>Encryption</c> property when reading or extracting a zip archive.
             </para>
            
             <para>
               If you set this to something other than EncryptionAlgorithm.None, you
               will also need to set the <see cref="P:External.Zip.Internal.ZipFile.Password"/>.
             </para>
            
             <para>
               As with some other properties on the <c>ZipFile</c> class, like <see
               cref="P:External.Zip.Internal.ZipFile.Password"/> and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, setting this
               property on a <c>ZipFile</c> instance will cause the specified
               <c>EncryptionAlgorithm</c> to be used on all <see cref="T:External.Zip.Internal.ZipEntry"/> items
               that are subsequently added to the <c>ZipFile</c> instance. In other
               words, if you set this property after you have added items to the
               <c>ZipFile</c>, but before you have called <c>Save()</c>, those items will
               not be encrypted or protected with a password in the resulting zip
               archive. To get a zip archive with encrypted entries, set this property,
               along with the <see cref="P:External.Zip.Internal.ZipFile.Password"/> property, before calling
               <c>AddFile</c>, <c>AddItem</c>, or <c>AddDirectory</c> (etc.) on the
               <c>ZipFile</c> instance.
             </para>
            
             <para>
               If you read a <c>ZipFile</c>, you can modify the <c>Encryption</c> on an
               encrypted entry, only by setting the <c>Encryption</c> property on the
               <c>ZipEntry</c> itself.  Setting the <c>Encryption</c> property on the
               <c>ZipFile</c>, once it has been created via a call to
               <c>ZipFile.Read()</c>, does not affect entries that were previously read.
             </para>
            
             <para>
               For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the <c>Encryption</c> property on that <c>ZipFile</c> and
               then calling <c>Save()</c> on the <c>ZipFile</c> does not update the
               <c>Encryption</c> used for the entries in the archive.  Neither is an
               exception thrown. Instead, what happens during the <c>Save()</c> is that
               all previously existing entries are copied through to the new zip archive,
               with whatever encryption and password that was used when originally
               creating the zip archive. Upon re-reading that archive, to extract
               entries, applications should use the original password or passwords, if
               any.
             </para>
            
             <para>
               Suppose an application reads a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the <c>Encryption</c> property on that <c>ZipFile</c> and
               then adding new entries (via <c>AddFile()</c>, <c>AddEntry()</c>, etc)
               and then calling <c>Save()</c> on the <c>ZipFile</c> does not update the
               <c>Encryption</c> on any of the entries that had previously been in the
               <c>ZipFile</c>.  The <c>Encryption</c> property applies only to the
               newly-added entries.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip archive that uses encryption, and then extracts
               entries from the archive.  When creating the zip archive, the ReadMe.txt
               file is zipped without using a password or encryption.  The other files
               use encryption.
             </para>
            
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256;
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.AddFile("7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.AddFile("ReadMe.txt")
                 zip.AddFile("7440-N49th.png")
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Password">ZipFile.Password</seealso>
             <seealso cref="P:External.Zip.Internal.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.SetCompression">
             <summary>
               A callback that allows the application to specify the compression level
               to use for entries subsequently added to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               With this callback, the DotNetZip library allows the application to
               determine whether compression will be used, at the time of the
               <c>Save</c>. This may be useful if the application wants to favor
               speed over size, and wants to defer the decision until the time of
               <c>Save</c>.
             </para>
            
             <para>
               Typically applications set the <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/> property on
               the <c>ZipFile</c> or on each <c>ZipEntry</c> to determine the level of
               compression used. This is done at the time the entry is added to the
               <c>ZipFile</c>. Setting the property to
               <c>Ionic.Zlib.CompressionLevel.None</c> means no compression will be used.
             </para>
            
             <para>
               This callback allows the application to defer the decision on the
               <c>CompressionLevel</c> to use, until the time of the call to
               <c>ZipFile.Save()</c>. The callback is invoked once per <c>ZipEntry</c>,
               at the time the data for the entry is being written out as part of a
               <c>Save()</c> operation. The application can use whatever criteria it
               likes in determining the level to return.  For example, an application may
               wish that no .mp3 files should be compressed, because they are already
               compressed and the extra compression is not worth the CPU time incurred,
               and so can return <c>None</c> for all .mp3 entries.
             </para>
            
             <para>
               The library determines whether compression will be attempted for an entry
               this way: If the entry is a zero length file, or a directory, no
               compression is used.  Otherwise, if this callback is set, it is invoked
               and the <c>CompressionLevel</c> is set to the return value. If this
               callback has not been set, then the previously set value for
               <c>CompressionLevel</c> is used.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize">
             <summary>
             The maximum size of an output segment, when saving a split Zip file.
             </summary>
             <remarks>
               <para>
                 Set this to a non-zero value before calling <see cref="M:External.Zip.Internal.ZipFile.Save"/> or <see
                 cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/> to specify that the ZipFile should be saved as a
                 split archive, also sometimes called a spanned archive. Some also
                 call them multi-file archives.
               </para>
            
               <para>
                 A split zip archive is saved in a set of discrete filesystem files,
                 rather than in a single file. This is handy when transmitting the
                 archive in email or some other mechanism that has a limit to the size of
                 each file.  The first file in a split archive will be named
                 <c>basename.z01</c>, the second will be named <c>basename.z02</c>, and
                 so on. The final file is named <c>basename.zip</c>. According to the zip
                 specification from PKWare, the minimum value is 65536, for a 64k segment
                 size. The maximum number of segments allows in a split archive is 99.
               </para>
            
               <para>
                 The value of this property determines the maximum size of a split
                 segment when writing a split archive.  For example, suppose you have a
                 <c>ZipFile</c> that would save to a single file of 200k. If you set the
                 <c>MaxOutputSegmentSize</c> to 65536 before calling <c>Save()</c>, you
                 will get four distinct output files. On the other hand if you set this
                 property to 256k, then you will get a single-file archive for that
                 <c>ZipFile</c>.
               </para>
            
               <para>
                 The size of each split output file will be as large as possible, up to
                 the maximum size set here. The zip specification requires that some data
                 fields in a zip archive may not span a split boundary, and an output
                 segment may be smaller than the maximum if necessary to avoid that
                 problem. Also, obviously the final segment of the archive may be smaller
                 than the maximum segment size. Segments will never be larger than the
                 value set with this property.
               </para>
            
               <para>
                 You can save a split Zip file only when saving to a regular filesystem
                 file. It's not possible to save a split zip file as a self-extracting
                 archive, nor is it possible to save a split zip file to a stream. When
                 saving to a SFX or to a Stream, this property is ignored.
               </para>
            
               <para>
                 About interoperability: Split or spanned zip files produced by DotNetZip
                 can be read by WinZip or PKZip, and vice-versa. Segmented zip files may
                 not be readable by other tools, if those other tools don't support zip
                 spanning or splitting.  When in doubt, test.  I don't believe Windows
                 Explorer can extract a split archive.
               </para>
            
               <para>
                 This property has no effect when reading a split archive. You can read
                 a split archive in the normal way with DotNetZip.
               </para>
            
               <para>
                 When saving a zip file, if you want a regular zip file rather than a
                 split zip file, don't set this property, or set it to Zero.
               </para>
            
               <para>
                 If you read a split archive, with <see cref="M:External.Zip.Internal.ZipFile.Read(System.String)"/> and
                 then subsequently call <c>ZipFile.Save()</c>, unless you set this
                 property before calling <c>Save()</c>, you will get a normal,
                 single-file archive.
               </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.NumberOfSegmentsForMostRecentSave"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.NumberOfSegmentsForMostRecentSave">
            <summary>
              Returns the number of segments used in the most recent Save() operation.
            </summary>
            <remarks>
              <para>
                This is normally zero, unless you have set the <see
                cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/> property.  If you have set <see
                cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/>, and then you save a file, after the call to
                Save() completes, you can read this value to learn the number of segments that
                were created.
              </para>
              <para>
                If you call Save("Archive.zip"), and it creates 5 segments, then you
                will have filesystem files named Archive.z01, Archive.z02, Archive.z03,
                Archive.z04, and Archive.zip, and the value of this property will be 5.
              </para>
            </remarks>
            <seealso cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ParallelDeflateThreshold">
             <summary>
               The size threshold for an entry, above which a parallel deflate is used.
             </summary>
            
             <remarks>
            
               <para>
                 DotNetZip will use multiple threads to compress any ZipEntry,
                 if the entry is larger than the given size.  Zero means "always
                 use parallel deflate", while -1 means "never use parallel
                 deflate". The default value for this property is 512k. Aside
                 from the special values of 0 and 1, the minimum value is 65536.
               </para>
            
               <para>
                 If the entry size cannot be known before compression, as with a
                 read-forward stream, then Parallel deflate will never be
                 performed, unless the value of this property is zero.
               </para>
            
               <para>
                 A parallel deflate operations will speed up the compression of
                 large files, on computers with multiple CPUs or multiple CPU
                 cores.  For files above 1mb, on a dual core or dual-cpu (2p)
                 machine, the time required to compress the file can be 70% of the
                 single-threaded deflate.  For very large files on 4p machines the
                 compression can be done in 30% of the normal time.  The downside
                 is that parallel deflate consumes extra memory during the deflate,
                 and the deflation is not as effective.
               </para>
            
               <para>
                 Parallel deflate tends to yield slightly less compression when
                 compared to as single-threaded deflate; this is because the original
                 data stream is split into multiple independent buffers, each of which
                 is compressed in parallel.  But because they are treated
                 independently, there is no opportunity to share compression
                 dictionaries.  For that reason, a deflated stream may be slightly
                 larger when compressed using parallel deflate, as compared to a
                 traditional single-threaded deflate. Sometimes the increase over the
                 normal deflate is as much as 5% of the total compressed size. For
                 larger files it can be as small as 0.1%.
               </para>
            
               <para>
                 Multi-threaded compression does not give as much an advantage when
                 using Encryption. This is primarily because encryption tends to slow
                 down the entire pipeline. Also, multi-threaded compression gives less
                 of an advantage when using lower compression levels, for example <see
                 cref="F:External.Zip.Internal.Zlib.CompressionLevel.BestSpeed"/>.  You may have to
                 perform some tests to determine the best approach for your situation.
               </para>
            
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ParallelDeflateMaxBufferPairs"/>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ParallelDeflateMaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use when performing
               parallel compression.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory
               buffer pairs to create when performing parallel
               compression.  The implementation of the parallel
               compression stream allocates multiple buffers to
               facilitate parallel compression.  As each buffer fills up,
               the stream uses <see
               cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see> to compress those
               buffers in a background threadpool thread. After a buffer
               is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see
               cref="P:External.Zip.Internal.ZipFile.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time
               before calling <c>ZipFile.Save()</c>.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ParallelDeflateThreshold"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.LibraryVersion">
             <summary>
             Returns the version number on the DotNetZip assembly.
             </summary>
            
             <remarks>
               <para>
                 This property is exposed as a convenience.  Callers could also get the
                 version value by retrieving GetName().Version on the
                 System.Reflection.Assembly object pointing to the DotNetZip
                 assembly. But sometimes it is not clear which assembly is being loaded.
                 This property makes it clear.
               </para>
               <para>
                 This static property is primarily useful for diagnostic purposes.
               </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified filename.
             </summary>
            
             <remarks>
             <para>
               Applications can use this constructor to create a new ZipFile for writing,
               or to slurp in an existing zip archive for read and update purposes.
             </para>
            
             <para>
               To create a new zip archive, an application can call this constructor,
               passing the name of a file that does not exist.  The name may be a fully
               qualified path. Then the application can add directories or files to the
               <c>ZipFile</c> via <c>AddDirectory()</c>, <c>AddFile()</c>, <c>AddItem()</c>
               and then write the zip archive to the disk by calling <c>Save()</c>. The
               zip file is not actually opened and written to the disk until the
               application calls <c>ZipFile.Save()</c>.  At that point the new zip file
               with the given name is created.
             </para>
            
             <para>
               If you won't know the name of the <c>Zipfile</c> until the time you call
               <c>ZipFile.Save()</c>, or if you plan to save to a stream (which has no
               name), then you should use the no-argument constructor.
             </para>
            
             <para>
               The application can also call this constructor to read an existing zip
               archive.  passing the name of a valid zip file that does exist. But, it's
               better form to use the static <see cref="M:External.Zip.Internal.ZipFile.Read(System.String)"/> method,
               passing the name of the zip file, because using <c>ZipFile.Read()</c> in
               your code communicates very clearly what you are doing.  In either case,
               the file is then read into the <c>ZipFile</c> instance.  The app can then
               enumerate the entries or can modify the zip file, for example adding
               entries, removing entries, changing comments, and so on.
             </para>
            
             <para>
               One advantage to this parameterized constructor: it allows applications to
               use the same code to add items to a zip archive, regardless of whether the
               zip file exists.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             <para>
               By the way, since DotNetZip is so easy to use, don't you think <see
               href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">you should
               donate $5 or $10</see>?
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             This example shows how to create a zipfile, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip  = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile()
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               The Encoding is used as the default alternate encoding for entries with
               filenames or comments that cannot be encoded with the IBM437 code page.
               This is equivalent to setting the <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="encoding">The Encoding is used as the default alternate
             encoding for entries with filenames or comments that cannot be encoded
             with the IBM437 code page. </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor">
             <summary>
               Create a zip file, without specifying a target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               After instantiating with this constructor and adding entries to the
               archive, the application should call <see cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/> or
               <see cref="M:External.Zip.Internal.ZipFile.Save(System.IO.Stream)"/> to save to a file or a
               stream, respectively.  The application can also set the <see cref="P:External.Zip.Internal.ZipFile.Name"/>
               property and then call the no-argument <see cref="M:External.Zip.Internal.ZipFile.Save"/> method.  (This
               is the preferred approach for applications that use the library through
               COM interop.)  If you call the no-argument <see cref="M:External.Zip.Internal.ZipFile.Save"/> method
               without having set the <c>Name</c> of the <c>ZipFile</c>, either through
               the parameterized constructor or through the explicit property , the
               Save() will throw, because there is no place to save the file.  </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               have multiple threads that each use a distinct <c>ZipFile</c> instance, or
               you can synchronize multi-thread access to a single instance.  </para>
            
             </remarks>
            
             <example>
             This example creates a Zip archive called Backup.zip, containing all the files
             in the directory DirectoryToZip. Files within subdirectories are not zipped up.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.Text.Encoding)">
             <summary>
               Create a zip file, specifying a text Encoding, but without specifying a
               target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             </remarks>
            
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String,System.IO.TextWriter)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified status message writer.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a TextWriter,
               to which verbose messages will be written during extraction or creation of
               the zip archive.  A console application may wish to pass
               System.Console.Out to get messages on the Console. A graphical or headless
               application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a TextBox, or generate an audit log of ZipFile operations.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the Password property after creating the <c>ZipFile</c> instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip = new ZipFile("Backup.zip", Console.Out))
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               // Status messages will be written to Console.Out
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile("Backup.zip", Console.Out)
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 ' Status messages will be written to Console.Out
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save()
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing
             verbose status messages.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, the specified status message writer, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               This constructor works like the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument.</see> See that
               reference for detail on what this constructor does.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a
               <c>TextWriter</c>, and an Encoding.  The <c>TextWriter</c> will collect
               verbose messages that are generated by the library during extraction or
               creation of the zip archive.  A console application may wish to pass
               <c>System.Console.Out</c> to get messages on the Console. A graphical or
               headless application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a <c>TextBox</c>, or generate an audit log of
               <c>ZipFile</c> operations.
             </para>
            
             <para>
               The <c>Encoding</c> is used as the default alternate encoding for entries
               with filenames or comments that cannot be encoded with the IBM437 code
               page.  This is a equivalent to setting the <see
               cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the <c>Password</c> property after creating the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if <c>fileName</c> refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing verbose
             status messages.</param>
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Initialize(System.String)">
             <summary>
               Initialize a <c>ZipFile</c> instance by reading in a zip file.
             </summary>
            
             <remarks>
            
             <para>
               This method is primarily useful from COM Automation environments, when
               reading or extracting zip files. In COM, it is not possible to invoke
               parameterized constructors for a class. A COM Automation application can
               update a zip file by using the <see cref="M:External.Zip.Internal.ZipFile.#ctor">default (no argument)
               constructor</see>, then calling <c>Initialize()</c> to read the contents
               of an on-disk zip archive into the <c>ZipFile</c> instance.
             </para>
            
             <para>
               .NET applications are encouraged to use the <c>ZipFile.Read()</c> methods
               for better clarity.
             </para>
            
             </remarks>
             <param name="fileName">the name of the existing zip file to read in.</param>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Item(System.Int32)">
             <summary>
               This is an integer indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               Internally, the <c>ZipEntry</c> instances that belong to the
               <c>ZipFile</c> are stored in a Dictionary.  When you use this
               indexer the first time, it creates a read-only
               <c>List&lt;ZipEntry&gt;</c> from the Dictionary.Values Collection.
               If at any time you modify the set of entries in the <c>ZipFile</c>,
               either by adding an entry, removing an entry, or renaming an
               entry, a new List will be created, and the numeric indexes for the
               remaining entries may be different.
             </para>
            
             <para>
               This means you cannot rename any ZipEntry from
               inside an enumeration of the zip file.
             </para>
            
             <param name="ix">
               The index value.
             </param>
            
             </remarks>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive at the specified index. If the
               entry does not exist in the archive, this indexer throws.
             </returns>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Item(System.String)">
             <summary>
               This is a name-based indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               The <see cref="P:External.Zip.Internal.ZipFile.CaseSensitiveRetrieval"/> property on the <c>ZipFile</c>
               determines whether retrieval via this indexer is done via case-sensitive
               comparisons. By default, retrieval is not case sensitive.  This makes
               sense on Windows, in which filesystems are not case sensitive.
             </para>
            
             <para>
               Regardless of case-sensitivity, it is not always the case that
               <c>this[value].FileName == value</c>. In other words, the <c>FileName</c>
               property of the <c>ZipEntry</c> retrieved with this indexer, may or may
               not be equal to the index value.
             </para>
            
             <para>
               This is because DotNetZip performs a normalization of filenames passed to
               this indexer, before attempting to retrieve the item.  That normalization
               includes: removal of a volume letter and colon, swapping backward slashes
               for forward slashes.  So, <c>zip["dir1\\entry1.txt"].FileName ==
               "dir1/entry.txt"</c>.
             </para>
            
             <para>
               Directory entries in the zip file may be retrieved via this indexer only
               with names that have a trailing slash. DotNetZip automatically appends a
               trailing slash to the names of any directory entries added to a zip.
             </para>
            
             </remarks>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files.
             <code>
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                   zip[s1].Extract("textfiles");
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveEntry(System.String)"/>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the caller attempts to assign a non-null value to the indexer.
             </exception>
            
             <param name="fileName">
               The name of the file, including any directory path, to retrieve from the
               zip.  The filename match is not case-sensitive by default; you can use the
               <see cref="P:External.Zip.Internal.ZipFile.CaseSensitiveRetrieval"/> property to change this behavior. The
               pathname can use forward-slashes or backward slashes.
             </param>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive, given by the specified
               filename. If the named entry does not exist in the archive, this indexer
               returns <c>null</c> (<c>Nothing</c> in VB).
             </returns>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EntryFileNames">
             <summary>
               The list of filenames for the entries contained within the zip archive.
             </summary>
            
             <remarks>
               According to the ZIP specification, the names of the entries use forward
               slashes in pathnames.  If you are scanning through the list, you may have
               to swap forward slashes for backslashes.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Item(System.String)"/>
            
             <example>
               This example shows one way to test if a filename is already contained
               within a zip archive.
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile.Read(ZipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
               The list of strings for the filenames contained within the Zip archive.
             </returns>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Entries">
             <summary>
               Returns the readonly collection of entries in the Zip archive.
             </summary>
            
             <remarks>
            
             <para>
               If there are no entries in the current <c>ZipFile</c>, the value returned is a
               non-null zero-element collection.  If there are entries in the zip file,
               the elements are returned in no particular order.
             </para>
             <para>
               This is the implied enumerator on the <c>ZipFile</c> class.  If you use a
               <c>ZipFile</c> instance in a context that expects an enumerator, you will
               get this collection.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.EntriesSorted"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EntriesSorted">
             <summary>
               Returns a readonly collection of entries in the Zip archive, sorted by FileName.
             </summary>
            
             <remarks>
               If there are no entries in the current <c>ZipFile</c>, the value returned
               is a non-null zero-element collection.  If there are entries in the zip
               file, the elements are returned sorted by the name of the entry.
             </remarks>
            
             <example>
            
               This example fills a Windows Forms ListView with the entries in a zip file.
            
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(zipFile))
             {
                 foreach (ZipEntry entry in zip.EntriesSorted)
                 {
                     ListViewItem item = new ListViewItem(n.ToString());
                     n++;
                     string[] subitems = new string[] {
                         entry.FileName.Replace("/","\\"),
                         entry.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                         entry.UncompressedSize.ToString(),
                         String.Format("{0,5:F0}%", entry.CompressionRatio),
                         entry.CompressedSize.ToString(),
                         (entry.UsesEncryption) ? "Y" : "N",
                         String.Format("{0:X8}", entry.Crc)};
            
                     foreach (String s in subitems)
                     {
                         ListViewItem.ListViewSubItem subitem = new ListViewItem.ListViewSubItem();
                         subitem.Text = s;
                         item.SubItems.Add(subitem);
                     }
            
                     this.listView1.Items.Add(item);
                 }
             }
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Entries"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Count">
            <summary>
            Returns the number of entries in the Zip archive.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntry(External.Zip.Internal.ZipEntry)">
             <summary>
               Removes the given <c>ZipEntry</c> from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
             </remarks>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the specified <c>ZipEntry</c> does not exist in the <c>ZipFile</c>.
             </exception>
            
             <example>
               In this example, all entries in the zip archive dating from before
               December 31st, 2007, are removed from the archive.  This is actually much
               easier if you use the RemoveSelectedEntries method.  But I needed an
               example for RemoveEntry, so here it is.
             <code>
             String ZipFileToRead = "ArchiveToModify.zip";
             System.DateTime Threshold = new System.DateTime(2007,12,31);
             using (ZipFile zip = ZipFile.Read(ZipFileToRead))
             {
               var EntriesToRemove = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                 {
                   // We cannot remove the entry from the list, within the context of
                   // an enumeration of said list.
                   // So we add the doomed entry to a list to be removed later.
                   EntriesToRemove.Add(e);
                 }
               }
            
               // actually remove the doomed entries.
               foreach (ZipEntry zombie in EntriesToRemove)
                 zip.RemoveEntry(zombie);
            
               zip.Comment= String.Format("This zip archive was updated at {0}.",
                                          System.DateTime.Now.ToString("G"));
            
               // save with a different name
               zip.Save("Archive-Updated.zip");
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToRead As String = "ArchiveToModify.zip"
               Dim Threshold As New DateTime(2007, 12, 31)
               Using zip As ZipFile = ZipFile.Read(ZipFileToRead)
                   Dim EntriesToRemove As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           ' We cannot remove the entry from the list, within the context of
                           ' an enumeration of said list.
                           ' So we add the doomed entry to a list to be removed later.
                           EntriesToRemove.Add(e)
                       End If
                   Next
            
                   ' actually remove the doomed entries.
                   Dim zombie As ZipEntry
                   For Each zombie In EntriesToRemove
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = String.Format("This zip archive was updated at {0}.", DateTime.Now.ToString("G"))
                   'save as a different name
                   zip.Save("Archive-Updated.zip")
               End Using
             </code>
             </example>
            
             <param name="entry">
             The <c>ZipEntry</c> to remove from the zip.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntry(System.String)">
             <summary>
             Removes the <c>ZipEntry</c> with the given filename from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
            
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
               Thrown if the <c>ZipFile</c> is not updatable.
             </exception>
            
             <exception cref="T:System.ArgumentException">
               Thrown if a <c>ZipEntry</c> with the specified filename does not exist in
               the <c>ZipFile</c>.
             </exception>
            
             <example>
            
               This example shows one way to remove an entry with a given filename from
               an existing zip archive.
            
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = ZipFile.Read(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
               {
                 zip.RemoveEntry(candidate);
                 zip.Comment= String.Format("The file '{0}' has been removed from this archive.",
                                            Candidate);
                 zip.Save();
               }
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile = ZipFile.Read(zipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       zip.RemoveEntry(candidate)
                       zip.Comment = String.Format("The file '{0}' has been removed from this archive.", Candidate)
                       zip.Save
                   End If
               End Using
             </code>
             </example>
            
             <param name="fileName">
             The name of the file, including any directory path, to remove from the zip.
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Dispose">
             <summary>
               Closes the read and write streams associated
               to the <c>ZipFile</c>, if necessary.
             </summary>
            
             <remarks>
               The Dispose() method is generally employed implicitly, via a <c>using(..) {..}</c>
               statement. (<c>Using...End Using</c> in VB) If you do not employ a using
               statement, insure that your application calls Dispose() explicitly.  For
               example, in a Powershell application, or an application that uses the COM
               interop interface, you must call Dispose() explicitly.
             </remarks>
            
             <example>
             This example extracts an entry selected by name, from the Zip file to the
             Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               foreach (ZipEntry e in zip)
               {
                 if (WantThisEntry(e.FileName))
                   zip.Extract(e.FileName, Console.OpenStandardOutput());
               }
             } // Dispose() is called implicitly here.
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(zipfile)
                 Dim e As ZipEntry
                 For Each e In zip
                   If WantThisEntry(e.FileName) Then
                       zip.Extract(e.FileName, Console.OpenStandardOutput())
                   End If
                 Next
             End Using ' Dispose is implicity called here
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Dispose(System.Boolean)">
             <summary>
               Disposes any managed resources, if the flag is set, then marks the
               instance disposed.  This method is typically not called explicitly from
               application code.
             </summary>
            
             <remarks>
               Applications should call <see cref="M:External.Zip.Internal.ZipFile.Dispose">the no-arg Dispose method</see>.
             </remarks>
            
             <param name="disposeManagedResources">
               indicates whether the method should dispose streams or not.
             </param>
        </member>
        <member name="F:External.Zip.Internal.ZipFile.BufferSizeDefault">
            <summary>
              Default size of the buffer used for IO.
            </summary>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.SaveProgress">
             <summary>
               An event handler invoked when a Save() starts, before and after each
               entry has been written to the archive, when a Save() completes, and
               during other Save events.
             </summary>
            
             <remarks>
             <para>
               Depending on the particular event, different properties on the <see
               cref="T:External.Zip.Internal.SaveProgressEventArgs"/> parameter are set.  The following
               table summarizes the available EventTypes and the conditions under
               which this event handler is invoked with a
               <c>SaveProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Saving_Started</term>
             <description>Fired when ZipFile.Save() begins.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BeforeSaveEntry</term>
             <description>
               Fired within ZipFile.Save(), just before writing data for each
               particular entry.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveEntry</term>
             <description>
               Fired within ZipFile.Save(), just after having finished writing data
               for each particular entry.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_Completed</term>
             <description>Fired when ZipFile.Save() has completed.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveTempArchive</term>
             <description>
               Fired after the temporary file has been created.  This happens only
               when saving to a disk file.  This event will not be invoked when
               saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BeforeRenameTempArchive</term>
             <description>
               Fired just before renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterRenameTempArchive</term>
             <description>
               Fired just after renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterCompileSelfExtractor</term>
             <description>
               Fired after a self-extracting archive has finished compiling.  This
               EventType is used only within SaveSelfExtractor().
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BytesRead</term>
             <description>
               Set during the save of a particular entry, to update progress of the
               Save().  When this EventType is set, the BytesTransferred is the
               number of bytes that have been read from the source stream.  The
               TotalBytesToTransfer is the number of bytes in the uncompressed
               file.
             </description>
             </item>
            
             </list>
             </remarks>
            
             <example>
            
                This example uses an anonymous method to handle the
                SaveProgress event, by updating a progress bar.
            
             <code lang="C#">
             progressBar1.Value = 0;
             progressBar1.Max = listbox1.Items.Count;
             using (ZipFile zip = new ZipFile())
             {
                // listbox1 contains a list of filenames
                zip.AddFiles(listbox1.Items);
            
                // do the progress bar:
                zip.SaveProgress += (sender, e) => {
                   if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry) {
                      progressBar1.PerformStep();
                   }
                };
            
                zip.Save(fs);
             }
             </code>
             </example>
            
             <example>
               This example uses a named method as the
               <c>SaveProgress</c> event handler, to update the user, in a
               console-based application.
            
             <code lang="C#">
             static bool justHadByteUpdate= false;
             public static void SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Saving_Started)
                     Console.WriteLine("Saving: {0}", e.ArchiveName);
            
                 else if (e.EventType == ZipProgressEventType.Saving_Completed)
                 {
                     justHadByteUpdate= false;
                     Console.WriteLine();
                     Console.WriteLine("Done: {0}", e.ArchiveName);
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                 {
                     if (justHadByteUpdate)
                         Console.WriteLine();
                     Console.WriteLine("  Writing: {0} ({1}/{2})",
                                       e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal);
                     justHadByteUpdate= false;
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_EntryBytesRead)
                 {
                     if (justHadByteUpdate)
                         Console.SetCursorPosition(0, Console.CursorTop);
                      Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                                   e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                     justHadByteUpdate= true;
                 }
             }
            
             public static ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile()) {
                 zip.SaveProgress += SaveProgress;
                 zip.AddDirectory(directory);
                 zip.Save(targetZip);
               }
             }
            
             </code>
            
             <code lang="VB">
             Public Sub ZipUp(ByVal targetZip As String, ByVal directory As String)
                 Using zip As ZipFile = New ZipFile
                     AddHandler zip.SaveProgress, AddressOf MySaveProgress
                     zip.AddDirectory(directory)
                     zip.Save(targetZip)
                 End Using
             End Sub
            
             Private Shared justHadByteUpdate As Boolean = False
            
             Public Shared Sub MySaveProgress(ByVal sender As Object, ByVal e As SaveProgressEventArgs)
                 If (e.EventType Is ZipProgressEventType.Saving_Started) Then
                     Console.WriteLine("Saving: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_Completed) Then
                     justHadByteUpdate = False
                     Console.WriteLine
                     Console.WriteLine("Done: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_BeforeWriteEntry) Then
                     If justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("  Writing: {0} ({1}/{2})", e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal)
                     justHadByteUpdate = False
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_EntryBytesRead) Then
                     If justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, _
                                   e.TotalBytesToTransfer, _
                                   (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     justHadByteUpdate = True
                 End If
             End Sub
             </code>
             </example>
            
             <example>
            
             This is a more complete example of using the SaveProgress
             events in a Windows Forms application, with a
             Thread object.
            
             <code lang="C#">
             delegate void SaveEntryProgress(SaveProgressEventArgs e);
             delegate void ButtonClick(object sender, EventArgs e);
            
             public class WorkerOptions
             {
                 public string ZipName;
                 public string Folder;
                 public string Encoding;
                 public string Comment;
                 public int ZipFlavor;
                 public Zip64Option Zip64;
             }
            
             private int _progress2MaxFactor;
             private bool _saveCanceled;
             private long _totalBytesBeforeCompress;
             private long _totalBytesAfterCompress;
             private Thread _workerThread;
            
            
             private void btnZipup_Click(object sender, EventArgs e)
             {
                 KickoffZipup();
             }
            
             private void btnCancel_Click(object sender, EventArgs e)
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new ButtonClick(this.btnCancel_Click), new object[] { sender, e });
                 }
                 else
                 {
                     _saveCanceled = true;
                     lblStatus.Text = "Canceled...";
                     ResetState();
                 }
             }
            
             private void KickoffZipup()
             {
                 _folderName = tbDirName.Text;
            
                 if (_folderName == null || _folderName == "") return;
                 if (this.tbZipName.Text == null || this.tbZipName.Text == "") return;
            
                 // check for existence of the zip file:
                 if (System.IO.File.Exists(this.tbZipName.Text))
                 {
                     var dlgResult = MessageBox.Show(String.Format("The file you have specified ({0}) already exists." +
                                                                   "  Do you want to overwrite this file?", this.tbZipName.Text),
                                                     "Confirmation is Required", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                     if (dlgResult != DialogResult.Yes) return;
                     System.IO.File.Delete(this.tbZipName.Text);
                 }
            
                  _saveCanceled = false;
                 _nFilesCompleted = 0;
                 _totalBytesAfterCompress = 0;
                 _totalBytesBeforeCompress = 0;
                 this.btnOk.Enabled = false;
                 this.btnOk.Text = "Zipping...";
                 this.btnCancel.Enabled = true;
                 lblStatus.Text = "Zipping...";
            
                 var options = new WorkerOptions
                 {
                     ZipName = this.tbZipName.Text,
                     Folder = _folderName,
                     Encoding = "ibm437"
                 };
            
                 if (this.comboBox1.SelectedIndex != 0)
                 {
                     options.Encoding = this.comboBox1.SelectedItem.ToString();
                 }
            
                 if (this.radioFlavorSfxCmd.Checked)
                     options.ZipFlavor = 2;
                 else if (this.radioFlavorSfxGui.Checked)
                     options.ZipFlavor = 1;
                 else options.ZipFlavor = 0;
            
                 if (this.radioZip64AsNecessary.Checked)
                     options.Zip64 = Zip64Option.AsNecessary;
                 else if (this.radioZip64Always.Checked)
                     options.Zip64 = Zip64Option.Always;
                 else options.Zip64 = Zip64Option.Never;
            
                 options.Comment = String.Format("Encoding:{0} || Flavor:{1} || ZIP64:{2}\r\nCreated at {3} || {4}\r\n",
                             options.Encoding,
                             FlavorToString(options.ZipFlavor),
                             options.Zip64.ToString(),
                             System.DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss"),
                             this.Text);
            
                 if (this.tbComment.Text != TB_COMMENT_NOTE)
                     options.Comment += this.tbComment.Text;
            
                 _workerThread = new Thread(this.DoSave);
                 _workerThread.Name = "Zip Saver thread";
                 _workerThread.Start(options);
                 this.Cursor = Cursors.WaitCursor;
              }
            
            
             private void DoSave(Object p)
             {
                 WorkerOptions options = p as WorkerOptions;
                 try
                 {
                     using (var zip1 = new ZipFile())
                     {
                         zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(options.Encoding);
                         zip1.Comment = options.Comment;
                         zip1.AddDirectory(options.Folder);
                         _entriesToZip = zip1.EntryFileNames.Count;
                         SetProgressBars();
                         zip1.SaveProgress += this.zip1_SaveProgress;
            
                         zip1.UseZip64WhenSaving = options.Zip64;
            
                         if (options.ZipFlavor == 1)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.WinFormsApplication);
                         else if (options.ZipFlavor == 2)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.ConsoleApplication);
                         else
                             zip1.Save(options.ZipName);
                     }
                 }
                 catch (System.Exception exc1)
                 {
                     MessageBox.Show(String.Format("Exception while zipping: {0}", exc1.Message));
                     btnCancel_Click(null, null);
                 }
             }
            
            
            
             void zip1_SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Saving_AfterWriteEntry:
                         StepArchiveProgress(e);
                         break;
                     case ZipProgressEventType.Saving_EntryBytesRead:
                         StepEntryProgress(e);
                         break;
                     case ZipProgressEventType.Saving_Completed:
                         SaveCompleted();
                         break;
                     case ZipProgressEventType.Saving_AfterSaveTempArchive:
                         // this event only occurs when saving an SFX file
                         TempArchiveSaved();
                         break;
                 }
                 if (_saveCanceled)
                     e.Cancel = true;
             }
            
            
            
             private void StepArchiveProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar1.InvokeRequired)
                 {
                     this.progressBar1.Invoke(new SaveEntryProgress(this.StepArchiveProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         _nFilesCompleted++;
                         this.progressBar1.PerformStep();
                         _totalBytesAfterCompress += e.CurrentEntry.CompressedSize;
                         _totalBytesBeforeCompress += e.CurrentEntry.UncompressedSize;
            
                         // reset the progress bar for the entry:
                         this.progressBar2.Value = this.progressBar2.Maximum = 1;
            
                         this.Update();
                     }
                 }
             }
            
            
             private void StepEntryProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar2.InvokeRequired)
                 {
                     this.progressBar2.Invoke(new SaveEntryProgress(this.StepEntryProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         if (this.progressBar2.Maximum == 1)
                         {
                             // reset
                             Int64 max = e.TotalBytesToTransfer;
                             _progress2MaxFactor = 0;
                             while (max > System.Int32.MaxValue)
                             {
                                 max /= 2;
                                 _progress2MaxFactor++;
                             }
                             this.progressBar2.Maximum = (int)max;
                             lblStatus.Text = String.Format("{0} of {1} files...({2})",
                                 _nFilesCompleted + 1, _entriesToZip, e.CurrentEntry.FileName);
                         }
            
                          int xferred = e.BytesTransferred >> _progress2MaxFactor;
            
                          this.progressBar2.Value = (xferred >= this.progressBar2.Maximum)
                             ? this.progressBar2.Maximum
                             : xferred;
            
                          this.Update();
                     }
                 }
             }
            
             private void SaveCompleted()
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new MethodInvoker(this.SaveCompleted));
                 }
                 else
                 {
                     lblStatus.Text = String.Format("Done, Compressed {0} files, {1:N0}% of original.",
                         _nFilesCompleted, (100.00 * _totalBytesAfterCompress) / _totalBytesBeforeCompress);
                      ResetState();
                 }
             }
            
             private void ResetState()
             {
                 this.btnCancel.Enabled = false;
                 this.btnOk.Enabled = true;
                 this.btnOk.Text = "Zip it!";
                 this.progressBar1.Value = 0;
                 this.progressBar2.Value = 0;
                 this.Cursor = Cursors.Default;
                 if (!_workerThread.IsAlive)
                     _workerThread.Join();
             }
             </code>
            
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.ReadProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.AddProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.ReadProgress">
             <summary>
             An event handler invoked before, during, and after the reading of a zip archive.
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event being signaled, different properties on the
             <see cref="T:External.Zip.Internal.ReadProgressEventArgs"/> parameter are set.  The following table
             summarizes the available EventTypes and the conditions under which this
             event handler is invoked with a <c>ReadProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Reading_Started</term>
             <description>Fired just as ZipFile.Read() begins. Meaningful properties: ArchiveName.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_Completed</term>
             <description>Fired when ZipFile.Read() has completed. Meaningful properties: ArchiveName.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_ArchiveBytesRead</term>
             <description>Fired while reading, updates the number of bytes read for the entire archive.
             Meaningful properties: ArchiveName, CurrentEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_BeforeReadEntry</term>
             <description>Indicates an entry is about to be read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_AfterReadEntry</term>
             <description>Indicates an entry has just been read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal, CurrentEntry.
             </description>
             </item>
            
             </list>
             </remarks>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.SaveProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.AddProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.ExtractProgress">
             <summary>
               An event handler invoked before, during, and after extraction of
               entries in the zip archive.
             </summary>
            
             <remarks>
             <para>
               Depending on the particular event, different properties on the <see
               cref="T:External.Zip.Internal.ExtractProgressEventArgs"/> parameter are set.  The following
               table summarizes the available EventTypes and the conditions under
               which this event handler is invoked with a
               <c>ExtractProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractAll</term>
             <description>
               Set when ExtractAll() begins. The ArchiveName, Overwrite, and
               ExtractLocation properties are meaningful.</description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractAll</term>
             <description>
               Set when ExtractAll() has completed.  The ArchiveName, Overwrite,
               and ExtractLocation properties are meaningful.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractEntry</term>
             <description>
               Set when an Extract() on an entry in the ZipFile has begun.
               Properties that are meaningful: ArchiveName, EntriesTotal,
               CurrentEntry, Overwrite, ExtractLocation, EntriesExtracted.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractEntry</term>
             <description>
               Set when an Extract() on an entry in the ZipFile has completed.
               Properties that are meaningful: ArchiveName, EntriesTotal,
               CurrentEntry, Overwrite, ExtractLocation, EntriesExtracted.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_EntryBytesWritten</term>
             <description>
               Set within a call to Extract() on an entry in the ZipFile, as data
               is extracted for the entry.  Properties that are meaningful:
               ArchiveName, CurrentEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite</term>
             <description>
               Set within a call to Extract() on an entry in the ZipFile, when the
               extraction would overwrite an existing file. This event type is used
               only when <c>ExtractExistingFileAction</c> on the <c>ZipFile</c> or
               <c>ZipEntry</c> is set to <c>InvokeExtractProgressEvent</c>.
             </description>
             </item>
            
             </list>
            
             </remarks>
            
             <example>
             <code>
             private static bool justHadByteUpdate = false;
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
               if(e.EventType == ZipProgressEventType.Extracting_EntryBytesWritten)
               {
                 if (justHadByteUpdate)
                   Console.SetCursorPosition(0, Console.CursorTop);
            
                 Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                               e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                 justHadByteUpdate = true;
               }
               else if(e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
               {
                 if (justHadByteUpdate)
                   Console.WriteLine();
                 Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName);
                 justHadByteUpdate= false;
               }
             }
            
             public static ExtractZip(string zipToExtract, string directory)
             {
               string TargetDirectory= "extract";
               using (var zip = ZipFile.Read(zipToExtract)) {
                 zip.ExtractProgress += ExtractProgress;
                 foreach (var e in zip1)
                 {
                   e.Extract(TargetDirectory, true);
                 }
               }
             }
            
             </code>
             <code lang="VB">
             Public Shared Sub Main(ByVal args As String())
                 Dim ZipToUnpack As String = "C1P3SML.zip"
                 Dim TargetDir As String = "ExtractTest_Extract"
                 Console.WriteLine("Extracting file {0} to {1}", ZipToUnpack, TargetDir)
                 Using zip1 As ZipFile = ZipFile.Read(ZipToUnpack)
                     AddHandler zip1.ExtractProgress, AddressOf MyExtractProgress
                     Dim e As ZipEntry
                     For Each e In zip1
                         e.Extract(TargetDir, True)
                     Next
                 End Using
             End Sub
            
             Private Shared justHadByteUpdate As Boolean = False
            
             Public Shared Sub MyExtractProgress(ByVal sender As Object, ByVal e As ExtractProgressEventArgs)
                 If (e.EventType = ZipProgressEventType.Extracting_EntryBytesWritten) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer, (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     ExtractTest.justHadByteUpdate = True
                 ElseIf (e.EventType = ZipProgressEventType.Extracting_BeforeExtractEntry) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName)
                     ExtractTest.justHadByteUpdate = False
                 End If
             End Sub
             </code>
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.SaveProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ReadProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.AddProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.AddProgress">
             <summary>
             An event handler invoked before, during, and after Adding entries to a zip archive.
             </summary>
            
             <remarks>
                 Adding a large number of entries to a zip file can take a long
                 time.  For example, when calling <see cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/> on a
                 directory that contains 50,000 files, it could take 3 minutes or so.
                 This event handler allws an application to track the progress of the Add
                 operation, and to optionally cancel a lengthy Add operation.
             </remarks>
            
             <example>
             <code lang="C#">
            
             int _numEntriesToAdd= 0;
             int _numEntriesAdded= 0;
             void AddProgressHandler(object sender, AddProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Adding_Started:
                         Console.WriteLine("Adding files to the zip...");
                         break;
                     case ZipProgressEventType.Adding_AfterAddEntry:
                         _numEntriesAdded++;
                         Console.WriteLine(String.Format("Adding file {0}/{1} :: {2}",
                                                  _numEntriesAdded, _numEntriesToAdd, e.CurrentEntry.FileName));
                         break;
                     case ZipProgressEventType.Adding_Completed:
                         Console.WriteLine("Added all files");
                         break;
                 }
             }
            
             void CreateTheZip()
             {
                 using (ZipFile zip = new ZipFile())
                 {
                     zip.AddProgress += AddProgressHandler;
                     zip.AddDirectory(System.IO.Path.GetFileName(DirToZip));
                     zip.Save(ZipFileToCreate);
                 }
             }
            
             </code>
            
             <code lang="VB">
            
             Private Sub AddProgressHandler(ByVal sender As Object, ByVal e As AddProgressEventArgs)
                 Select Case e.EventType
                     Case ZipProgressEventType.Adding_Started
                         Console.WriteLine("Adding files to the zip...")
                         Exit Select
                     Case ZipProgressEventType.Adding_AfterAddEntry
                         Console.WriteLine(String.Format("Adding file {0}", e.CurrentEntry.FileName))
                         Exit Select
                     Case ZipProgressEventType.Adding_Completed
                         Console.WriteLine("Added all files")
                         Exit Select
                 End Select
             End Sub
            
             Sub CreateTheZip()
                 Using zip as ZipFile = New ZipFile
                     AddHandler zip.AddProgress, AddressOf AddProgressHandler
                     zip.AddDirectory(System.IO.Path.GetFileName(DirToZip))
                     zip.Save(ZipFileToCreate);
                 End Using
             End Sub
            
             </code>
            
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.SaveProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ReadProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.ZipError">
             <summary>
             An event that is raised when an error occurs during open or read of files
             while saving a zip archive.
             </summary>
            
             <remarks>
              <para>
                 Errors can occur as a file is being saved to the zip archive.  For
                 example, the File.Open may fail, or a File.Read may fail, because of
                 lock conflicts or other reasons.  If you add a handler to this event,
                 you can handle such errors in your own code.  If you don't add a
                 handler, the library will throw an exception if it encounters an I/O
                 error during a call to <c>Save()</c>.
              </para>
            
              <para>
                Setting a handler implicitly sets <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/> to
                <c>ZipErrorAction.InvokeErrorEvent</c>.
              </para>
            
              <para>
                The handler you add applies to all <see cref="T:External.Zip.Internal.ZipEntry"/> items that are
                subsequently added to the <c>ZipFile</c> instance. If you set this
                property after you have added items to the <c>ZipFile</c>, but before you
                have called <c>Save()</c>, errors that occur while saving those items
                will not cause the error handler to be invoked.
              </para>
            
              <para>
                If you want to handle any errors that occur with any entry in the zip
                file using the same error handler, then add your error handler once,
                before adding any entries to the zip archive.
              </para>
            
              <para>
                In the error handler method, you need to set the <see
                cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/> property on the
                <c>ZipErrorEventArgs.CurrentEntry</c>.  This communicates back to
                DotNetZip what you would like to do with this particular error.  Within
                an error handler, if you set the <c>ZipEntry.ZipErrorAction</c> property
                on the <c>ZipEntry</c> to <c>ZipErrorAction.InvokeErrorEvent</c> or if
                you don't set it at all, the library will throw the exception. (It is the
                same as if you had set the <c>ZipEntry.ZipErrorAction</c> property on the
                <c>ZipEntry</c> to <c>ZipErrorAction.Throw</c>.) If you set the
                <c>ZipErrorEventArgs.Cancel</c> to true, the entire <c>Save()</c> will be
                canceled.
              </para>
            
              <para>
                In the case that you use <c>ZipErrorAction.Skip</c>, implying that
                you want to skip the entry for which there's been an error, DotNetZip
                tries to seek backwards in the output stream, and truncate all bytes
                written on behalf of that particular entry. This works only if the
                output stream is seekable.  It will not work, for example, when using
                ASPNET's Response.OutputStream.
              </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use an event handler to handle
             errors during save of the zip file.
             <code lang="C#">
            
             public static void MyZipError(object sender, ZipErrorEventArgs e)
             {
                 Console.WriteLine("Error saving {0}...", e.FileName);
                 Console.WriteLine("   Exception: {0}", e.exception);
                 ZipEntry entry = e.CurrentEntry;
                 string response = null;
                 // Ask the user whether he wants to skip this error or not
                 do
                 {
                     Console.Write("Retry, Skip, Throw, or Cancel ? (R/S/T/C) ");
                     response = Console.ReadLine();
                     Console.WriteLine();
            
                 } while (response != null &amp;&amp;
                          response[0]!='S' &amp;&amp; response[0]!='s' &amp;&amp;
                          response[0]!='R' &amp;&amp; response[0]!='r' &amp;&amp;
                          response[0]!='T' &amp;&amp; response[0]!='t' &amp;&amp;
                          response[0]!='C' &amp;&amp; response[0]!='c');
            
                 e.Cancel = (response[0]=='C' || response[0]=='c');
            
                 if (response[0]=='S' || response[0]=='s')
                     entry.ZipErrorAction = ZipErrorAction.Skip;
                 else if (response[0]=='R' || response[0]=='r')
                     entry.ZipErrorAction = ZipErrorAction.Retry;
                 else if (response[0]=='T' || response[0]=='t')
                     entry.ZipErrorAction = ZipErrorAction.Throw;
             }
            
             public void SaveTheFile()
             {
               string directoryToZip = "fodder";
               string directoryInArchive = "files";
               string zipFileToCreate = "Archive.zip";
               using (var zip = new ZipFile())
               {
                 // set the event handler before adding any entries
                 zip.ZipError += MyZipError;
                 zip.AddDirectory(directoryToZip, directoryInArchive);
                 zip.Save(zipFileToCreate);
               }
             }
             </code>
            
             <code lang="VB">
             Private Sub MyZipError(ByVal sender As Object, ByVal e As Ionic.Zip.ZipErrorEventArgs)
                 ' At this point, the application could prompt the user for an action to take.
                 ' But in this case, this application will simply automatically skip the file, in case of error.
                 Console.WriteLine("Zip Error,  entry {0}", e.CurrentEntry.FileName)
                 Console.WriteLine("   Exception: {0}", e.exception)
                 ' set the desired ZipErrorAction on the CurrentEntry to communicate that to DotNetZip
                 e.CurrentEntry.ZipErrorAction = Zip.ZipErrorAction.Skip
             End Sub
            
             Public Sub SaveTheFile()
                 Dim directoryToZip As String = "fodder"
                 Dim directoryInArchive As String = "files"
                 Dim zipFileToCreate as String = "Archive.zip"
                 Using zipArchive As ZipFile = New ZipFile
                     ' set the event handler before adding any entries
                     AddHandler zipArchive.ZipError, AddressOf MyZipError
                     zipArchive.AddDirectory(directoryToZip, directoryInArchive)
                     zipArchive.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractAll(System.String)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem.  The path can be relative or fully-qualified.
             </summary>
            
             <remarks>
             <para>
               This method will extract all entries in the <c>ZipFile</c> to the
               specified path.
             </para>
            
             <para>
               If an extraction of a file from the zip archive would overwrite an
               existing file in the filesystem, the action taken is dictated by the
               ExtractExistingFile property, which overrides any setting you may have
               made on individual ZipEntry instances.  By default, if you have not
               set that property on the <c>ZipFile</c> instance, the entry will not
               be extracted, the existing file will not be overwritten and an
               exception will be thrown. To change this, set the property, or use the
               ZipFile.ExtractAll(string, Ionic.Zip.ExtrExternal.ZipistingFileAction) overload that allows you to
               specify an ExtractExistingFileAction parameter.
             </para>
            
             <para>
               The action to take when an extract would overwrite an existing file
               applies to all entries.  If you want to set this on a per-entry basis,
               then you must use one of the <see
               cref="M:External.Zip.Internal.ZipEntry.Extract">ZipEntry.Extract</see> methods.
             </para>
            
             <para>
               This method will send verbose output messages to the <see
               cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
             You may wish to take advantage of the <c>ExtractProgress</c> event.
             </para>
            
             <para>
               About timestamps: When extracting a file entry from a zip archive, the
               extracted file gets the last modified time of the entry as stored in
               the archive. The archive may also store extended file timestamp
               information, including last accessed and created times. If these are
               present in the <c>ZipEntry</c>, then the extracted file will also get
               these times.
             </para>
            
             <para>
               A Directory entry is somewhat different. It will get the times as
               described for a file entry, but, if there are file entries in the zip
               archive that, when extracted, appear in the just-created directory,
               then when those file entries are extracted, the last modified and last
               accessed times of the directory will change, as a side effect.  The
               result is that after an extraction of a directory and a number of
               files within the directory, the last modified and last accessed
               timestamps on the directory will reflect the time that the last file
               was extracted into the directory, rather than the time stored in the
               zip archive for the directory.
             </para>
            
             <para>
               To compensate, when extracting an archive with <c>ExtractAll</c>,
               DotNetZip will extract all the file and directory entries as described
               above, but it will then make a second pass on the directories, and
               reset the times on the directories to reflect what is stored in the
               zip archive.
             </para>
            
             <para>
               This compensation is performed only within the context of an
               <c>ExtractAll</c>. If you call <c>ZipEntry.Extract</c> on a directory
               entry, the timestamps on directory in the filesystem will reflect the
               times stored in the zip.  If you then call <c>ZipEntry.Extract</c> on
               a file entry, which is extracted into the directory, the timestamps on
               the directory will be updated to the current time.
             </para>
             </remarks>
            
             <example>
               This example extracts all the entries in a zip archive file, to the
               specified target directory.  The extraction will overwrite any
               existing files silently.
            
             <code>
             String TargetDirectory= "unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently;
                 zip.ExtractAll(TargetDirectory);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently
                 zip.ExtractAll(TargetDirectory)
             End Using
             </code>
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>
            
             <param name="path">
               The path to which the contents of the zipfile will be extracted.
               The path can be relative or fully-qualified.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractAll(System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem, using the specified behavior when extraction would overwrite an
             existing file.
             </summary>
            
             <remarks>
            
             <para>
             This method will extract all entries in the <c>ZipFile</c> to the specified
             path.  For an extraction that would overwrite an existing file, the behavior
             is dictated by <paramref name="extractExistingFile"/>, which overrides any
             setting you may have made on individual ZipEntry instances.
             </para>
            
             <para>
             The action to take when an extract would overwrite an existing file
             applies to all entries.  If you want to set this on a per-entry basis,
             then you must use <see cref="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)" /> or one of the similar methods.
             </para>
            
             <para>
             Calling this method is equivalent to setting the <see
             cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/> property and then calling <see
             cref="M:External.Zip.Internal.ZipFile.ExtractAll(System.String)"/>.
             </para>
            
             <para>
             This method will send verbose output messages to the
             <see cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c> instance.
             </para>
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, to the
             specified target directory.  It does not overwrite any existing files.
             <code>
             String TargetDirectory= "c:\\unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
               zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "c:\unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite)
             End Using
             </code>
             </example>
            
             <param name="path">
             The path to which the contents of the zipfile will be extracted.
             The path can be relative or fully-qualified.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
             <seealso cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.String)">
             <summary>
             Reads a zip file archive and returns the instance.
             </summary>
            
             <remarks>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the
             <c>IBM437</c> codepage.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if the <c>ZipFile</c> cannot be read. The implementation of this method
             relies on <c>System.IO.File.OpenRead</c>, which can throw a variety of exceptions,
             including specific exceptions if a file is not found, an unauthorized access
             exception, exceptions for poorly formatted filenames, and so on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.  This can be a fully-qualified or relative
             pathname.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)"/>.
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)">
             <summary>
               Reads a zip file archive from the named filesystem file using the
               specified options.
             </summary>
            
             <remarks>
             <para>
               This version of the <c>Read()</c> method allows the caller to pass
               in a <c>TextWriter</c> an <c>Encoding</c>, via an instance of the
               <c>ReadOptions</c> class.  The <c>ZipFile</c> is read in using the
               specified encoding for entries where UTF-8 encoding is not
               explicitly specified.
             </para>
             </remarks>
            
             <example>
            
             <para>
               This example shows how to read a zip file using the Big-5 Chinese
               code page (950), and extract each entry in the zip file, while
               sending status messages out to the Console.
             </para>
            
             <para>
               For this code to work as intended, the zipfile must have been
               created using the big5 code page (CP950). This is typical, for
               example, when using WinRar on a machine with CP950 set as the
               default code page.  In that case, the names of entries within the
               Zip archive will be stored in that code page, and reading the zip
               archive must be done using that code page.  If the application did
               not use the correct code page in ZipFile.Read(), then names of
               entries within the zip archive would not be correctly retrieved.
             </para>
            
             <code lang="C#">
             string zipToExtract = "MyArchive.zip";
             string extractDirectory = "extract";
             var options = new ReadOptions
             {
               StatusMessageWriter = System.Console.Out,
               Encoding = System.Text.Encoding.GetEncoding(950)
             };
             using (ZipFile zip = ZipFile.Read(zipToExtract, options))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
            
            
             <code lang="VB">
             Dim zipToExtract as String = "MyArchive.zip"
             Dim extractDirectory as String = "extract"
             Dim options as New ReadOptions
             options.Encoding = System.Text.Encoding.GetEncoding(950)
             options.StatusMessageWriter = System.Console.Out
             Using zip As ZipFile = ZipFile.Read(zipToExtract, options)
                 Dim e As ZipEntry
                 For Each e In zip
                  e.Extract(extractDirectory)
                 Next
             End Using
             </code>
             </example>
            
            
             <example>
            
             <para>
               This example shows how to read a zip file using the default
               code page, to remove entries that have a modified date before a given threshold,
               sending status messages out to a <c>StringWriter</c>.
             </para>
            
             <code lang="C#">
             var options = new ReadOptions
             {
               StatusMessageWriter = new System.IO.StringWriter()
             };
             using (ZipFile zip =  ZipFile.Read("PackedDocuments.zip", options))
             {
               var Threshold = new DateTime(2007,7,4);
               // We cannot remove the entry from the list, within the context of
               // an enumeration of said list.
               // So we add the doomed entry to a list to be removed later.
               // pass 1: mark the entries for removal
               var MarkedEntries = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                   MarkedEntries.Add(e);
               }
               // pass 2: actually remove the entry.
               foreach (ZipEntry zombie in MarkedEntries)
                  zip.RemoveEntry(zombie);
               zip.Comment = "This archive has been updated.";
               zip.Save();
             }
             // can now use contents of sw, eg store in an audit log
             </code>
            
             <code lang="VB">
             Dim options as New ReadOptions
             options.StatusMessageWriter = New System.IO.StringWriter
             Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip", options)
                 Dim Threshold As New DateTime(2007, 7, 4)
                 ' We cannot remove the entry from the list, within the context of
                 ' an enumeration of said list.
                 ' So we add the doomed entry to a list to be removed later.
                 ' pass 1: mark the entries for removal
                 Dim MarkedEntries As New System.Collections.Generic.List(Of ZipEntry)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.LastModified &lt; Threshold) Then
                         MarkedEntries.Add(e)
                     End If
                 Next
                 ' pass 2: actually remove the entry.
                 Dim zombie As ZipEntry
                 For Each zombie In MarkedEntries
                     zip.RemoveEntry(zombie)
                 Next
                 zip.Comment = "This archive has been updated."
                 zip.Save
             End Using
             ' can now use contents of sw, eg store in an audit log
             </code>
             </example>
            
             <exception cref="T:System.Exception">
               Thrown if the zipfile cannot be read. The implementation of
               this method relies on <c>System.IO.File.OpenRead</c>, which
               can throw a variety of exceptions, including specific
               exceptions if a file is not found, an unauthorized access
               exception, exceptions for poorly formatted filenames, and so
               on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="options">
             The set of options to use when reading the zip file.
             </param>
            
             <returns>The ZipFile instance read from the zip archive.</returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{External.Zip.Internal.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding,  the specified
             TextWriter for status messages, and the specified ReadProgress event handler,
             and returns the instance.
             </summary>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages
             during operations on the zip archive.  A console application may wish to
             pass <c>System.Console.Out</c> to get messages on the Console. A graphical
             or headless application may wish to capture the messages in a different
             <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
             </param>
            
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream)">
             <summary>
               Reads a zip archive from a stream.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Using this overload, the stream is read using the default
               <c>System.Text.Encoding</c>, which is the <c>IBM437</c>
               codepage. If you want to specify the encoding to use when
               reading the zipfile content, see
               <see cref="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)">ZipFile.Read(Stream, ReadOptions)</see>.  This
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream" /> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example shows how to Read zip content from a stream, and
               extract one entry into a different stream. In this example,
               the filename "NameOfEntryInArchive.doc", refers only to the
               name of the entry within the zip archive.  A file by that
               name is not created in the filesystem.  The I/O is done
               strictly with the given streams.
             </para>
            
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
                zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
            
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
                zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>The ZipFile instance read from the stream</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)">
             <summary>
               Reads a zip file archive from the given stream using the
               specified options.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream" /> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="options">
               The set of options to use when reading the zip file.
             </param>
            
             <exception cref="T:System.Exception">
               Thrown if the zip archive cannot be read.
             </exception>
            
             <returns>The ZipFile instance read from the stream.</returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{External.Zip.Internal.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding, the
             specified TextWriter for status messages,
             and the specified ReadProgress event handler.
             </summary>
            
             <remarks>
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.IsZipFile(System.String)">
             <summary>
             Checks the given file to see if it appears to be a valid zip file.
             </summary>
             <remarks>
            
             <para>
               Calling this method is equivalent to calling <see cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)"/> with the testExtract parameter set to false.
             </para>
             </remarks>
            
             <param name="fileName">The file to check.</param>
             <returns>true if the file appears to be a zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)">
             <summary>
             Checks a file to see if it is a valid zip file.
             </summary>
            
             <remarks>
             <para>
               This method opens the specified zip file, reads in the zip archive,
               verifying the ZIP metadata as it reads.
             </para>
            
             <para>
               If everything succeeds, then the method returns true.  If anything fails -
               for example if an incorrect signature or CRC is found, indicating a
               corrupt file, the the method returns false.  This method also returns
               false for a file that does not exist.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, as part of its check, this
               method reads in the content for each entry, expands it, and checks CRCs.
               This provides an additional check beyond verifying the zip header and
               directory data.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, and if any of the zip entries
               are protected with a password, this method will return false.  If you want
               to verify a <c>ZipFile</c> that has entries which are protected with a
               password, you will need to do that manually.
             </para>
            
             </remarks>
            
             <param name="fileName">The zip file to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.IsZipFile(System.IO.Stream,System.Boolean)">
             <summary>
             Checks a stream to see if it contains a valid zip archive.
             </summary>
            
             <remarks>
             <para>
             This method reads the zip archive contained in the specified stream, verifying
             the ZIP metadata as it reads.  If testExtract is true, this method also extracts
             each entry in the archive, dumping all the bits into <see cref="F:System.IO.Stream.Null"/>.
             </para>
            
             <para>
             If everything succeeds, then the method returns true.  If anything fails -
             for example if an incorrect signature or CRC is found, indicating a corrupt
             file, the the method returns false.  This method also returns false for a
             file that does not exist.
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)"/>
            
             <param name="stream">The stream to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the stream contains a valid zip archive.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.DeleteFileWithRetry(System.String)">
             <summary>
               Delete file with retry on UnauthorizedAccessException.
             </summary>
            
             <remarks>
               <para>
                 When calling File.Delete() on a file that has been "recently"
                 created, the call sometimes fails with
                 UnauthorizedAccessException. This method simply retries the Delete 3
                 times with a sleep between tries.
               </para>
             </remarks>
            
             <param name='filename'>the name of the file to be deleted</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Save">
             <summary>
               Saves the Zip archive to a file, specified by the Name property of the
               <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage, typically a zip file
               in a filesystem, only when the caller calls <c>Save</c>.  In the typical
               case, the Save operation writes the zip content to a temporary file, and
               then renames the temporary file to the desired name. If necessary, this
               method will delete a pre-existing file before the rename.
             </para>
            
             <para>
               The <see cref="P:External.Zip.Internal.ZipFile.Name"/> property is specified either explicitly,
               or implicitly using one of the parameterized ZipFile constructors.  For
               COM Automation clients, the <c>Name</c> property must be set explicitly,
               because COM Automation clients cannot call parameterized constructors.
             </para>
            
             <para>
               When using a filesystem file for the Zip output, it is possible to call
               <c>Save</c> multiple times on the <c>ZipFile</c> instance. With each
               call the zip content is re-written to the same output file.
             </para>
            
             <para>
               Data for entries that have been added to the <c>ZipFile</c> instance is
               written to the output when the <c>Save</c> method is called. This means
               that the input streams for those entries must be available at the time
               the application calls <c>Save</c>.  If, for example, the application
               adds entries with <c>AddEntry</c> using a dynamically-allocated
               <c>MemoryStream</c>, the memory stream must not have been disposed
               before the call to <c>Save</c>. See the <see
               cref="P:External.Zip.Internal.ZipEntry.InputStream"/> property for more discussion of the
               availability requirements of the input stream for an entry, and an
               approach for providing just-in-time stream lifecycle management.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
            
             <exception cref="T:External.Zip.Internal.BadStateException">
               Thrown if you haven't specified a location or stream for saving the zip,
               either in the constructor or by setting the Name property, or if you try
               to save a regular zip archive to a filename with a .exe extension.
             </exception>
            
             <exception cref="T:System.OverflowException">
               Thrown if <see cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/> is non-zero, and the number
               of segments that would be generated for the spanned zip file during the
               save operation exceeds 99.  If this happens, you need to increase the
               segment size.
             </exception>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Save(System.String)">
             <summary>
             Save the file to a new zipfile, with the given name.
             </summary>
            
             <remarks>
             <para>
             This method allows the application to explicitly specify the name of the zip
             file when saving. Use this when creating a new zip file, or when
             updating a zip archive.
             </para>
            
             <para>
             An application can also save a zip archive in several places by calling this
             method multiple times in succession, with different filenames.
             </para>
            
             <para>
             The <c>ZipFile</c> instance is written to storage, typically a zip file in a
             filesystem, only when the caller calls <c>Save</c>.  The Save operation writes
             the zip content to a temporary file, and then renames the temporary file
             to the desired name. If necessary, this method will delete a pre-existing file
             before the rename.
             </para>
            
             </remarks>
            
             <exception cref="T:System.ArgumentException">
             Thrown if you specify a directory for the filename.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to save to. Existing files will
             be overwritten with great prejudice.
             </param>
            
             <example>
             This example shows how to create and Save a zip file.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               zip.AddDirectory(@"c:\reports\January");
               zip.Save("January.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile()
               zip.AddDirectory("c:\reports\January")
               zip.Save("January.zip")
             End Using
             </code>
            
             </example>
            
             <example>
             This example shows how to update a zip file.
             <code>
             using (ZipFile zip = ZipFile.Read("ExistingArchive.zip"))
             {
               zip.AddFile("NewData.csv");
               zip.Save("UpdatedArchive.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read("ExistingArchive.zip")
               zip.AddFile("NewData.csv")
               zip.Save("UpdatedArchive.zip")
             End Using
             </code>
            
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Save(System.IO.Stream)">
             <summary>
               Save the zip archive to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage - typically a zip file
               in a filesystem, but using this overload, the storage can be anything
               accessible via a writable stream - only when the caller calls <c>Save</c>.
             </para>
            
             <para>
               Use this method to save the zip content to a stream directly.  A common
               scenario is an ASP.NET application that dynamically generates a zip file
               and allows the browser to download it. The application can call
               <c>Save(Response.OutputStream)</c> to write a zipfile directly to the
               output stream, without creating a zip file on the disk on the ASP.NET
               server.
             </para>
            
             <para>
               Be careful when saving a file to a non-seekable stream, including
               <c>Response.OutputStream</c>. When DotNetZip writes to a non-seekable
               stream, the zip archive is formatted in such a way that may not be
               compatible with all zip tools on all platforms.  It's a perfectly legal
               and compliant zip file, but some people have reported problems opening
               files produced this way using the Mac OS archive utility.
             </para>
            
             </remarks>
            
             <example>
            
               This example saves the zipfile content into a MemoryStream, and
               then gets the array of bytes from that MemoryStream.
            
             <code lang="C#">
             using (var zip = new Ionic.Zip.ZipFile())
             {
                 zip.CompressionLevel= Ionic.Zlib.CompressionLevel.BestCompression;
                 zip.Password = "VerySecret.";
                 zip.Encryption = EncryptionAlgorithm.WinZipAes128;
                 zip.AddFile(sourceFileName);
                 MemoryStream output = new MemoryStream();
                 zip.Save(output);
            
                 byte[] zipbytes = output.ToArray();
             }
             </code>
             </example>
            
             <example>
             <para>
               This example shows a pitfall you should avoid. DO NOT read
               from a stream, then try to save to the same stream.  DO
               NOT DO THIS:
             </para>
            
             <code lang="C#">
             using (var fs = new FileSteeam(filename, FileMode.Open))
             {
               using (var zip = Ionic.Zip.ZipFile.Read(inputStream))
               {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save(inputStream);  // NO NO NO!!
               }
             }
             </code>
            
             <para>
               Better like this:
             </para>
            
             <code lang="C#">
             using (var zip = Ionic.Zip.ZipFile.Read(filename))
             {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save();  // YES!
             }
             </code>
            
             </example>
            
             <param name="outputStream">
               The <c>System.IO.Stream</c> to write to. It must be
               writable. If you created the ZipFile instanct by calling
               ZipFile.Read(), this stream must not be the same stream
               you passed to ZipFile.Read().
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SaveSelfExtractor(System.String,External.Zip.Internal.SelfExtractorFlavor)">
             <summary>
             Saves the ZipFile instance to a self-extracting zip archive.
             </summary>
            
             <remarks>
            
             <para>
             The generated exe image will execute on any machine that has the .NET
             Framework 2.0 installed on it.  The generated exe image is also a
             valid ZIP file, readable with DotNetZip or another Zip library or tool
             such as WinZip.
             </para>
            
             <para>
             There are two "flavors" of self-extracting archive.  The
             <c>WinFormsApplication</c> version will pop up a GUI and allow the
             user to select a target directory into which to extract. There's also
             a checkbox allowing the user to specify to overwrite existing files,
             and another checkbox to allow the user to request that Explorer be
             opened to see the extracted files after extraction.  The other flavor
             is <c>ConsoleApplication</c>.  A self-extractor generated with that
             flavor setting will run from the command line. It accepts command-line
             options to set the overwrite behavior, and to specify the target
             extraction directory.
             </para>
            
             <para>
             There are a few temporary files created during the saving to a
             self-extracting zip.  These files are created in the directory pointed
             to by <see cref="P:External.Zip.Internal.ZipFile.TempFileFolder"/>, which defaults to <see
             cref="M:System.IO.Path.GetTempPath"/>.  These temporary files are
             removed upon successful completion of this method.
             </para>
            
             <para>
             When a user runs the WinForms SFX, the user's personal directory (<see
             cref="F:System.Environment.SpecialFolder.Personal">Environment.SpecialFolder.Personal</see>)
             will be used as the default extract location.  If you want to set the
             default extract location, you should use the other overload of
             <c>SaveSelfExtractor()</c>/ The user who runs the SFX will have the
             opportunity to change the extract directory before extracting. When
             the user runs the Command-Line SFX, the user must explicitly specify
             the directory to which to extract.  The .NET Framework 2.0 is required
             on the computer when the self-extracting archive is run.
             </para>
            
             <para>
             NB: This method is not available in the version of DotNetZip build for
             the .NET Compact Framework, nor in the "Reduced" DotNetZip library.
             </para>
            
             </remarks>
            
             <example>
             <code>
             string DirectoryPath = "c:\\Documents\\Project7";
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath));
                 zip.Comment = "This will be embedded into a self-extracting console-based exe";
                 zip.SaveSelfExtractor("archive.exe", SelfExtractorFlavor.ConsoleApplication);
             }
             </code>
             <code lang="VB">
             Dim DirectoryPath As String = "c:\Documents\Project7"
             Using zip As New ZipFile()
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath))
                 zip.Comment = "This will be embedded into a self-extracting console-based exe"
                 zip.SaveSelfExtractor("archive.exe", SelfExtractorFlavor.ConsoleApplication)
             End Using
             </code>
             </example>
            
             <param name="exeToGenerate">
               a pathname, possibly fully qualified, to be created. Typically it
               will end in an .exe extension.</param>
             <param name="flavor">
               Indicates whether a Winforms or Console self-extractor is
               desired. </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SaveSelfExtractor(System.String,External.Zip.Internal.SelfExtractorSaveOptions)">
             <summary>
               Saves the ZipFile instance to a self-extracting zip archive, using
               the specified save options.
             </summary>
            
             <remarks>
             <para>
               This method saves a self extracting archive, using the specified save
               options. These options include the flavor of the SFX, the default extract
               directory, the icon file, and so on.  See the documentation
               for <see cref="M:External.Zip.Internal.ZipFile.SaveSelfExtractor(System.String,External.Zip.Internal.SelfExtractorFlavor)"/> for more
               details.
             </para>
            
             <para>
               The user who runs the SFX will have the opportunity to change the extract
               directory before extracting. If at the time of extraction, the specified
               directory does not exist, the SFX will create the directory before
               extracting the files.
             </para>
            
             </remarks>
            
             <example>
               This example saves a WinForms-based self-extracting archive EXE that
               will use c:\ExtractHere as the default extract location. The C# code
               shows syntax for .NET 3.0, which uses an object initializer for
               the SelfExtractorOptions object.
             <code>
             string DirectoryPath = "c:\\Documents\\Project7";
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath));
                 zip.Comment = "This will be embedded into a self-extracting WinForms-based exe";
                 var options = new SelfExtractorOptions
                 {
                   Flavor = SelfExtractorFlavor.WinFormsApplication,
                   DefaultExtractDirectory = "%USERPROFILE%\\ExtractHere",
                   PostExtractCommandLine = ExeToRunAfterExtract,
                   SfxExeWindowTitle = "My Custom Window Title",
                   RemoveUnpackedFilesAfterExecute = true
                 };
                 zip.SaveSelfExtractor("archive.exe", options);
             }
             </code>
             <code lang="VB">
             Dim DirectoryPath As String = "c:\Documents\Project7"
             Using zip As New ZipFile()
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath))
                 zip.Comment = "This will be embedded into a self-extracting console-based exe"
                 Dim options As New SelfExtractorOptions()
                 options.Flavor = SelfExtractorFlavor.WinFormsApplication
                 options.DefaultExtractDirectory = "%USERPROFILE%\\ExtractHere"
                 options.PostExtractCommandLine = ExeToRunAfterExtract
                 options.SfxExeWindowTitle = "My Custom Window Title"
                 options.RemoveUnpackedFilesAfterExecute = True
                 zip.SaveSelfExtractor("archive.exe", options)
             End Using
             </code>
             </example>
            
             <param name="exeToGenerate">The name of the EXE to generate.</param>
             <param name="options">provides the options for creating the
             Self-extracting archive.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)">
             <summary>
               Adds to the ZipFile a set of files from the current working directory on
               disk, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.
             </para>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator, and
               a value.  Consider the string "name != *.doc" .  The noun is "name".  The
               operator is "!=", implying "Not Equal".  The value is "*.doc".  That
               criterion, in English, says "all files with a name that does not end in
               the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename; "atime",
               "mtime", and "ctime" for last access time, last modfied time, and created
               time of the file, respectively; "attributes" (or "attrs") for the file
               attributes; "size" (or "length") for the file length (uncompressed), and
               "type" for the type of object, either a file or a directory.  The
               "attributes", "name" and "type" nouns both support = and != as operators.
               The "size", "atime", "mtime", and "ctime" nouns support = and !=, and
               &gt;, &gt;=, &lt;, &lt;= as well. The times are taken to be expressed in
               local time.
             </para>
            
             <para>
             Specify values for the file attributes as a string with one or more of the
             characters H,R,S,A,I,L in any order, implying file attributes of Hidden,
             ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint (symbolic
             link) respectively.
             </para>
            
             <para>
             To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as the
             format.  If you omit the HH:mm:ss portion, it is assumed to be 00:00:00
             (midnight).
             </para>
            
             <para>
             The value for a size criterion is expressed in integer quantities of bytes,
             kilobytes (use k or kb after the number), megabytes (m or mb), or gigabytes
             (g or gb).
             </para>
            
             <para>
             The value for a name is a pattern to match against the filename, potentially
             including wildcards.  The pattern follows CMD.exe glob rules: * implies one
             or more of any character, while ?  implies one character.  If the name
             pattern contains any slashes, it is matched to the entire filename,
             including the path; otherwise, it is matched against only the filename
             without the path.  This means a pattern of "*\*.*" matches all files one
             directory level deep, while a pattern of "*.*" matches all files in all
             directories.
             </para>
            
             <para>
             To specify a name pattern that includes spaces, use single quotes around the
             pattern.  A pattern of "'* *.*'" will match all files that have spaces in
             the filename.  The full criteria string for that would be "name = '* *.*'" .
             </para>
            
             <para>
             The value for a type criterion is either F (implying a file) or D (implying
             a directory).
             </para>
            
             <para>
             Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime > 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size > 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
             You can combine criteria with the conjunctions AND or OR. Using a string
             like "name = *.txt AND size &gt;= 100k" for the selectionCriteria retrieves
             entries whose names end in .txt, and whose uncompressed size is greater than
             or equal to 100 kilobytes.
             </para>
            
             <para>
             For more complex combinations of criteria, you can use parenthesis to group
             clauses in the boolean logic.  Without parenthesis, the precedence of the
             criterion atoms is determined by order of appearance.  Unlike the C#
             language, the AND conjunction does not take precendence over the logical OR.
             This is important only in strings that contain 3 or more criterion atoms.
             In other words, "name = *.txt and size &gt; 1000 or attributes = H" implies
             "((name = *.txt AND size &gt; 1000) OR attributes = H)" while "attributes =
             H OR name = *.txt and size &gt; 1000" evaluates to "((attributes = H OR name
             = *.txt) AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
             Using time properties requires some extra care. If you want to retrieve all
             entries that were last updated on 2009 February 14, specify a time range
             like so:"mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this to
             say: all files updated after 12:00am on February 14th, until 12:00am on
             February 15th.  You can use the same bracketing approach to specify any time
             period - a year, a month, a week, and so on.
             </para>
            
             <para>
             The syntax allows one special case: if you provide a string with no spaces, it is
             treated as a pattern to match for the filename.  Therefore a string like "*.xls"
             will be equivalent to specifying "name = *.xls".
             </para>
            
             <para>
             There is no logic in this method that insures that the file inclusion
             criteria are internally consistent.  For example, it's possible to specify
             criteria that says the file must have a size of less than 100 bytes, as well
             as a size that is greater than 1000 bytes. Obviously no file will ever
             satisfy such criteria, but this method does not detect such logical
             inconsistencies. The caller is responsible for insuring the criteria are
             sensible.
             </para>
            
             <para>
               Using this method, the file selection does not recurse into
               subdirectories, and the full path of the selected files is included in the
               entries added into the zip archive.  If you don't like these behaviors,
               see the other overloads of this method.
             </para>
             </remarks>
            
             <example>
             This example zips up all *.csv files in the current working directory.
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // To just match on filename wildcards,
                 // use the shorthand form of the selectionCriteria string.
                 zip.AddSelectedFiles("*.csv");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 zip.AddSelectedFiles("*.csv")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the disk that conform to the
               specified criteria, optionally recursing into subdirectories.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the current working directory.
             </para>
            
             <para>
               Using this method, the full path of the selected files is included in the
               entries added into the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see
               cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files in the current working directory, or any
               subdirectory, that are larger than 1mb.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)">
             <summary>
               Adds to the ZipFile a set of files from a specified directory in the
               filesystem, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files that conform to the specified criteria, from the
               the specified directory on disk, and adds them to the ZipFile.  The search
               does not recurse into subdirectores.
             </para>
            
             <para>
               Using this method, the full filesystem path of the files on disk is
               reproduced on the entries added to the zip file.  If you don't want this
               behavior, use one of the other overloads of this method.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see
               cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files larger than 1mb in the directory
               given by "d:\rawdata".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", "d:\\rawdata");
                 zip.Save(PathToZipArchive);
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", "d:\rawdata)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the specified directory on disk,
               that conform to the specified criteria.
             </summary>
            
             <remarks>
            
             <para>
               This method selects files from the the specified disk directory matching
               the specified selection criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories.
             </para>
            
             <para>
               The full directory structure in the filesystem is reproduced on the
               entries added to the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see
               cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
            
               This example zips up all *.csv files in the "files" directory, or any
               subdirectory, that have been saved since 2009 February 14th.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime > 2009-02-14", "files", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime > 2009-02-14", "files", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <example>
               This example zips up all files in the current working
               directory, and all its child directories, except those in
               the <c>excludethis</c> subdirectory.
             <code lang="VB">
             Using Zip As ZipFile = New ZipFile(zipfile)
               Zip.AddSelectedFfiles("name != 'excludethis\*.*'", datapath, True)
               Zip.Save()
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
               The filesystem path from which to select files.
             </param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.String)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, and using a specified root
               path for entries added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the specified disk directory matching the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive.  The search does not recurse
               into subdirectories.  For details on the syntax for the selectionCriteria
               parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.psd files in the "photos" directory that have
               been saved since 2009 February 14th, and puts them all in a zip file,
               using the directory name of "content" in the zip archive itself. When the
               zip archive is unzipped, the folder containing the .psd files will be
               named "content".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.psd  and  mtime > 2009-02-14", "photos", "content");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name = *.psd  and  mtime > 2009-02-14", "photos", "content")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, optionally recursing through
               subdirectories, and using a specified root path for entries added to the
               zip archive.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive. If <c>recurseDirectories</c>
               is true, files are also selected from subdirectories, and the directory
               structure in the filesystem is reproduced in the zip archive, rooted at
               the directory specified by <c>directoryOnDisk</c>.  For details on the
               syntax for the selectionCriteria parameter, see <see
               cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </remarks>
            
             <example>
            
               This example zips up all files that are NOT *.pst files, in the current
               working directory and any subdirectories.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="recurseDirectories">
               If true, the method also scans subdirectories for files matching the
               criteria.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Updates the ZipFile with a selection of files from the disk that conform
               to the specified criteria.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and Updates the <c>ZipFile</c> with those
               files, using the specified directory path in the archive. If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the directory specified by
               <c>directoryOnDisk</c>.  For details on the syntax for the
               selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </remarks>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>. This path may, or may not, correspond to a
               real directory in the current filesystem. If the files within the zip
               are later extracted, this is the path used for the extracted file.
               Passing null (nothing in VB) will use the path on the file name, if
               any; in other words it would use <c>directoryOnDisk</c>, plus any
               subdirectory.  Passing the empty string ("") will insert the item at
               the root path within the archive.
             </param>
            
             <param name="recurseDirectories">
               If true, the method also scans subdirectories for files matching the criteria.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SelectEntries(System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             This example selects all the PhotoShop files from within an archive, and extracts them
             to the current working directory.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var PhotoShopFiles = zip1.SelectEntries("*.psd");
                 foreach (ZipEntry psd in PhotoShopFiles)
                 {
                     psd.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim PhotoShopFiles as ICollection(Of ZipEntry)
                 PhotoShopFiles = zip1.SelectEntries("*.psd")
                 Dim psd As ZipEntry
                 For Each psd In PhotoShopFiles
                     psd.Extract
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SelectEntries(System.String,System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var UpdatedPhotoShopFiles = zip1.SelectEntries("*.psd", "UpdatedFiles");
                 foreach (ZipEntry e in UpdatedPhotoShopFiles)
                 {
                     // prompt for extract here
                     if (WantExtract(e.FileName))
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim UpdatedPhotoShopFiles As ICollection(Of ZipEntry) = zip1.SelectEntries("*.psd", "UpdatedFiles")
                 Dim e As ZipEntry
                 For Each e In UpdatedPhotoShopFiles
                     ' prompt for extract here
                     If Me.WantExtract(e.FileName) Then
                         e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             This example removes all entries in a zip file that were modified prior to January 1st, 2008.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01");
                 // don't forget to save the archive!
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01")
                 ' do not forget to save the archive!
                 zip1.Save
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String,System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria, and within the specified
             path in the archive.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents");
                 // a call to ZipFile.Save will make the modifications permanent
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents")
                 ' a call to ZipFile.Save will make the modifications permanent
                 zip1.Save
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory.
             </para>
            
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
            
             <para>
             For information on the syntax of the selectionCriteria string,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15");
             }
             </code>
             </example>
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             <paramref name="extractExistingFile"/> parameter.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009,
             overwriting any existing files.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15",
                                          ExtractExistingFileAction.OverwriteSilently);
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are selected from the specified directory within the archive, and then
             extracted into the current working directory.
             </para>
            
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009,
             and writes them to the "unpack" directory.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15","unpack");
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. If any of the files to be
             extracted already exist, an exception will be thrown.
             </para>
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <param name="extractDirectory">
             the directory on the disk into which to extract. It will be created
             if it does not exist.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             <paramref name="extractExistingFile"/> parameter.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all files  with an XML extension or with  a size larger than 100,000 bytes,
             and puts them in the unpack directory.  For any files that already exist in
             that destination directory, they will not be overwritten.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  or  size &gt; 100000",
                                          null,
                                          "unpack",
                                          ExtractExistingFileAction.DontOverwrite);
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractDirectory">
             The directory on the disk into which to extract. It will be created if it does not exist.
             </param>
            
             <param name="directoryPathInArchive">
             The directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.GetEnumerator">
             <summary>
             Generic IEnumerator support, for use of a ZipFile in an enumeration.
             </summary>
            
             <remarks>
             You probably do not want to call <c>GetEnumerator</c> explicitly. Instead
             it is implicitly called when you use a <see langword="foreach"/> loop in C#, or a
             <c>For Each</c> loop in VB.NET.
             </remarks>
            
             <example>
             This example reads a zipfile of a given name, then enumerates the
             entries in that zip file, and displays the information about each
             entry on the Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               bool header = true;
               foreach (ZipEntry e in zip)
               {
                 if (header)
                 {
                    System.Console.WriteLine("Zipfile: {0}", zip.Name);
                    System.Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded);
                    System.Console.WriteLine("BitField: 0x{0:X2}", e.BitField);
                    System.Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod);
                    System.Console.WriteLine("\n{1,-22} {2,-6} {3,4}   {4,-8}  {0}",
                                 "Filename", "Modified", "Size", "Ratio", "Packed");
                    System.Console.WriteLine(new System.String('-', 72));
                    header = false;
                 }
            
                 System.Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}",
                             e.FileName,
                             e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                             e.UncompressedSize,
                             e.CompressionRatio,
                             e.CompressedSize);
            
                 e.Extract();
               }
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToExtract As String = "c:\foo.zip"
               Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                   Dim header As Boolean = True
                   Dim e As ZipEntry
                   For Each e In zip
                       If header Then
                           Console.WriteLine("Zipfile: {0}", zip.Name)
                           Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded)
                           Console.WriteLine("BitField: 0x{0:X2}", e.BitField)
                           Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod)
                           Console.WriteLine(ChrW(10) &amp; "{1,-22} {2,-6} {3,4}   {4,-8}  {0}", _
                             "Filename", "Modified", "Size", "Ratio", "Packed" )
                           Console.WriteLine(New String("-"c, 72))
                           header = False
                       End If
                       Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}", _
                         e.FileName, _
                         e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"), _
                         e.UncompressedSize, _
                         e.CompressionRatio, _
                         e.CompressedSize )
                       e.Extract
                   Next
               End Using
             </code>
             </example>
            
             <returns>A generic enumerator suitable for use  within a foreach loop.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.GetNewEnum">
             <summary>
             An IEnumerator, for use of a ZipFile in a foreach construct.
             </summary>
            
             <remarks>
             This method is included for COM support.  An application generally does not call
             this method directly.  It is called implicitly by COM clients when enumerating
             the entries in the ZipFile instance.  In VBScript, this is done with a <c>For Each</c>
             statement.  In Javascript, this is done with <c>new Enumerator(zipfile)</c>.
             </remarks>
            
             <returns>
             The IEnumerator over the entries in the ZipFile.
             </returns>
        </member>
        <member name="T:External.Zip.Internal.Zip64Option">
             <summary>
               Options for using ZIP64 extensions when saving zip archives.
             </summary>
            
             <remarks>
            
             <para>
               Designed many years ago, the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">original zip
               specification from PKWARE</see> allowed for 32-bit quantities for the
               compressed and uncompressed sizes of zip entries, as well as a 32-bit quantity
               for specifying the length of the zip archive itself, and a maximum of 65535
               entries.  These limits are now regularly exceeded in many backup and archival
               scenarios.  Recently, PKWare added extensions to the original zip spec, called
               "ZIP64 extensions", to raise those limitations.  This property governs whether
               DotNetZip will use those extensions when writing zip archives. The use of
               these extensions is optional and explicit in DotNetZip because, despite the
               status of ZIP64 as a bona fide standard, many other zip tools and libraries do
               not support ZIP64, and therefore a zip file with ZIP64 extensions may be
               unreadable by some of those other tools.
             </para>
            
             <para>
               Set this property to <see cref="F:External.Zip.Internal.Zip64Option.Always"/> to always use ZIP64
               extensions when saving, regardless of whether your zip archive needs it.
               Suppose you add 5 files, each under 100k, to a ZipFile. If you specify Always
               for this flag, you will get a ZIP64 archive, though the archive does not need
               to use ZIP64 because none of the original zip limits had been exceeded.
             </para>
            
             <para>
               Set this property to <see cref="F:External.Zip.Internal.Zip64Option.Never"/> to tell the DotNetZip
               library to never use ZIP64 extensions.  This is useful for maximum
               compatibility and interoperability, at the expense of the capability of
               handling large files or large archives.  NB: Windows Explorer in Windows XP
               and Windows Vista cannot currently extract files from a zip64 archive, so if
               you want to guarantee that a zip archive produced by this library will work in
               Windows Explorer, use <c>Never</c>. If you set this property to <see
               cref="F:External.Zip.Internal.Zip64Option.Never"/>, and your application creates a zip that would
               exceed one of the Zip limits, the library will throw an exception while saving
               the zip file.
             </para>
            
             <para>
               Set this property to <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> to tell the
               DotNetZip library to use the ZIP64 extensions when required by the
               entry. After the file is compressed, the original and compressed sizes are
               checked, and if they exceed the limits described above, then zip64 can be
               used. That is the general idea, but there is an additional wrinkle when saving
               to a non-seekable device, like the ASP.NET <c>Response.OutputStream</c>, or
               <c>Console.Out</c>.  When using non-seekable streams for output, the entry
               header - which indicates whether zip64 is in use - is emitted before it is
               known if zip64 is necessary.  It is only after all entries have been saved
               that it can be known if ZIP64 will be required.  On seekable output streams,
               after saving all entries, the library can seek backward and re-emit the zip
               file header to be consistent with the actual ZIP64 requirement.  But using a
               non-seekable output stream, the library cannot seek backward, so the header
               can never be changed. In other words, the archive's use of ZIP64 extensions is
               not alterable after the header is emitted.  Therefore, when saving to
               non-seekable streams, using <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> is the same
               as using <see cref="F:External.Zip.Internal.Zip64Option.Always"/>: it will always produce a zip
               archive that uses ZIP64 extensions.
             </para>
            
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.Default">
            <summary>
            The default behavior, which is "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary.
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipOption">
            <summary>
             An enum representing the values on a three-way toggle switch
             for various options in the library. This might be used to
             specify whether to employ a particular text encoding, or to use
             ZIP64 extensions, or some other option.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.Default">
            <summary>
            The default behavior. This is the same as "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.Never">
            <summary>
            Never use the associated option.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.AsNecessary">
            <summary>
            Use the associated behavior "as necessary."
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.Always">
            <summary>
            Use the associated behavior Always, whether necessary or not.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ReadOptions">
             <summary>
               A class for collecting the various options that can be used when
               Reading zip files for extraction or update.
             </summary>
            
             <remarks>
               <para>
                 When reading a zip file, there are several options an
                 application can set, to modify how the file is read, or what
                 the library does while reading.  This class collects those
                 options into one container.
               </para>
            
               <para>
                 Pass an instance of the <c>ReadOptions</c> class into the
                 <c>ZipFile.Read()</c> method.
               </para>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)"/>.
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)"/>.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ReadOptions.ReadProgress">
            <summary>
            An event handler for Read operations.  When opening large zip
            archives, you may want to display a progress bar or other
            indicator of status progress while reading.  This parameter
            allows you to specify a ReadProgress Event Handler directly.
            When you call <c>Read()</c>, the progress event is invoked as
            necessary.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ReadOptions.StatusMessageWriter">
            <summary>
            The <c>System.IO.TextWriter</c> to use for writing verbose status messages
            during operations on the zip archive.  A console application may wish to
            pass <c>System.Console.Out</c> to get messages on the Console. A graphical
            or headless application may wish to capture the messages in a different
            <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ReadOptions.Encoding">
             <summary>
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </summary>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
            
        </member>
        <member name="T:External.Zip.Internal.SelfExtractorFlavor">
            <summary>
            An enum that provides the different self-extractor flavors
            </summary>
        </member>
        <member name="F:External.Zip.Internal.SelfExtractorFlavor.ConsoleApplication">
            <summary>
            A self-extracting zip archive that runs from the console or
            command line.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.SelfExtractorFlavor.WinFormsApplication">
            <summary>
            A self-extracting zip archive that presents a graphical user
            interface when it is executed.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.SelfExtractorSaveOptions">
            <summary>
            The options for generating a self-extracting archive.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Flavor">
            <summary>
              The type of SFX to create.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.PostExtractCommandLine">
             <summary>
               The command to run after extraction.
             </summary>
            
             <remarks>
             <para>
               This is optional. Leave it empty (<c>null</c> in C# or <c>Nothing</c> in
               VB) to run no command after extraction.
             </para>
            
             <para>
               If it is non-empty, the SFX will execute the command specified in this
               string on the user's machine, and using the extract directory as the
               working directory for the process, after unpacking the archive. The
               program to execute can include a path, if you like. If you want to execute
               a program that accepts arguments, specify the program name, followed by a
               space, and then the arguments for the program, each separated by a space,
               just as you would on a normal command line. Example: <c>program.exe arg1
               arg2</c>.  The string prior to the first space will be taken as the
               program name, and the string following the first space specifies the
               arguments to the program.
             </para>
            
             <para>
               If you want to execute a program that has a space in the name or path of
               the file, surround the program name in double-quotes. The first character
               of the command line should be a double-quote character, and there must be
               a matching double-quote following the end of the program file name. Any
               optional arguments to the program follow that, separated by
               spaces. Example: <c>"c:\project files\program name.exe" arg1 arg2</c>.
             </para>
            
             <para>
               If the flavor of the SFX is <c>SelfExtractorFlavor.ConsoleApplication</c>,
               then the SFX starts a new process, using this string as the post-extract
               command line.  The SFX waits for the process to exit.  The exit code of
               the post-extract command line is returned as the exit code of the
               command-line self-extractor exe. A non-zero exit code is typically used to
               indicated a failure by the program. In the case of an SFX, a non-zero exit
               code may indicate a failure during extraction, OR, it may indicate a
               failure of the run-after-extract program if specified, OR, it may indicate
               the run-after-extract program could not be fuond. There is no way to
               distinguish these conditions from the calling shell, aside from parsing
               the output of the SFX. If you have Quiet set to <c>true</c>, you may not
               see error messages, if a problem occurs.
             </para>
            
             <para>
               If the flavor of the SFX is
               <c>SelfExtractorFlavor.WinFormsApplication</c>, then the SFX starts a new
               process, using this string as the post-extract command line, and using the
               extract directory as the working directory for the process. The SFX does
               not wait for the command to complete, and does not check the exit code of
               the program. If the run-after-extract program cannot be fuond, a message
               box is displayed indicating that fact.
             </para>
            
             <para>
               You can specify environment variables within this string, with a format like
               <c>%NAME%</c>. The value of these variables will be expanded at the time
               the SFX is run. Example: <c>%WINDIR%\system32\xcopy.exe</c> may expand at
               runtime to <c>c:\Windows\System32\xcopy.exe</c>.
             </para>
            
             <para>
               By combining this with the <c>RemoveUnpackedFilesAfterExecute</c>
               flag, you can create an SFX that extracts itself, runs a file that
               was extracted, then deletes all the files that were extracted. If
               you want it to run "invisibly" then set <c>Flavor</c> to
               <c>SelfExtractorFlavor.ConsoleApplication</c>, and set <c>Quiet</c>
               to true.  The user running such an EXE will see a console window
               appear, then disappear quickly.  You may also want to specify the
               default extract location, with <c>DefaultExtractDirectory</c>.
             </para>
            
             <para>
               If you set <c>Flavor</c> to
               <c>SelfExtractorFlavor.WinFormsApplication</c>, and set <c>Quiet</c> to
               true, then a GUI with progressbars is displayed, but it is
               "non-interactive" - it accepts no input from the user.  Instead the SFX
               just automatically unpacks and exits.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.DefaultExtractDirectory">
             <summary>
               The default extract directory the user will see when
               running the self-extracting archive.
             </summary>
            
             <remarks>
             <para>
               Passing null (or Nothing in VB) here will cause the Self Extractor to use
               the the user's personal directory (<see
               cref="F:System.Environment.SpecialFolder.Personal"/>) for the default extract
               location.
             </para>
            
             <para>
               This is only a default location.  The actual extract location will be
               settable on the command line when the SFX is executed.
             </para>
            
             <para>
               You can specify environment variables within this string,
               with <c>%NAME%</c>. The value of these variables will be
               expanded at the time the SFX is run. Example:
               <c>%USERPROFILE%\Documents\unpack</c> may expand at runtime to
               <c>c:\users\melvin\Documents\unpack</c>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.IconFile">
             <summary>
               The name of an .ico file in the filesystem to use for the application icon
               for the generated SFX.
             </summary>
            
             <remarks>
             <para>
               Normally, DotNetZip will embed an "zipped folder" icon into the generated
               SFX.  If you prefer to use a different icon, you can specify it here. It
               should be a .ico file.  This file is passed as the <c>/win32icon</c>
               option to the csc.exe compiler when constructing the SFX file.
             </para>
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Quiet">
             <summary>
               Whether the ConsoleApplication SFX will be quiet during extraction.
             </summary>
            
             <remarks>
             <para>
               This option affects the way the generated SFX runs. By default it is
               false.  When you set it to true,...
             </para>
            
             <list type="table">
               <listheader>
                 <term>Flavor</term>
                 <description>Behavior</description>
               </listheader>
            
             <item>
               <term><c>ConsoleApplication</c></term>
               <description><para>no messages will be emitted during successful
                 operation.</para> <para> Double-clicking the SFX in Windows
                 Explorer or as an attachment in an email will cause a console
                 window to appear briefly, before it disappears. If you run the
                 ConsoleApplication SFX from the cmd.exe prompt, it runs as a
                 normal console app; by default, because it is quiet, it displays
                 no messages to the console.  If you pass the -v+ command line
                 argument to the Console SFX when you run it, you will get verbose
                 messages to the console. </para>
               </description>
             </item>
            
             <item>
               <term><c>WinFormsApplication</c></term>
               <description>the SFX extracts automatically when the application
                    is launched, with no additional user input.
               </description>
             </item>
            
             </list>
            
             <para>
               When you set it to false,...
             </para>
            
             <list type="table">
               <listheader>
                 <term>Flavor</term>
                 <description>Behavior</description>
               </listheader>
            
             <item>
               <term><c>ConsoleApplication</c></term>
               <description><para>the extractor will emit a
                 message to the console for each entry extracted.</para>
                 <para>
                   When double-clicking to launch the SFX, the console window will
                   remain, and the SFX will emit a message for each file as it
                   extracts. The messages fly by quickly, they won't be easily
                   readable, unless the extracted files are fairly large.
                 </para>
               </description>
             </item>
            
             <item>
               <term><c>WinFormsApplication</c></term>
               <description>the SFX presents a forms UI and allows the user to select
                 options before extracting.
               </description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.ExtractExistingFile">
            <summary>
              Specify what the self-extractor will do when extracting an entry
              would overwrite an existing file.
            </summary>
            <remarks>
            <para>
              The default behavvior is to Throw.
            </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.RemoveUnpackedFilesAfterExecute">
             <summary>
               Whether to remove the files that have been unpacked, after executing the
               PostExtractCommandLine.
             </summary>
            
             <remarks>
             <para>
               If true, and if there is a <see
               cref="P:External.Zip.Internal.SelfExtractorSaveOptions.PostExtractCommandLine">
               PostExtractCommandLine</see>, and if the command runs successfully,
               then the files that the SFX unpacked will be removed, afterwards.  If
               the command does not complete successfully (non-zero return code),
               that is interpreted as a failure, and the extracted files will not be
               removed.
             </para>
            
             <para>
               Setting this flag, and setting <c>Flavor</c> to
               <c>SelfExtractorFlavor.ConsoleApplication</c>, and setting <c>Quiet</c> to
               true, results in an SFX that extracts itself, runs a file that was
               extracted, then deletes all the files that were extracted, with no
               intervention by the user.  You may also want to specify the default
               extract location, with <c>DefaultExtractDirectory</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.FileVersion">
             <summary>
               The file version number to embed into the generated EXE. It will show up, for
               example, during a mouseover in Windows Explorer.
             </summary>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.ProductVersion">
             <summary>
               The product version to embed into the generated EXE. It will show up, for
               example, during a mouseover in Windows Explorer.
             </summary>
            
             <remarks>
               You can use any arbitrary string, but a human-readable version number is
               recommended. For example "v1.2 alpha" or "v4.2 RC2".  If you specify nothing,
               then there is no product version embedded into the EXE.
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Copyright">
             <summary>
               The copyright notice, if any, to embed into the generated EXE.
             </summary>
            
             <remarks>
               It will show up, for example, while viewing properties of the file in
               Windows Explorer.  You can use any arbitrary string, but typically you
               want something like "Copyright © Dino Chiesa 2011".
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Description">
             <summary>
               The description to embed into the generated EXE.
             </summary>
            
             <remarks>
               Use any arbitrary string.  This text will be displayed during a
               mouseover in Windows Explorer.  If you specify nothing, then the string
               "DotNetZip SFX Archive" is embedded into the EXE as the description.
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.ProductName">
             <summary>
               The product name to embed into the generated EXE.
             </summary>
            
             <remarks>
               Use any arbitrary string. This text will be displayed
               while viewing properties of the EXE file in
               Windows Explorer.
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.SfxExeWindowTitle">
             <summary>
               The title to display in the Window of a GUI SFX, while it extracts.
             </summary>
            
             <remarks>
               <para>
                 By default the title show in the GUI window of a self-extractor
                 is "DotNetZip Self-extractor (http://DotNetZip.codeplex.com/)".
                 You can change that by setting this property before saving the SFX.
               </para>
            
               <para>
                 This property has an effect only when producing a Self-extractor
                 of flavor <c>SelfExtractorFlavor.WinFormsApplication</c>.
               </para>
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.AdditionalCompilerSwitches">
            <summary>
              Additional options for the csc.exe compiler, when producing the SFX
              EXE.
            </summary>
            <exclude/>
        </member>
        <member name="T:External.Zip.Internal.ZipInputStream">
             <summary>
               Provides a stream metaphor for reading zip files.
             </summary>
            
             <remarks>
             <para>
               This class provides an alternative programming model for reading zip files to
               the one enabled by the <see cref="T:External.Zip.Internal.ZipFile"/> class.  Use this when reading zip
               files, as an alternative to the <see cref="T:External.Zip.Internal.ZipFile"/> class, when you would
               like to use a Stream class to read the file.
             </para>
            
             <para>
               Some application designs require a readable stream for input. This stream can
               be used to read a zip file, and extract entries.
             </para>
            
             <para>
               Both the <c>ZipInputStream</c> class and the <c>ZipFile</c> class can be used
               to read and extract zip files.  Both of them support many of the common zip
               features, including Unicode, different compression levels, and ZIP64.  The
               programming models differ. For example, when extracting entries via calls to
               the <c>GetNextEntry()</c> and <c>Read()</c> methods on the
               <c>ZipInputStream</c> class, the caller is responsible for creating the file,
               writing the bytes into the file, setting the attributes on the file, and
               setting the created, last modified, and last accessed timestamps on the
               file. All of these things are done automatically by a call to <see
               cref="M:External.Zip.Internal.ZipEntry.Extract">ZipEntry.Extract()</see>.  For this reason, the
               <c>ZipInputStream</c> is generally recommended for when your application wants
               to extract the data, without storing that data into a file.
             </para>
            
             <para>
               Aside from the obvious differences in programming model, there are some
               differences in capability between the <c>ZipFile</c> class and the
               <c>ZipInputStream</c> class.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to create or update zip files, or read and
                 extract zip files. <c>ZipInputStream</c> can be used only to read and
                 extract zip files. If you want to use a stream to create zip files, check
                 out the <see cref="T:External.Zip.Internal.ZipOutputStream"/>.
               </item>
            
               <item>
                 <c>ZipInputStream</c> cannot read segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipInputStream</c> will not read Zip file comments.
               </item>
            
               <item>
                 When reading larger files, <c>ZipInputStream</c> will always underperform
                 <c>ZipFile</c>. This is because the <c>ZipInputStream</c> does a full scan on the
                 zip file, while the <c>ZipFile</c> class reads the central directory of the
                 zip file.
               </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream)">
             <summary>
               Create a <c>ZipInputStream</c>, wrapping it around an existing stream.
             </summary>
            
             <remarks>
            
             <para>
               While the <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier
               to use, this class provides an alternative to those
               applications that want to read from a zipfile directly,
               using a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               Both the <c>ZipInputStream</c> class and the <c>ZipFile</c> class can be used
               to read and extract zip files.  Both of them support many of the common zip
               features, including Unicode, different compression levels, and ZIP64.  The
               programming models differ. For example, when extracting entries via calls to
               the <c>GetNextEntry()</c> and <c>Read()</c> methods on the
               <c>ZipInputStream</c> class, the caller is responsible for creating the file,
               writing the bytes into the file, setting the attributes on the file, and
               setting the created, last modified, and last accessed timestamps on the
               file. All of these things are done automatically by a call to <see
               cref="M:External.Zip.Internal.ZipEntry.Extract">ZipEntry.Extract()</see>.  For this reason, the
               <c>ZipInputStream</c> is generally recommended for when your application wants
               to extract the data, without storing that data into a file.
             </para>
            
             <para>
               Aside from the obvious differences in programming model, there are some
               differences in capability between the <c>ZipFile</c> class and the
               <c>ZipInputStream</c> class.
             </para>
            
             <list type="bullet">
               <item>
               <c>ZipFile</c> can be used to create or update zip files, or read and extract
               zip files. <c>ZipInputStream</c> can be used only to read and extract zip
                 files. If you want to use a stream to create zip files, check out the <see
                 cref="T:External.Zip.Internal.ZipOutputStream"/>.
               </item>
            
               <item>
                 <c>ZipInputStream</c> cannot read segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipInputStream</c> will not read Zip file comments.
               </item>
            
               <item>
                 When reading larger files, <c>ZipInputStream</c> will always underperform
                 <c>ZipFile</c>. This is because the <c>ZipInputStream</c> does a full scan on the
                 zip file, while the <c>ZipFile</c> class reads the central directory of the
                 zip file.
               </item>
            
             </list>
            
             </remarks>
            
             <param name="stream">
               The stream to read. It must be readable. This stream will be closed at
               the time the <c>ZipInputStream</c> is closed.
             </param>
            
             <example>
            
               This example shows how to read a zip file, and extract entries, using the
               <c>ZipInputStream</c> class.
            
             <code lang="C#">
             private void Unzip()
             {
                 byte[] buffer= new byte[2048];
                 int n;
                 using (var raw = File.Open(inputFileName, FileMode.Open, FileAccess.Read))
                 {
                     using (var input= new ZipInputStream(raw))
                     {
                         ZipEntry e;
                         while (( e = input.GetNextEntry()) != null)
                         {
                             if (e.IsDirectory) continue;
                             string outputPath = Path.Combine(extractDir, e.FileName);
                             using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                             {
                                 while ((n= input.Read(buffer, 0, buffer.Length)) > 0)
                                 {
                                     output.Write(buffer,0,n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub UnZip()
                 Dim inputFileName As String = "MyArchive.zip"
                 Dim extractDir As String = "extract"
                 Dim buffer As Byte() = New Byte(2048) {}
                 Using raw As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read)
                     Using input As ZipInputStream = New ZipInputStream(raw)
                         Dim e As ZipEntry
                         Do While (Not e = input.GetNextEntry Is Nothing)
                             If Not e.IsDirectory Then
                                 Using output As FileStream = File.Open(Path.Combine(extractDir, e.FileName), _
                                                                        FileMode.Create, FileAccess.ReadWrite)
                                     Dim n As Integer
                                     Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                         output.Write(buffer, 0, n)
                                     Loop
                                 End Using
                             End If
                         Loop
                     End Using
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.#ctor(System.String)">
             <summary>
               Create a <c>ZipInputStream</c>, given the name of an existing zip file.
             </summary>
            
             <remarks>
            
             <para>
               This constructor opens a <c>FileStream</c> for the given zipfile, and
               wraps a <c>ZipInputStream</c> around that.  See the documentation for the
               <see cref="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream)"/> constructor for full details.
             </para>
            
             <para>
               While the <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier
               to use, this class provides an alternative to those
               applications that want to read from a zipfile directly,
               using a <see cref="T:System.IO.Stream"/>.
             </para>
            
             </remarks>
            
             <param name="fileName">
               The name of the filesystem file to read.
             </param>
            
             <example>
            
               This example shows how to read a zip file, and extract entries, using the
               <c>ZipInputStream</c> class.
            
             <code lang="C#">
             private void Unzip()
             {
                 byte[] buffer= new byte[2048];
                 int n;
                 using (var input= new ZipInputStream(inputFileName))
                 {
                     ZipEntry e;
                     while (( e = input.GetNextEntry()) != null)
                     {
                         if (e.IsDirectory) continue;
                         string outputPath = Path.Combine(extractDir, e.FileName);
                         using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                         {
                             while ((n= input.Read(buffer, 0, buffer.Length)) > 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub UnZip()
                 Dim inputFileName As String = "MyArchive.zip"
                 Dim extractDir As String = "extract"
                 Dim buffer As Byte() = New Byte(2048) {}
                 Using input As ZipInputStream = New ZipInputStream(inputFileName)
                     Dim e As ZipEntry
                     Do While (Not e = input.GetNextEntry Is Nothing)
                         If Not e.IsDirectory Then
                             Using output As FileStream = File.Open(Path.Combine(extractDir, e.FileName), _
                                                                    FileMode.Create, FileAccess.ReadWrite)
                                 Dim n As Integer
                                 Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                     output.Write(buffer, 0, n)
                                 Loop
                             End Using
                         End If
                     Loop
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a <c>ZipInputStream</c>, explicitly specifying whether to
               keep the underlying stream open.
             </summary>
            
             <remarks>
               See the documentation for the <see
               cref="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream)">ZipInputStream(Stream)</see>
               constructor for a discussion of the class, and an example of how to use the class.
             </remarks>
            
             <param name="stream">
               The stream to read from. It must be readable.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the stream
               to remain open after the <c>ZipInputStream</c> has been closed.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <remarks>
              <para>
                This can be useful for debugging purposes.
              </para>
            </remarks>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when reading entries into the zip archive, for
               those entries whose filenames or comments cannot be encoded with the
               default (IBM437) encoding.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to read zip archives that use something other than
               UTF-8 or IBM437, set this property to specify the code page to use when
               reading encoded filenames and comments for each <c>ZipEntry</c> in the zip
               file.
             </para>
            
             <para>
               This property is "provisional". When the entry in the zip archive is not
               explicitly marked as using UTF-8, then IBM437 is used to decode filenames
               and comments. If a loss of data would result from using IBM436 -
               specifically when encoding and decoding is not reflexive - the codepage
               specified here is used. It is possible, therefore, to have a given entry
               with a <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with
               the specified "provisional" codepage.
             </para>
            
             <para>
               When a zip file uses an arbitrary, non-UTF8 code page for encoding, there
               is no standard way for the reader application - whether DotNetZip, WinZip,
               WinRar, or something else - to know which codepage has been used for the
               entries. Readers of zip files are not able to inspect the zip file and
               determine the codepage that was used for the entries contained within it.
               It is left to the application or user to determine the necessary codepage
               when reading zip files encoded this way.  If you use an incorrect codepage
               when reading a zipfile, you will get entries with filenames that are
               incorrect, and the incorrect filenames may even contain characters that
               are not legal for use within filenames in Windows. Extracting entries with
               illegal characters in the filenames will lead to exceptions. It's too bad,
               but this is just the way things are with code pages in zip files. Caveat
               Emptor.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during decompression.
             </summary>
            
             <remarks>
               Setting this affects the performance and memory efficiency of compression
               and decompression.  For larger files, setting this to a larger size may
               improve performance, but the exact numbers vary depending on available
               memory, and a bunch of other variables. I don't have good firm
               recommendations on how to set it.  You'll have to test it yourself. Or
               just leave it alone and accept the default.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.Password">
             <summary>
               Sets the password to be used on the <c>ZipInputStream</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When reading a zip archive, this password is used to read and decrypt the
               entries that are encrypted within the zip file. When entries within a zip
               file use different passwords, set the appropriate password for the entry
               before the first call to <c>Read()</c> for each entry.
             </para>
            
             <para>
               When reading an entry that is not encrypted, the value of this property is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses the ZipInputStream to read and extract entries from a
               zip file, using a potentially different password for each entry.
            
             <code lang="C#">
             byte[] buffer= new byte[2048];
             int n;
             using (var raw = File.Open(_inputFileName, FileMode.Open, FileAccess.Read ))
             {
                 using (var input= new ZipInputStream(raw))
                 {
                     ZipEntry e;
                     while (( e = input.GetNextEntry()) != null)
                     {
                         input.Password = PasswordForEntry(e.FileName);
                         if (e.IsDirectory) continue;
                         string outputPath = Path.Combine(_extractDir, e.FileName);
                         using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                         {
                             while ((n= input.Read(buffer,0,buffer.Length)) > 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read the data from the stream into the buffer.
             </summary>
            
             <remarks>
             <para>
               The data for the zipentry will be decrypted and uncompressed, as
               necessary, before being copied into the buffer.
             </para>
            
             <para>
               You must set the <see cref="P:External.Zip.Internal.ZipInputStream.Password"/> property before calling
               <c>Read()</c> the first time for an encrypted entry.  To determine if an
               entry is encrypted and requires a password, check the <see
               cref="P:External.Zip.Internal.ZipEntry.Encryption">ZipEntry.Encryption</see> property.
             </para>
             </remarks>
            
             <param name="buffer">The buffer to hold the data read from the stream.</param>
             <param name="offset">the offset within the buffer to copy the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes read, after decryption and decompression.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.GetNextEntry">
             <summary>
               Read the next entry from the zip file.
             </summary>
            
             <remarks>
             <para>
               Call this method just before calling <see cref="M:External.Zip.Internal.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)"/>,
               to position the pointer in the zip file to the next entry that can be
               read.  Subsequent calls to <c>Read()</c>, will decrypt and decompress the
               data in the zip file, until <c>Read()</c> returns 0.
             </para>
            
             <para>
               Each time you call <c>GetNextEntry()</c>, the pointer in the wrapped
               stream is moved to the next entry in the zip file.  If you call <see
               cref="M:External.Zip.Internal.ZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)"/>, and thus re-position the pointer within
               the file, you will need to call <c>GetNextEntry()</c> again, to insure
               that the file pointer is positioned at the beginning of a zip entry.
             </para>
            
             <para>
               This method returns the <c>ZipEntry</c>. Using a stream approach, you will
               read the raw bytes for an entry in a zip file via calls to <c>Read()</c>.
               Alternatively, you can extract an entry into a file, or a stream, by
               calling <see cref="M:External.Zip.Internal.ZipEntry.Extract"/>, or one of its siblings.
             </para>
            
             </remarks>
            
             <returns>
               The <c>ZipEntry</c> read. Returns null (or Nothing in VB) if there are no more
               entries in the zip file.
             </returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Dispose(System.Boolean)">
             <summary>
               Dispose the stream.
             </summary>
            
             <remarks>
             <para>
               This method disposes the ZipInputStream.  It may also close the
               underlying stream, depending on which constructor was used.
             </para>
            
             <para>
               Typically the application will call <c>Dispose()</c> implicitly, via
               a <c>using</c> statement in C#, or a <c>Using</c> statement in VB.
             </para>
            
               <para>
                 Application code won't call this code directly.  This method may
                 be invoked in two distinct scenarios.  If disposing == true, the
                 method has been called directly or indirectly by a user's code,
                 for example via the public Dispose() method. In this case, both
                 managed and unmanaged resources can be referenced and disposed.
                 If disposing == false, the method has been called by the runtime
                 from inside the object finalizer and this method should not
                 reference other objects; in that case only unmanaged resources
                 must be referenced or disposed.
               </para>
             </remarks>
            
             <param name="disposing">
               true if the Dispose method was invoked by user code.
             </param>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CanRead">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CanSeek">
            <summary>
            Returns the value of <c>CanSeek</c> for the underlying (wrapped) stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CanWrite">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.Length">
            <summary>
            Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.Position">
            <summary>
            Gets or sets the position of the underlying stream.
            </summary>
            <remarks>
            Setting the position is equivalent to calling <c>Seek(value, SeekOrigin.Begin)</c>.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Flush">
            <summary>
            This is a no-op.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">ignored</param>
            <param name="offset">ignored</param>
            <param name="count">ignored</param>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
               This method seeks in the underlying stream.
             </summary>
            
             <remarks>
             <para>
               Call this method if you want to seek around within the zip file for random access.
             </para>
            
             <para>
               Applications can intermix calls to <c>Seek()</c> with calls to <see
               cref="M:External.Zip.Internal.ZipInputStream.GetNextEntry"/>.  After a call to <c>Seek()</c>,
               <c>GetNextEntry()</c> will get the next <c>ZipEntry</c> that falls after
               the current position in the input stream. You're on your own for finding
               out just where to seek in the stream, to get to the various entries.
             </para>
            
             </remarks>
            
             <param name="offset">the offset point to seek to</param>
             <param name="origin">the reference point from which to seek</param>
             <returns>The new position</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">ignored</param>
        </member>
        <member name="T:External.Zip.Internal.ZipOutputStream">
             <summary>
               Provides a stream metaphor for generating zip files.
             </summary>
            
             <remarks>
             <para>
               This class writes zip files, as defined in the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides an alternative programming model to the one enabled by the
               <see cref="T:External.Zip.Internal.ZipFile"/> class. Use this when creating zip files, as an
               alternative to the <see cref="T:External.Zip.Internal.ZipFile"/> class, when you would like to use a
               <c>Stream</c> type to write the zip file.
             </para>
            
             <para>
               Both the <c>ZipOutputStream</c> class and the <c>ZipFile</c> class can be used
               to create zip files. Both of them support many of the common zip features,
               including Unicode, different compression levels, and ZIP64.   They provide
               very similar performance when creating zip files.
             </para>
            
             <para>
               The <c>ZipFile</c> class is generally easier to use than
               <c>ZipOutputStream</c> and should be considered a higher-level interface.  For
               example, when creating a zip file via calls to the <c>PutNextEntry()</c> and
               <c>Write()</c> methods on the <c>ZipOutputStream</c> class, the caller is
               responsible for opening the file, reading the bytes from the file, writing
               those bytes into the <c>ZipOutputStream</c>, setting the attributes on the
               <c>ZipEntry</c>, and setting the created, last modified, and last accessed
               timestamps on the zip entry. All of these things are done automatically by a
               call to <see cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)">ZipFile.AddFile()</see>.
               For this reason, the <c>ZipOutputStream</c> is generally recommended for use
               only when your application emits arbitrary data, not necessarily data from a
               filesystem file, directly into a zip file, and does so using a <c>Stream</c>
               metaphor.
             </para>
            
             <para>
               Aside from the differences in programming model, there are other
               differences in capability between the two classes.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to read and extract zip files, in addition to
                 creating zip files. <c>ZipOutputStream</c> cannot read zip files. If you want
                 to use a stream to read zip files, check out the <see cref="T:External.Zip.Internal.ZipInputStream"/> class.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> does not support the creation of segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> cannot produce a self-extracting archive.
               </item>
             </list>
            
             <para>
               Be aware that the <c>ZipOutputStream</c> class implements the <see
               cref="T:System.IDisposable"/> interface.  In order for
               <c>ZipOutputStream</c> to produce a valid zip file, you use use it within
               a using clause (<c>Using</c> in VB), or call the <c>Dispose()</c> method
               explicitly.  See the examples for how to employ a using clause.
             </para>
            
             <para>
               Also, a note regarding compression performance: On the desktop .NET
               Framework, DotNetZip can use a multi-threaded compression implementation
               that provides significant speed increases on large files, over 300k or so,
               at the cost of increased memory use at runtime.  (The output of the
               compression is almost exactly the same size).  But, the multi-threaded
               approach incurs a performance hit on smaller files. There's no way for the
               ZipOutputStream to know whether parallel compression will be beneficial,
               because the ZipOutputStream does not know how much data you will write
               through the stream.  You may wish to set the <see
               cref="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateThreshold"/> property to zero, if you are compressing
               large files through <c>ZipOutputStream</c>.  This will cause parallel
               compression to be used, always.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.#ctor(System.IO.Stream)">
             <summary>
               Create a ZipOutputStream, wrapping an existing stream.
             </summary>
            
             <remarks>
             <para>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier to use when creating
               zip files. The ZipOutputStream offers a different metaphor for creating a
               zip file, based on the <see cref="T:System.IO.Stream"/> class.
             </para>
            
             </remarks>
            
             <param name="stream">
             The stream to wrap. It must be writable. This stream will be closed at
             the time the ZipOutputStream is closed.
             </param>
            
             <example>
            
               This example shows how to create a zip file, using the
               ZipOutputStream class.
            
             <code lang="C#">
             private void Zipup()
             {
                 if (filesToZip.Count == 0)
                 {
                     System.Console.WriteLine("Nothing to do.");
                     return;
                 }
            
                 using (var raw = File.Open(_outputFileName, FileMode.Create, FileAccess.ReadWrite ))
                 {
                     using (var output= new ZipOutputStream(raw))
                     {
                         output.Password = "VerySecret!";
                         output.Encryption = EncryptionAlgorithm.WinZipAes256;
            
                         foreach (string inputFileName in filesToZip)
                         {
                             System.Console.WriteLine("file: {0}", inputFileName);
            
                             output.PutNextEntry(inputFileName);
                             using (var input = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Write ))
                             {
                                 byte[] buffer= new byte[2048];
                                 int n;
                                 while ((n= input.Read(buffer,0,buffer.Length)) > 0)
                                 {
                                     output.Write(buffer,0,n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub Zipup()
                 Dim outputFileName As String = "XmlData.zip"
                 Dim filesToZip As String() = Directory.GetFiles(".", "*.xml")
                 If (filesToZip.Length = 0) Then
                     Console.WriteLine("Nothing to do.")
                 Else
                     Using raw As FileStream = File.Open(outputFileName, FileMode.Create, FileAccess.ReadWrite)
                         Using output As ZipOutputStream = New ZipOutputStream(raw)
                             output.Password = "VerySecret!"
                             output.Encryption = EncryptionAlgorithm.WinZipAes256
                             Dim inputFileName As String
                             For Each inputFileName In filesToZip
                                 Console.WriteLine("file: {0}", inputFileName)
                                 output.PutNextEntry(inputFileName)
                                 Using input As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                                     Dim n As Integer
                                     Dim buffer As Byte() = New Byte(2048) {}
                                     Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                         output.Write(buffer, 0, n)
                                     Loop
                                 End Using
                             Next
                         End Using
                     End Using
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.#ctor(System.String)">
             <summary>
               Create a ZipOutputStream that writes to a filesystem file.
             </summary>
            
             <remarks>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier to use when creating
               zip files. The ZipOutputStream offers a different metaphor for creating a
               zip file, based on the <see cref="T:System.IO.Stream"/> class.
             </remarks>
            
             <param name="fileName">
               The name of the zip file to create.
             </param>
            
             <example>
            
               This example shows how to create a zip file, using the
               ZipOutputStream class.
            
             <code lang="C#">
             private void Zipup()
             {
                 if (filesToZip.Count == 0)
                 {
                     System.Console.WriteLine("Nothing to do.");
                     return;
                 }
            
                 using (var output= new ZipOutputStream(outputFileName))
                 {
                     output.Password = "VerySecret!";
                     output.Encryption = EncryptionAlgorithm.WinZipAes256;
            
                     foreach (string inputFileName in filesToZip)
                     {
                         System.Console.WriteLine("file: {0}", inputFileName);
            
                         output.PutNextEntry(inputFileName);
                         using (var input = File.Open(inputFileName, FileMode.Open, FileAccess.Read,
                                                      FileShare.Read | FileShare.Write ))
                         {
                             byte[] buffer= new byte[2048];
                             int n;
                             while ((n= input.Read(buffer,0,buffer.Length)) > 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub Zipup()
                 Dim outputFileName As String = "XmlData.zip"
                 Dim filesToZip As String() = Directory.GetFiles(".", "*.xml")
                 If (filesToZip.Length = 0) Then
                     Console.WriteLine("Nothing to do.")
                 Else
                     Using output As ZipOutputStream = New ZipOutputStream(outputFileName)
                         output.Password = "VerySecret!"
                         output.Encryption = EncryptionAlgorithm.WinZipAes256
                         Dim inputFileName As String
                         For Each inputFileName In filesToZip
                             Console.WriteLine("file: {0}", inputFileName)
                             output.PutNextEntry(inputFileName)
                             Using input As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                                 Dim n As Integer
                                 Dim buffer As Byte() = New Byte(2048) {}
                                 Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                     output.Write(buffer, 0, n)
                                 Loop
                             End Using
                         Next
                     End Using
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a ZipOutputStream.
             </summary>
            
             <remarks>
               See the documentation for the <see
               cref="M:External.Zip.Internal.ZipOutputStream.#ctor(System.IO.Stream)">ZipOutputStream(Stream)</see>
               constructor for an example.
             </remarks>
            
             <param name="stream">
               The stream to wrap. It must be writable.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the stream
               to remain open after the <c>ZipOutputStream</c> has been closed.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <remarks>
              <para>
                This can be useful for debugging purposes.
              </para>
            </remarks>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Password">
             <summary>
               Sets the password to be used on the <c>ZipOutputStream</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When writing a zip archive, this password is applied to the entries, not
               to the zip archive itself. It applies to any <c>ZipEntry</c> subsequently
               written to the <c>ZipOutputStream</c>.
             </para>
            
             <para>
               Using a password does not encrypt or protect the "directory" of the
               archive - the list of entries contained in the archive.  If you set the
               <c>Password</c> property, the password actually applies to individual
               entries that are added to the archive, subsequent to the setting of this
               property.  The list of filenames in the archive that is eventually created
               will appear in clear text, but the contents of the individual files are
               encrypted.  This is how Zip encryption works.
             </para>
            
             <para>
               If you set this property, and then add a set of entries to the archive via
               calls to <c>PutNextEntry</c>, then each entry is encrypted with that
               password.  You may also want to change the password between adding
               different entries. If you set the password, add an entry, then set the
               password to <c>null</c> (<c>Nothing</c> in VB), and add another entry, the
               first entry is encrypted and the second is not.
             </para>
            
             <para>
               When setting the <c>Password</c>, you may also want to explicitly set the <see
               cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/> property, to specify how to encrypt the entries added
               to the ZipFile.  If you set the <c>Password</c> to a non-null value and do not
               set <see cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.
               This encryption is relatively weak but is very interoperable. If
               you set the password to a <c>null</c> value (<c>Nothing</c> in VB),
               <c>Encryption</c> is reset to None.
             </para>
            
             <para>
               Special case: if you wrap a ZipOutputStream around a non-seekable stream,
               and use encryption, and emit an entry of zero bytes, the <c>Close()</c> or
               <c>PutNextEntry()</c> following the entry will throw an exception.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Encryption">
             <summary>
               The Encryption to use for entries added to the <c>ZipOutputStream</c>.
             </summary>
            
             <remarks>
             <para>
               The specified Encryption is applied to the entries subsequently
               written to the <c>ZipOutputStream</c> instance.
             </para>
            
             <para>
               If you set this to something other than
               EncryptionAlgorithm.None, you will also need to set the
               <see cref="P:External.Zip.Internal.ZipOutputStream.Password"/> to a non-null, non-empty value in
               order to actually get encryption on the entry.
             </para>
            
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipOutputStream.Password">ZipOutputStream.Password</seealso>
             <seealso cref="P:External.Zip.Internal.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during compression.
             </summary>
            
             <remarks>
               Setting this may affect performance.  For larger files, setting this to a
               larger size may improve performance, but I'm not sure.  Sorry, I don't
               currently have good recommendations on how to set it.  You can test it if
               you like.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Strategy">
             <summary>
               The compression strategy to use for all entries.
             </summary>
            
             <remarks>
               Set the Strategy used by the ZLIB-compatible compressor, when compressing
               data for the entries in the zip archive. Different compression strategies
               work better on different sorts of data. The strategy parameter can affect
               the compression ratio and the speed of compression but not the correctness
               of the compresssion.  For more information see <see
               cref="T:External.Zip.Internal.Zlib.CompressionStrategy"/>.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Timestamp">
             <summary>
               The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
               Set this in order to specify the kind of timestamp that should be emitted
               into the zip file for each entry.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CompressionLevel">
             <summary>
               Sets the compression level to be used for entries subsequently added to
               the zip archive.
             </summary>
            
             <remarks>
              <para>
                Varying the compression level used on entries can affect the
                size-vs-speed tradeoff when compression and decompressing data streams
                or files.
              </para>
            
              <para>
                As with some other properties on the <c>ZipOutputStream</c> class, like <see
                cref="P:External.Zip.Internal.ZipOutputStream.Password"/>, and <see cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/>,
                setting this property on a <c>ZipOutputStream</c>
                instance will cause the specified <c>CompressionLevel</c> to be used on all
                <see cref="T:External.Zip.Internal.ZipEntry"/> items that are subsequently added to the
                <c>ZipOutputStream</c> instance.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CompressionMethod">
            <summary>
              The compression method used on each entry added to the ZipOutputStream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Comment">
             <summary>
               A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               The application sets this property to specify a comment to be embedded
               into the generated zip archive.
             </para>
            
             <para>
               According to <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see>, the comment is not encrypted, even if there is a
               password set on the zip file.
             </para>
            
             <para>
               The specification does not describe how to indicate the encoding used
               on a comment string. Many "compliant" zip tools and libraries use
               IBM437 as the code page for comments; DotNetZip, too, follows that
               practice.  On the other hand, there are situations where you want a
               Comment to be encoded with something else, for example using code page
               950 "Big-5 Chinese". To fill that need, DotNetZip will encode the
               comment following the same procedure it follows for encoding
               filenames: (a) if <see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/> is
               <c>Never</c>, it uses the default encoding (IBM437). (b) if <see
               cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/> is <c>Always</c>, it always uses the
               alternate encoding (<see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncoding"/>). (c) if <see
               cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/> is <c>AsNecessary</c>, it uses the
               alternate encoding only if the default encoding is not sufficient for
               encoding the comment - in other words if decoding the result does not
               produce the original string.  This decision is taken at the time of
               the call to <c>ZipFile.Save()</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.EnableZip64">
             <summary>
               Specify whether to use ZIP64 extensions when saving a zip archive.
             </summary>
            
             <remarks>
             <para>
               The default value for the property is <see
               cref="F:External.Zip.Internal.Zip64Option.Never"/>. <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> is
               safest, in the sense that you will not get an Exception if a
               pre-ZIP64 limit is exceeded.
             </para>
            
             <para>
               You must set this property before calling <c>Write()</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.OutputUsedZip64">
             <summary>
               Indicates whether ZIP64 extensions were used when saving the zip archive.
             </summary>
            
             <remarks>
               The value is defined only after the <c>ZipOutputStream</c> has been closed.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.IgnoreCase">
             <summary>
               Whether the ZipOutputStream should use case-insensitive comparisons when
               checking for uniqueness of zip entries.
             </summary>
            
             <remarks>
               <para>
               Though the zip specification doesn't prohibit zipfiles with duplicate
               entries, Sane zip files have no duplicates, and the DotNetZip library
               cannot create zip files with duplicate entries. If an application attempts
               to call <see cref="M:External.Zip.Internal.ZipOutputStream.PutNextEntry(System.String)"/> with a name that duplicates one
               already used within the archive, the library will throw an Exception.
               </para>
               <para>
               This property allows the application to specify whether the
               ZipOutputStream instance considers ordinal case when checking for
               uniqueness of zip entries.
               </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.UseUnicodeAsNecessary">
             <summary>
               Indicates whether to encode entry filenames and entry comments using
               Unicode (UTF-8).
             </summary>
            
             <remarks>
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               PKWare zip specification</see> provides for encoding file names and file
               comments in either the IBM437 code page, or in UTF-8.  This flag selects
               the encoding according to that specification.  By default, this flag is
               false, and filenames and comments are encoded into the zip file in the
               IBM437 codepage.  Setting this flag to true will specify that filenames
               and comments that cannot be encoded with IBM437 will be encoded with
               UTF-8.
             </para>
            
             <para>
               Zip files created with strict adherence to the PKWare specification with
               respect to UTF-8 encoding can contain entries with filenames containing
               any combination of Unicode characters, including the full range of
               characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many other
               alphabets.  However, because at this time, the UTF-8 portion of the PKWare
               specification is not broadly supported by other zip libraries and
               utilities, such zip files may not be readable by your favorite zip tool or
               archiver. In other words, interoperability will decrease if you set this
               flag to true.
             </para>
            
             <para>
               In particular, Zip files created with strict adherence to the PKWare
               specification with respect to UTF-8 encoding will not work well with
               Explorer in Windows XP or Windows Vista, because Windows compressed
               folders, as far as I know, do not support UTF-8 in zip files.  Vista can
               read the zip files, but shows the filenames incorrectly. Unpacking from
               Windows Vista Explorer will result in filenames that have rubbish
               characters in place of the high-order UTF-8 bytes.
             </para>
            
             <para>
               Also, zip files that use UTF-8 encoding will not work well with Java
               applications that use the java.util.zip classes, as of v5.0 of the Java
               runtime. The Java runtime does not correctly implement the PKWare
               specification in this regard.
             </para>
            
             <para>
               As a result, we have the unfortunate situation that "correct" behavior by
               the DotNetZip library with regard to Unicode encoding of filenames during
               zip creation will result in zip files that are readable by strictly
               compliant and current tools (for example the most recent release of the
               commercial WinZip tool); but these zip files will not be readable by
               various other tools or libraries, including Windows Explorer.
             </para>
            
             <para>
               The DotNetZip library can read and write zip files with UTF8-encoded
               entries, according to the PKware spec.  If you use DotNetZip for both
               creating and reading the zip file, and you use UTF-8, there will be no
               loss of information in the filenames. For example, using a self-extractor
               created by this library will allow you to unpack files correctly with no
               loss of information in the filenames.
             </para>
            
             <para>
               If you do not set this flag, it will remain false.  If this flag is false,
               the <c>ZipOutputStream</c> will encode all filenames and comments using
               the IBM437 codepage.  This can cause "loss of information" on some
               filenames, but the resulting zipfile will be more interoperable with other
               utilities. As an example of the loss of information, diacritics can be
               lost.  The o-tilde character will be down-coded to plain o.  The c with a
               cedilla (Unicode 0xE7) used in Portugese will be downcoded to a c.
               Likewise, the O-stroke character (Unicode 248), used in Danish and
               Norwegian, will be down-coded to plain o. Chinese characters cannot be
               represented in codepage IBM437; when using the default encoding, Chinese
               characters in filenames will be represented as ?. These are all examples
               of "information loss".
             </para>
            
             <para>
               The loss of information associated to the use of the IBM437 encoding is
               inconvenient, and can also lead to runtime errors. For example, using
               IBM437, any sequence of 4 Chinese characters will be encoded as ????.  If
               your application creates a <c>ZipOutputStream</c>, does not set the
               encoding, then adds two files, each with names of four Chinese characters
               each, this will result in a duplicate filename exception.  In the case
               where you add a single file with a name containing four Chinese
               characters, the zipfile will save properly, but extracting that file
               later, with any zip tool, will result in an error, because the question
               mark is not legal for use within filenames on Windows.  These are just a
               few examples of the problems associated to loss of information.
             </para>
            
             <para>
               This flag is independent of the encoding of the content within the entries
               in the zip file. Think of the zip file as a container - it supports an
               encoding.  Within the container are other "containers" - the file entries
               themselves.  The encoding within those entries is independent of the
               encoding of the zip archive container for those entries.
             </para>
            
             <para>
               Rather than specify the encoding in a binary fashion using this flag, an
               application can specify an arbitrary encoding via the <see
               cref="P:External.Zip.Internal.ZipOutputStream.ProvisionalAlternateEncoding"/> property.  Setting the encoding
               explicitly when creating zip archives will result in non-compliant zip
               files that, curiously, are fairly interoperable.  The challenge is, the
               PKWare specification does not provide for a way to specify that an entry
               in a zip archive uses a code page that is neither IBM437 nor UTF-8.
               Therefore if you set the encoding explicitly when creating a zip archive,
               you must take care upon reading the zip archive to use the same code page.
               If you get it wrong, the behavior is undefined and may result in incorrect
               filenames, exceptions, stomach upset, hair loss, and acne.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipOutputStream.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when emitting entries into the zip archive, for
               those entries whose filenames or comments cannot be encoded with the
               default (IBM437) encoding.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to write zip archives that will be read by one of
               these other archivers, set this property to specify the code page to use
               when encoding the <see cref="P:External.Zip.Internal.ZipEntry.FileName"/> and <see
               cref="P:External.Zip.Internal.ZipEntry.Comment"/> for each <c>ZipEntry</c> in the zip file, for
               values that cannot be encoded with the default codepage for zip files,
               IBM437.  This is why this property is "provisional".  In all cases, IBM437
               is used where possible, in other words, where no loss of data would
               result. It is possible, therefore, to have a given entry with a
               <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with the
               specified "provisional" codepage.
             </para>
            
             <para>
               Be aware that a zip file created after you've explicitly set the
               <c>ProvisionalAlternateEncoding</c> property to a value other than
               IBM437 may not be compliant to the PKWare specification, and may not be
               readable by compliant archivers.  On the other hand, many (most?)
               archivers are non-compliant and can read zip files created in arbitrary
               code pages.  The trick is to use or specify the proper codepage when
               reading the zip.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <c>ProvisionalAlternateEncoding</c> between each entry you
               add, and between adding entries and the call to <c>Close()</c>. Don't do
               this. It will likely result in a zipfile that is not readable.  For best
               interoperability, either leave <c>ProvisionalAlternateEncoding</c>
               alone, or specify it only once, before adding any entries to the
               <c>ZipOutputStream</c> instance.  There is one exception to this
               recommendation, described later.
             </para>
            
             <para>
               When using an arbitrary, non-UTF8 code page for encoding, there is no
               standard way for the creator application - whether DotNetZip, WinZip,
               WinRar, or something else - to formally specify in the zip file which
               codepage has been used for the entries. As a result, readers of zip files
               are not able to inspect the zip file and determine the codepage that was
               used for the entries contained within it.  It is left to the application
               or user to determine the necessary codepage when reading zip files encoded
               this way.  If you use an incorrect codepage when reading a zipfile, you
               will get entries with filenames that are incorrect, and the incorrect
               filenames may even contain characters that are not legal for use within
               filenames in Windows. Extracting entries with illegal characters in the
               filenames will lead to exceptions. It's too bad, but this is just the way
               things are with code pages in zip files. Caveat Emptor.
             </para>
            
             <para>
               One possible approach for specifying the code page for a given zip file is
               to describe the code page in a human-readable form in the Zip comment. For
               example, the comment may read "Entries in this archive are encoded in the
               Big5 code page".  For maximum interoperability, the zip comment in this
               case should be encoded in the default, IBM437 code page.  In this case,
               the zip comment is encoded using a different page than the filenames.  To
               do this, Specify <c>ProvisionalAlternateEncoding</c> to your desired
               region-specific code page, once before adding any entries, and then set
               the <see cref="P:External.Zip.Internal.ZipOutputStream.Comment"/> property and reset
               <c>ProvisionalAlternateEncoding</c> to IBM437 before calling <c>Close()</c>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.AlternateEncoding">
            <summary>
              A Text Encoding to use when encoding the filenames and comments for
              all the ZipEntry items, during a ZipFile.Save() operation.
            </summary>
            <remarks>
              <para>
                Whether the encoding specified here is used during the save depends
                on <see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/>.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage">
            <summary>
              A flag that tells if and when this instance should apply
              AlternateEncoding to encode the filenames and comments associated to
              of ZipEntry objects contained within this instance.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also
            known as IBM437.
            </summary>
            <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateThreshold">
             <summary>
               The size threshold for an entry, above which a parallel deflate is used.
             </summary>
            
             <remarks>
            
               <para>
                 DotNetZip will use multiple threads to compress any ZipEntry, when
                 the <c>CompressionMethod</c> is Deflate, and if the entry is
                 larger than the given size.  Zero means "always use parallel
                 deflate", while -1 means "never use parallel deflate".
               </para>
            
               <para>
                 If the entry size cannot be known before compression, as with any entry
                 added via a ZipOutputStream, then Parallel deflate will never be
                 performed, unless the value of this property is zero.
               </para>
            
               <para>
                 A parallel deflate operations will speed up the compression of
                 large files, on computers with multiple CPUs or multiple CPU
                 cores.  For files above 1mb, on a dual core or dual-cpu (2p)
                 machine, the time required to compress the file can be 70% of the
                 single-threaded deflate.  For very large files on 4p machines the
                 compression can be done in 30% of the normal time.  The downside
                 is that parallel deflate consumes extra memory during the deflate,
                 and the deflation is slightly less effective.
               </para>
            
               <para>
                 Parallel deflate tends to not be as effective as single-threaded deflate
                 because the original data stream is split into multiple independent
                 buffers, each of which is compressed in parallel.  But because they are
                 treated independently, there is no opportunity to share compression
                 dictionaries, and additional framing bytes must be added to the output
                 stream.  For that reason, a deflated stream may be slightly larger when
                 compressed using parallel deflate, as compared to a traditional
                 single-threaded deflate. For files of about 512k, the increase over the
                 normal deflate is as much as 5% of the total compressed size. For larger
                 files, the difference can be as small as 0.1%.
               </para>
            
               <para>
                 Multi-threaded compression does not give as much an advantage when using
                 Encryption. This is primarily because encryption tends to slow down
                 the entire pipeline. Also, multi-threaded compression gives less of an
                 advantage when using lower compression levels, for example <see
                 cref="F:External.Zip.Internal.Zlib.CompressionLevel.BestSpeed"/>.  You may have to perform
                 some tests to determine the best approach for your situation.
               </para>
            
               <para>
                 The default value for this property is -1, which means parallel
                 compression will not be performed unless you set it to zero.
               </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateMaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use when performing
               parallel compression.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory
               buffer pairs to create when performing parallel
               compression.  The implementation of the parallel
               compression stream allocates multiple buffers to
               facilitate parallel compression.  As each buffer fills up,
               the stream uses <see
               cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see> to compress those
               buffers in a background threadpool thread. After a buffer
               is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see
               cref="P:External.Zip.Internal.ZipOutputStream.CodecBufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is
               effective only if set before calling
               <c>ZipOutputStream.Write()</c> for the first time.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateThreshold"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name has already been written
               to the ZipOutputStream.
             </summary>
            
             <param name="name">
               The name of the entry to scan for.
             </param>
            
             <returns>
             true if an entry by the given name has already been written.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write the data from the buffer to the stream.
             </summary>
            
             <remarks>
               As the application writes data into this stream, the data may be
               compressed and encrypted before being written out to the underlying
               stream, depending on the settings of the <see cref="P:External.Zip.Internal.ZipOutputStream.CompressionLevel"/>
               and the <see cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/> properties.
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.PutNextEntry(System.String)">
             <summary>
               Specify the name of the next entry that will be written to the zip file.
             </summary>
            
             <remarks>
             <para>
               Call this method just before calling <see cref="M:External.Zip.Internal.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)"/>, to
               specify the name of the entry that the next set of bytes written to
               the <c>ZipOutputStream</c> belongs to. All subsequent calls to <c>Write</c>,
               until the next call to <c>PutNextEntry</c>,
               will be inserted into the named entry in the zip file.
             </para>
            
             <para>
               If the <paramref name="entryName"/> used in <c>PutNextEntry()</c> ends in
               a slash, then the entry added is marked as a directory. Because directory
               entries do not contain data, a call to <c>Write()</c>, before an
               intervening additional call to <c>PutNextEntry()</c>, will throw an
               exception.
             </para>
            
             <para>
               If you don't call <c>Write()</c> between two calls to
               <c>PutNextEntry()</c>, the first entry is inserted into the zip file as a
               file of zero size.  This may be what you want.
             </para>
            
             <para>
               Because <c>PutNextEntry()</c> closes out the prior entry, if any, this
               method may throw if there is a problem with the prior entry.
             </para>
            
             <para>
               This method returns the <c>ZipEntry</c>.  You can modify public properties
               on the <c>ZipEntry</c>, such as <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/>, <see
               cref="P:External.Zip.Internal.ZipEntry.Password"/>, and so on, until the first call to
               <c>ZipOutputStream.Write()</c>, or until the next call to
               <c>PutNextEntry()</c>.  If you modify the <c>ZipEntry</c> <em>after</em>
               having called <c>Write()</c>, you may get a runtime exception, or you may
               silently get an invalid zip archive.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to create a zip file, using the
               <c>ZipOutputStream</c> class.
            
             <code>
             private void Zipup()
             {
                 using (FileStream fs raw = File.Open(_outputFileName, FileMode.Create, FileAccess.ReadWrite ))
                 {
                     using (var output= new ZipOutputStream(fs))
                     {
                         output.Password = "VerySecret!";
                         output.Encryption = EncryptionAlgorithm.WinZipAes256;
                         output.PutNextEntry("entry1.txt");
                         byte[] buffer= System.Text.Encoding.ASCII.GetBytes("This is the content for entry #1.");
                         output.Write(buffer,0,buffer.Length);
                         output.PutNextEntry("entry2.txt");  // this will be zero length
                         output.PutNextEntry("entry3.txt");
                         buffer= System.Text.Encoding.ASCII.GetBytes("This is the content for entry #3.");
                         output.Write(buffer,0,buffer.Length);
                     }
                 }
             }
             </code>
             </example>
            
             <param name="entryName">
               The name of the entry to be added, including any path to be used
               within the zip file.
             </param>
            
             <returns>
               The ZipEntry created.
             </returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Dispose(System.Boolean)">
             <summary>
             Dispose the stream
             </summary>
            
             <remarks>
             <para>
               This method writes the Zip Central directory, then closes the stream.  The
               application must call Dispose() (or Close) in order to produce a valid zip file.
             </para>
            
             <para>
               Typically the application will call <c>Dispose()</c> implicitly, via a <c>using</c>
               statement in C#, or a <c>Using</c> statement in VB.
             </para>
            
             </remarks>
            
             <param name="disposing">set this to true, always.</param>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CanRead">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CanSeek">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CanWrite">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Length">
            <summary>
            Always returns a NotSupportedException.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Position">
            <summary>
            Setting this property always returns a NotSupportedException. Getting it
            returns the value of the Position on the underlying stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Flush">
            <summary>
            This is a no-op.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">ignored</param>
            <param name="offset">ignored</param>
            <param name="count">ignored</param>
            <returns>nothing</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">ignored</param>
            <param name="origin">ignored</param>
            <returns>nothing</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">ignored</param>
        </member>
        <member name="M:External.Zip.Internal.ZipSegmentedStream.ForUpdate(System.String,System.UInt32)">
            <summary>
              Sort-of like a factory method, ForUpdate is used only when
              the application needs to update the zip entry metadata for
              a segmented zip file, when the starting segment is earlier
              than the ending segment, for a particular entry.
            </summary>
            <remarks>
              <para>
                The update is always contiguous, never rolls over.  As a
                result, this method doesn't need to return a ZSS; it can
                simply return a FileStream.  That's why it's "sort of"
                like a Factory method.
              </para>
              <para>
                Caller must Close/Dispose the stream object returned by
                this method.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipSegmentedStream.CurrentName">
            <summary>
              Name of the filesystem file corresponding to the current segment.
            </summary>
            <remarks>
              <para>
                The name is not always the name currently being used in the
                filesystem.  When rwMode is RwMode.Write, the filesystem file has a
                temporary name until the stream is closed or until the next segment is
                started.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipSegmentedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipSegmentedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="T:External.Zip.Internal.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
               cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see
               href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:External.Zip.Internal.Zlib.ZlibStream" />
             <seealso cref="T:External.Zip.Internal.Zlib.GZipStream" />
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:External.Zip.Internal.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.ZlibStream"/> and <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:External.Zip.Internal.Zlib.DeflateStream" />
             <seealso cref="T:External.Zip.Internal.Zlib.ZlibStream" />
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ParallelDeflateOutputStream">
             <summary>
               A class for compressing streams using the
               Deflate algorithm with multiple threads.
             </summary>
            
             <remarks>
             <para>
               This class performs DEFLATE compression through writing.  For
               more information on the Deflate algorithm, see IETF RFC 1951,
               "DEFLATE Compressed Data Format Specification version 1.3."
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>, except
               that this class is for compression only, and this implementation uses an
               approach that employs multiple worker threads to perform the DEFLATE.  On
               a multi-cpu or multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream, particularly
               for larger streams.  How large?  Anything over 10mb is a good candidate
               for parallel compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla DeflateStream, and also is less efficient as a compressor. For
               large files the size of the compressed data stream can be less than 1%
               larger than the size of a compressed data stream from the vanialla
               DeflateStream.  For smaller files the difference can be larger.  The
               difference will also be larger if you set the BufferSize to be lower than
               the default value.  Your mileage may vary. Finally, for small files, the
               ParallelDeflateOutputStream can be much slower than the vanilla
               DeflateStream, because of the overhead associated to using the thread
               pool.
             </para>
            
             </remarks>
             <seealso cref="T:External.Zip.Internal.Zlib.DeflateStream" />
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
             <summary>
             Create a ParallelDeflateOutputStream.
             </summary>
             <remarks>
            
             <para>
               This stream compresses data written into it via the DEFLATE
               algorithm (see RFC 1951), and writes out the compressed byte stream.
             </para>
            
             <para>
               The instance will use the default compression level, the default
               buffer sizes and the default number of threads and buffers per
               thread.
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>,
               except that this implementation uses an approach that employs
               multiple worker threads to perform the DEFLATE.  On a multi-cpu or
               multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream,
               particularly for larger streams.  How large?  Anything over 10mb is
               a good candidate for parallel compression.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ParallelDeflateOutputStream to compress
             data.  It reads a file, compresses it, and writes the compressed data to
             a second, output file.
            
             <code>
             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
             int n= -1;
             String outputFile = fileToCompress + ".compressed";
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new ParallelDeflateOutputStream(raw))
                     {
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim buffer As Byte() = New Byte(4096) {}
             Dim n As Integer = -1
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                     Using compressor As Stream = New ParallelDeflateOutputStream(raw)
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to which compressed data will be written.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionLevel)">
            <summary>
              Create a ParallelDeflateOutputStream using the specified CompressionLevel.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionLevel,External.Zip.Internal.Zlib.CompressionStrategy,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream using the specified
            CompressionLevel and CompressionStrategy, and specifying whether to
            leave the captive stream open when the ParallelDeflateOutputStream is
            closed.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="strategy">
              By tweaking this parameter, you may be able to optimize the compression for
              data with particular characteristics.
            </param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.MaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory buffer
               pairs to create.  The implementation of this stream allocates
               multiple buffers to facilitate parallel compression.  As each buffer
               fills up, this stream uses <see
               cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see>
               to compress those buffers in a background threadpool thread. After a
               buffer is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see
               cref="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.BufferSize">
             <summary>
               The size of the buffers used by the compressor threads.
             </summary>
             <remarks>
            
             <para>
               The default buffer size is 128k. The application can set this value
               at any time, but it is effective only before the first Write().
             </para>
            
             <para>
               Larger buffer sizes implies larger memory consumption but allows
               more efficient compression. Using smaller buffer sizes consumes less
               memory but may result in less effective compression.  For example,
               using the default buffer size of 128k, the compression delivered is
               within 1% of the compression delivered by the single-threaded <see
               cref="T:External.Zip.Internal.Zlib.DeflateStream"/>.  On the other hand, using a
               BufferSize of 8k can result in a compressed data stream that is 5%
               larger than that delivered by the single-threaded
               <c>DeflateStream</c>.  Excessively small buffer sizes can also cause
               the speed of the ParallelDeflateOutputStream to drop, because of
               larger thread scheduling overhead dealing with many many small
               buffers.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (N*S*2), where N is the number of buffer pairs, and S is the size of
               each buffer (this property). There are 2 buffers used by the
               compressor, one for input and one for output.  By default, DotNetZip
               allocates 4 buffer pairs per CPU core, so if your machine has 4
               cores, then the number of buffer pairs used will be 16. If you
               accept the default value of this property, 128k, then the
               ParallelDeflateOutputStream will use 16 * 2 * 128kb of buffer memory
               in total, or 4mb, in blocks of 128kb.  If you set this property to
               64kb, then the number will be 16 * 2 * 64kb of buffer memory, or
               2mb.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Crc32">
            <summary>
            The CRC32 for the data that was written out, prior to compression.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            The total number of uncompressed bytes processed by the ParallelDeflateOutputStream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               To use the ParallelDeflateOutputStream to compress data, create a
               ParallelDeflateOutputStream with CompressionMode.Compress, passing a
               writable output stream.  Then call Write() on that
               ParallelDeflateOutputStream, providing uncompressed data as input.  The
               data sent to the output stream will be the compressed form of the data
               written.
             </para>
            
             <para>
               To decompress data, use the <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/> class.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            You must call Close on the stream to guarantee that all of the data written in has
            been compressed, and the compressed data has been written out.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Dispose">
            <summary>Dispose the object</summary>
            <remarks>
              <para>
                Because ParallelDeflateOutputStream is IDisposable, the
                application must call this method when finished using the instance.
              </para>
              <para>
                This method is generally called implicitly upon exit from
                a <c>using</c> scope in C# (<c>Using</c> in VB).
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>The Dispose method</summary>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
               Resets the stream for use with another stream.
             </summary>
             <remarks>
               Because the ParallelDeflateOutputStream is expensive to create, it
               has been designed so that it can be recycled and re-used.  You have
               to call Close() on the stream first, then you can call Reset() on
               it, to use it again on another stream.
             </remarks>
            
             <param name="stream">
               The new output stream for this era.
             </param>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.CanRead">
            <summary>
            Indicates whether the stream supports Read operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.CanWrite">
            <summary>
            Indicates whether the stream supports Write operations.
            </summary>
            <remarks>
            Returns true if the provided stream is writable.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Length">
            <summary>
            Reading this property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Position">
            <summary>
            Returns the current position of the output stream.
            </summary>
            <remarks>
              <para>
                Because the output gets written by a background thread,
                the value may change asynchronously.  Setting this
                property always throws a NotSupportedException.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">
              The buffer into which data would be read, IF THIS METHOD
              ACTUALLY DID ANYTHING.
            </param>
            <param name="offset">
              The offset within that data array at which to insert the
              data that is read, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <param name="count">
              The number of bytes to write, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <returns>nothing.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">
              The offset to seek to....
              IF THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <param name="origin">
              The reference specifying how to apply the offset....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <returns>nothing. It always throws.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:External.Zip.Internal.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:External.Zip.Internal.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.#ctor(External.Zip.Internal.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.Inflate(External.Zip.Internal.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.Deflate(External.Zip.Internal.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.SetDeflateParams(External.Zip.Internal.Zlib.CompressionLevel,External.Zip.Internal.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see
             href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
             cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see
             href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:External.Zip.Internal.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:External.Zip.Internal.Zlib.DeflateStream" />
             <seealso cref="T:External.Zip.Internal.Zlib.GZipStream" />
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref
               name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:External.Zip.ZipFactory">
            <summary>
            ZipFactory provides instances of ZipReader and ZipWriter.
            </summary>
        </member>
        <member name="M:External.Zip.ZipWriter.AddEntry(System.String,System.IO.Stream)">
            <summary>
            Adds an entry to the ZIP file (only writes the header, to write
            the content use Stream methods).
            </summary>
            <param name="entryPath">The relative path of the entry in the ZIP file.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:External.Text.MonoEncoding.GetBytesInternal(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Object)">
            <summary>
            GetBytes method used internally by state-full encoders/encodings.
            </summary>
            <param name="chars">The chars.</param>
            <param name="charCount">The char count.</param>
            <param name="bytes">The bytes.</param>
            <param name="byteCount">The byte count.</param>
            <param name="flush">if set to <c>true</c> [flush].</param>
            <param name="state">The state object.</param>
            <returns></returns>
            <remarks>
            Only state-full encoders need to implement this method (ie. ISO-2022-JP)
            </remarks>
        </member>
    </members>
</doc>
